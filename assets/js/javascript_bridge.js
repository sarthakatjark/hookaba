(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // base64_buf.js
  var require_base64_buf = __commonJS({
    "base64_buf.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var lookup = new Uint8Array(256);
      for (i = 0; i < chars.length; i++) {
        lookup[chars.charCodeAt(i)] = i;
      }
      var i;
      function base64_encode(arraybuffer) {
        var bytes = new Uint8Array(arraybuffer), i2, len = bytes.length, base64 = "";
        for (i2 = 0; i2 < len; i2 += 3) {
          base64 += chars[bytes[i2] >> 2];
          base64 += chars[(bytes[i2] & 3) << 4 | bytes[i2 + 1] >> 4];
          base64 += chars[(bytes[i2 + 1] & 15) << 2 | bytes[i2 + 2] >> 6];
          base64 += chars[bytes[i2 + 2] & 63];
        }
        if (len % 3 === 2) {
          base64 = base64.substring(0, base64.length - 1) + "=";
        } else if (len % 3 === 1) {
          base64 = base64.substring(0, base64.length - 2) + "==";
        }
        return base64;
      }
      exports.base64_encode = base64_encode;
      function base64_decode(base64) {
        var bufferLength = base64.length * 0.75, len = base64.length, i2, p = 0, encoded1, encoded2, encoded3, encoded4;
        if (base64[base64.length - 1] === "=") {
          bufferLength--;
          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }
        var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
        for (i2 = 0; i2 < len; i2 += 4) {
          encoded1 = lookup[base64.charCodeAt(i2)];
          encoded2 = lookup[base64.charCodeAt(i2 + 1)];
          encoded3 = lookup[base64.charCodeAt(i2 + 2)];
          encoded4 = lookup[base64.charCodeAt(i2 + 3)];
          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
        }
        return arraybuffer;
      }
      exports.base64_decode = base64_decode;
    }
  });

  // bytes_deal.js
  var require_bytes_deal = __commonJS({
    "bytes_deal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.bytes_write_dt = exports.bytes_replace_all = exports.bytes_select_count = exports.bezier2 = exports.bold_line = exports.draw_line = exports.bytes_to_hex = exports.hex_to_bytes = exports.bytes_write_int = exports.bytes_read_int = exports.concat_buf = exports.memcpy_buf = void 0;
      function memcpy_buf(dst, offset, src, srcStart, len) {
        for (var i = 0; i < len; i++)
          dst[offset + i] = src[srcStart + i];
      }
      exports.memcpy_buf = memcpy_buf;
      function concat_buf(arr) {
        var len = 0;
        for (var i = 0; i < arr.length; i++)
          len += arr[i].length;
        var npos = 0;
        var ret = new Uint8Array(len);
        for (var i = 0; i < arr.length; i++) {
          memcpy_buf(ret, npos, arr[i], 0, arr[i].length);
          npos += arr[i].length;
        }
        return ret;
      }
      exports.concat_buf = concat_buf;
      function bytes_read_int(buf, pos, len, bBigEndian = false) {
        var ret = 0;
        if (bBigEndian) {
          for (var i = 0; i < len; i++) {
            ret += buf[pos + i] << 8 * (len - 1 - i);
          }
        } else {
          for (var i = 0; i < len; i++) {
            ret += buf[pos + i] << 8 * i;
          }
        }
        return ret;
      }
      exports.bytes_read_int = bytes_read_int;
      function bytes_write_int(dst, pos, val, len_val, bBigEndian = false) {
        if (bBigEndian) {
          for (var i = 0; i < len_val; i++)
            dst[pos + i] = val >> 8 * (len_val - 1 - i) & 255;
        } else {
          for (var i = 0; i < len_val; i++)
            dst[pos + i] = val >> 8 * i & 255;
        }
      }
      exports.bytes_write_int = bytes_write_int;
      function hex_to_bytes(hex, len_byte) {
        var len = (hex.length + 1) / len_byte;
        var buf = new Uint8Array(len);
        for (var i = 0; i < len; ++i) {
          var pos = i * len_byte;
          buf[i] = parseInt(hex.slice(pos, pos + 2), 16);
        }
        return buf;
      }
      exports.hex_to_bytes = hex_to_bytes;
      function bytes_to_hex(buf, interval) {
        var arr = Array.prototype.map.call(new Uint8Array(buf), function(bit) {
          return ("0" + bit.toString(16)).slice(-2);
        });
        return arr.join(interval);
      }
      exports.bytes_to_hex = bytes_to_hex;
      function bytes_select(src, offset, dst) {
        var pos = offset;
        var pos_last = src.length - dst.length;
        while (pos <= pos_last) {
          var pos_s = pos;
          var pos_d = 0;
          var len_cmp = 0;
          while (src[pos_s] == dst[pos_d] && len_cmp < dst.length) {
            pos_s++;
            pos_d++;
            len_cmp++;
          }
          if (len_cmp == dst.length)
            return pos;
          pos++;
        }
        return -1;
      }
      function bytes_select_last(src, offset, dst) {
        var pos = src.length - dst.length;
        while (pos >= offset) {
          var pos_s = pos;
          var pos_d = 0;
          var len_cmp = 0;
          while (src[pos_s] == dst[pos_d] && len_cmp < dst.length) {
            pos_s++;
            pos_d++;
            len_cmp++;
          }
          if (len_cmp == dst.length)
            return pos;
          pos--;
        }
        return -1;
      }
      function bytes_select_count(pSrc, offset, pTarget) {
        var count = 0;
        var pos_start = offset;
        do {
          var pos = bytes_select(pSrc, pos_start, pTarget);
          if (pos < 0)
            break;
          pos_start += pos + pTarget.length;
          count++;
        } while (1);
        return count;
      }
      exports.bytes_select_count = bytes_select_count;
      function bytes_replace_last(pSrc, offset, pOld, pNew) {
        var pos = bytes_select_last(pSrc, offset, pOld);
        if (pos < 0)
          return pSrc;
        if (pOld.length == pNew.length) {
          memcpy_buf(pSrc, pos, pNew, 0, pNew.length);
          return pSrc;
        }
        var ret = new Uint8Array(pSrc.length + pNew.length - pOld.length);
        memcpy_buf(ret, 0, pSrc, 0, pos);
        memcpy_buf(ret, pos, pNew, 0, pNew.length);
        memcpy_buf(ret, pos + pNew.length, pSrc, pos + pOld.length, pSrc.length - pos - pOld.length);
        console.log(pSrc, ret, pNew, pOld);
        return ret;
      }
      function bytes_replace_all(pSrc, offset, pOld, pNew) {
        var count = bytes_select_count(pSrc, offset, pOld);
        if (0 == count)
          return pSrc;
        while (count > 0) {
          pSrc = bytes_replace_last(pSrc, offset, pOld, pNew);
          count--;
        }
        return pSrc;
      }
      exports.bytes_replace_all = bytes_replace_all;
      function bytes_write_dt(pDest, offset, date) {
        var y = date.getFullYear();
        console.log("y:", y);
        pDest[offset + 0] = y & 255;
        pDest[offset + 1] = y >> 8 & 255;
        pDest[offset + 2] = date.getMonth() + 1;
        pDest[offset + 3] = date.getDate();
        pDest[offset + 4] = date.getHours();
        pDest[offset + 5] = date.getMinutes();
        pDest[offset + 6] = date.getSeconds();
      }
      exports.bytes_write_dt = bytes_write_dt;
      function draw_line(x0, y0, x1, y1) {
        if (x0 == x1 && y0 == y1) {
          return [x0, y0];
        }
        var step_x = 1;
        var step_y = 1;
        if (x0 > x1)
          step_x = -1;
        if (y0 > y1)
          step_y = -1;
        var data = [];
        if (x0 == x1) {
          for (var y = y0; y != y1; y += step_y)
            data.push([x0, y]);
        } else if (y0 == y1) {
          for (var x = x0; x != x1; x += step_x)
            data.push([x, y0]);
        } else {
          var des_x = Math.abs(x0 - x1);
          var des_y = Math.abs(y0 - y1);
          if (des_x == des_y) {
            for (var x = x0, y = y0; x != x1; x += step_x, y += step_y)
              data.push([x, y0]);
          } else if (des_x > des_y) {
            var e = des_y - des_x / 2;
            var y = y0;
            for (var x = x0; x != x1; x += step_x) {
              data.push([x, y]);
              if (e > 0) {
                y += step_y;
                e -= des_x;
              }
              e += des_y;
            }
          } else {
            var e = des_x - des_y / 2;
            var x = x0;
            for (var y = y0; y != y1; y += step_y) {
              data.push([x, y]);
              if (e > 0) {
                x += step_x;
                e -= des_y;
              }
              e += des_x;
            }
          }
        }
        data.push([x1, y1]);
        return data;
      }
      exports.draw_line = draw_line;
      function bold_line(data, w, h, b) {
        if (b > 1) {
          var w = 64;
          var h = 64;
          var s = Math.floor((1 - b) / 2);
          var e = Math.floor(b / 2);
          var len = data.length;
          for (var i = 0; i < len; i++) {
            var xs = data[i][0];
            var ys = data[i][1];
            for (var x = s; x <= e; x++) {
              var x_c = xs + x;
              if (x_c < 0 || x_c >= w)
                continue;
              for (var y = s; y <= e; y++) {
                var y_c = ys + y;
                if (y_c < 0 || y_c >= h)
                  continue;
                data.push([x_c, y_c]);
              }
            }
          }
          data = Array.from(new Set(data));
        }
        return data;
      }
      exports.bold_line = bold_line;
      function bezier2(x0, y0, x1, y1, x2, y2) {
        var dx01 = Math.abs(x1 - x0) + 1;
        var dy01 = Math.abs(y1 - y0) + 1;
        var dx12 = Math.abs(x2 - x1) + 1;
        var dy12 = Math.abs(y2 - y1) + 1;
        var count01 = Math.max(dx01, dy01);
        var count12 = Math.max(dx12, dy12);
        var count = Math.max(count01, count12);
        var data = [];
        for (var i = 0; i < count; i++) {
          var x01 = x0 * i / count + x1 * (1 - i) / count;
          var y01 = y0 * i / count + y1 * (1 - i) / count;
          var x12 = x1 * i / count + x2 * (1 - i) / count;
          var y12 = y1 * i / count + y2 * (1 - i) / count;
          var dx02 = Math.abs(x12 - x01) + 1;
          var dy02 = Math.abs(y12 - y01) + 1;
          var count02 = Math.max(dx02, dy02);
          for (var j = 0; j < count02; j++) {
            var x02 = x01 * j / count02 + x12 * (1 - j) / count02;
            var y02 = y01 * i / count02 + y12 * (1 - j) / count02;
            data.push([x02, y02]);
          }
        }
        return Array.from(new Set(data));
      }
      exports.bezier2 = bezier2;
    }
  });

  // code_convert.js
  var require_code_convert = __commonJS({
    "code_convert.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.str_bytes_uni = exports.utf8_bytes_gb = exports.bytes_str = exports.str_bytes = void 0;
      var code_table = {
        164: 41448,
        167: 41452,
        168: 41383,
        176: 41443,
        177: 41408,
        183: 41380,
        215: 41409,
        224: 43172,
        225: 43170,
        232: 43176,
        233: 43174,
        234: 43194,
        236: 43180,
        237: 43178,
        242: 43184,
        243: 43182,
        247: 41410,
        249: 43188,
        250: 43186,
        252: 43193,
        257: 43169,
        275: 43173,
        283: 43175,
        299: 43177,
        324: 43197,
        328: 43198,
        333: 43181,
        363: 43185,
        462: 43171,
        464: 43179,
        466: 43183,
        468: 43187,
        470: 43189,
        472: 43190,
        474: 43191,
        476: 43192,
        593: 43195,
        609: 43200,
        711: 41382,
        713: 41381,
        913: 42657,
        914: 42658,
        915: 42659,
        916: 42660,
        917: 42661,
        918: 42662,
        919: 42663,
        920: 42664,
        921: 42665,
        922: 42666,
        923: 42667,
        924: 42668,
        925: 42669,
        926: 42670,
        927: 42671,
        928: 42672,
        929: 42673,
        931: 42674,
        932: 42675,
        933: 42676,
        934: 42677,
        935: 42678,
        936: 42679,
        937: 42680,
        945: 42689,
        946: 42690,
        947: 42691,
        948: 42692,
        949: 42693,
        950: 42694,
        951: 42695,
        952: 42696,
        953: 42697,
        954: 42698,
        955: 42699,
        956: 42700,
        957: 42701,
        958: 42702,
        959: 42703,
        960: 42704,
        961: 42705,
        963: 42706,
        964: 42707,
        965: 42708,
        966: 42709,
        967: 42710,
        968: 42711,
        969: 42712,
        1025: 42919,
        1040: 42913,
        1041: 42914,
        1042: 42915,
        1043: 42916,
        1044: 42917,
        1045: 42918,
        1046: 42920,
        1047: 42921,
        1048: 42922,
        1049: 42923,
        1050: 42924,
        1051: 42925,
        1052: 42926,
        1053: 42927,
        1054: 42928,
        1055: 42929,
        1056: 42930,
        1057: 42931,
        1058: 42932,
        1059: 42933,
        1060: 42934,
        1061: 42935,
        1062: 42936,
        1063: 42937,
        1064: 42938,
        1065: 42939,
        1066: 42940,
        1067: 42941,
        1068: 42942,
        1069: 42943,
        1070: 42944,
        1071: 42945,
        1072: 42961,
        1073: 42962,
        1074: 42963,
        1075: 42964,
        1076: 42965,
        1077: 42966,
        1078: 42968,
        1079: 42969,
        1080: 42970,
        1081: 42971,
        1082: 42972,
        1083: 42973,
        1084: 42974,
        1085: 42975,
        1086: 42976,
        1087: 42977,
        1088: 42978,
        1089: 42979,
        1090: 42980,
        1091: 42981,
        1092: 42982,
        1093: 42983,
        1094: 42984,
        1095: 42985,
        1096: 42986,
        1097: 42987,
        1098: 42988,
        1099: 42989,
        1100: 42990,
        1101: 42991,
        1102: 42992,
        1103: 42993,
        1105: 42967,
        8212: 41386,
        8214: 41388,
        8216: 41390,
        8217: 41391,
        8220: 41392,
        8221: 41393,
        8230: 41389,
        8240: 41451,
        8242: 41444,
        8243: 41445,
        8251: 41465,
        8451: 41446,
        8470: 41453,
        8544: 41713,
        8545: 41714,
        8546: 41715,
        8547: 41716,
        8548: 41717,
        8549: 41718,
        8550: 41719,
        8551: 41720,
        8552: 41721,
        8553: 41722,
        8554: 41723,
        8555: 41724,
        8560: 41633,
        8561: 41634,
        8562: 41635,
        8563: 41636,
        8564: 41637,
        8565: 41638,
        8566: 41639,
        8567: 41640,
        8568: 41641,
        8569: 41642,
        8592: 41467,
        8593: 41468,
        8594: 41466,
        8595: 41469,
        8712: 41418,
        8719: 41415,
        8721: 41414,
        8730: 41420,
        8733: 41432,
        8734: 41438,
        8736: 41423,
        8741: 41422,
        8743: 41412,
        8744: 41413,
        8745: 41417,
        8746: 41416,
        8747: 41426,
        8750: 41427,
        8756: 41440,
        8757: 41439,
        8758: 41411,
        8759: 41419,
        8765: 41431,
        8776: 41430,
        8780: 41429,
        8800: 41433,
        8801: 41428,
        8804: 41436,
        8805: 41437,
        8814: 41434,
        8815: 41435,
        8857: 41425,
        8869: 41421,
        8978: 41424,
        9312: 41689,
        9313: 41690,
        9314: 41691,
        9315: 41692,
        9316: 41693,
        9317: 41694,
        9318: 41695,
        9319: 41696,
        9320: 41697,
        9321: 41698,
        9332: 41669,
        9333: 41670,
        9334: 41671,
        9335: 41672,
        9336: 41673,
        9337: 41674,
        9338: 41675,
        9339: 41676,
        9340: 41677,
        9341: 41678,
        9342: 41679,
        9343: 41680,
        9344: 41681,
        9345: 41682,
        9346: 41683,
        9347: 41684,
        9348: 41685,
        9349: 41686,
        9350: 41687,
        9351: 41688,
        9352: 41649,
        9353: 41650,
        9354: 41651,
        9355: 41652,
        9356: 41653,
        9357: 41654,
        9358: 41655,
        9359: 41656,
        9360: 41657,
        9361: 41658,
        9362: 41659,
        9363: 41660,
        9364: 41661,
        9365: 41662,
        9366: 41663,
        9367: 41664,
        9368: 41665,
        9369: 41666,
        9370: 41667,
        9371: 41668,
        9472: 43428,
        9473: 43429,
        9474: 43430,
        9475: 43431,
        9476: 43432,
        9477: 43433,
        9478: 43434,
        9479: 43435,
        9480: 43436,
        9481: 43437,
        9482: 43438,
        9483: 43439,
        9484: 43440,
        9485: 43441,
        9486: 43442,
        9487: 43443,
        9488: 43444,
        9489: 43445,
        9490: 43446,
        9491: 43447,
        9492: 43448,
        9493: 43449,
        9494: 43450,
        9495: 43451,
        9496: 43452,
        9497: 43453,
        9498: 43454,
        9499: 43455,
        9500: 43456,
        9501: 43457,
        9502: 43458,
        9503: 43459,
        9504: 43460,
        9505: 43461,
        9506: 43462,
        9507: 43463,
        9508: 43464,
        9509: 43465,
        9510: 43466,
        9511: 43467,
        9512: 43468,
        9513: 43469,
        9514: 43470,
        9515: 43471,
        9516: 43472,
        9517: 43473,
        9518: 43474,
        9519: 43475,
        9520: 43476,
        9521: 43477,
        9522: 43478,
        9523: 43479,
        9524: 43480,
        9525: 43481,
        9526: 43482,
        9527: 43483,
        9528: 43484,
        9529: 43485,
        9530: 43486,
        9531: 43487,
        9532: 43488,
        9533: 43489,
        9534: 43490,
        9535: 43491,
        9536: 43492,
        9537: 43493,
        9538: 43494,
        9539: 43495,
        9540: 43496,
        9541: 43497,
        9542: 43498,
        9543: 43499,
        9544: 43500,
        9545: 43501,
        9546: 43502,
        9547: 43503,
        9632: 41462,
        9633: 41461,
        9650: 41464,
        9651: 41463,
        9670: 41460,
        9671: 41459,
        9675: 41456,
        9678: 41458,
        9679: 41457,
        9733: 41455,
        9734: 41454,
        9792: 41442,
        9794: 41441,
        12288: 41377,
        12289: 41378,
        12290: 41379,
        12291: 41384,
        12293: 41385,
        12296: 41396,
        12297: 41397,
        12298: 41398,
        12299: 41399,
        12300: 41400,
        12301: 41401,
        12302: 41402,
        12303: 41403,
        12304: 41406,
        12305: 41407,
        12307: 41470,
        12308: 41394,
        12309: 41395,
        12310: 41404,
        12311: 41405,
        12353: 42145,
        12354: 42146,
        12355: 42147,
        12356: 42148,
        12357: 42149,
        12358: 42150,
        12359: 42151,
        12360: 42152,
        12361: 42153,
        12362: 42154,
        12363: 42155,
        12364: 42156,
        12365: 42157,
        12366: 42158,
        12367: 42159,
        12368: 42160,
        12369: 42161,
        12370: 42162,
        12371: 42163,
        12372: 42164,
        12373: 42165,
        12374: 42166,
        12375: 42167,
        12376: 42168,
        12377: 42169,
        12378: 42170,
        12379: 42171,
        12380: 42172,
        12381: 42173,
        12382: 42174,
        12383: 42175,
        12384: 42176,
        12385: 42177,
        12386: 42178,
        12387: 42179,
        12388: 42180,
        12389: 42181,
        12390: 42182,
        12391: 42183,
        12392: 42184,
        12393: 42185,
        12394: 42186,
        12395: 42187,
        12396: 42188,
        12397: 42189,
        12398: 42190,
        12399: 42191,
        12400: 42192,
        12401: 42193,
        12402: 42194,
        12403: 42195,
        12404: 42196,
        12405: 42197,
        12406: 42198,
        12407: 42199,
        12408: 42200,
        12409: 42201,
        12410: 42202,
        12411: 42203,
        12412: 42204,
        12413: 42205,
        12414: 42206,
        12415: 42207,
        12416: 42208,
        12417: 42209,
        12418: 42210,
        12419: 42211,
        12420: 42212,
        12421: 42213,
        12422: 42214,
        12423: 42215,
        12424: 42216,
        12425: 42217,
        12426: 42218,
        12427: 42219,
        12428: 42220,
        12429: 42221,
        12430: 42222,
        12431: 42223,
        12432: 42224,
        12433: 42225,
        12434: 42226,
        12435: 42227,
        12449: 42401,
        12450: 42402,
        12451: 42403,
        12452: 42404,
        12453: 42405,
        12454: 42406,
        12455: 42407,
        12456: 42408,
        12457: 42409,
        12458: 42410,
        12459: 42411,
        12460: 42412,
        12461: 42413,
        12462: 42414,
        12463: 42415,
        12464: 42416,
        12465: 42417,
        12466: 42418,
        12467: 42419,
        12468: 42420,
        12469: 42421,
        12470: 42422,
        12471: 42423,
        12472: 42424,
        12473: 42425,
        12474: 42426,
        12475: 42427,
        12476: 42428,
        12477: 42429,
        12478: 42430,
        12479: 42431,
        12480: 42432,
        12481: 42433,
        12482: 42434,
        12483: 42435,
        12484: 42436,
        12485: 42437,
        12486: 42438,
        12487: 42439,
        12488: 42440,
        12489: 42441,
        12490: 42442,
        12491: 42443,
        12492: 42444,
        12493: 42445,
        12494: 42446,
        12495: 42447,
        12496: 42448,
        12497: 42449,
        12498: 42450,
        12499: 42451,
        12500: 42452,
        12501: 42453,
        12502: 42454,
        12503: 42455,
        12504: 42456,
        12505: 42457,
        12506: 42458,
        12507: 42459,
        12508: 42460,
        12509: 42461,
        12510: 42462,
        12511: 42463,
        12512: 42464,
        12513: 42465,
        12514: 42466,
        12515: 42467,
        12516: 42468,
        12517: 42469,
        12518: 42470,
        12519: 42471,
        12520: 42472,
        12521: 42473,
        12522: 42474,
        12523: 42475,
        12524: 42476,
        12525: 42477,
        12526: 42478,
        12527: 42479,
        12528: 42480,
        12529: 42481,
        12530: 42482,
        12531: 42483,
        12532: 42484,
        12533: 42485,
        12534: 42486,
        12549: 43205,
        12550: 43206,
        12551: 43207,
        12552: 43208,
        12553: 43209,
        12554: 43210,
        12555: 43211,
        12556: 43212,
        12557: 43213,
        12558: 43214,
        12559: 43215,
        12560: 43216,
        12561: 43217,
        12562: 43218,
        12563: 43219,
        12564: 43220,
        12565: 43221,
        12566: 43222,
        12567: 43223,
        12568: 43224,
        12569: 43225,
        12570: 43226,
        12571: 43227,
        12572: 43228,
        12573: 43229,
        12574: 43230,
        12575: 43231,
        12576: 43232,
        12577: 43233,
        12578: 43234,
        12579: 43235,
        12580: 43236,
        12581: 43237,
        12582: 43238,
        12583: 43239,
        12584: 43240,
        12585: 43241,
        12832: 41701,
        12833: 41702,
        12834: 41703,
        12835: 41704,
        12836: 41705,
        12837: 41706,
        12838: 41707,
        12839: 41708,
        12840: 41709,
        12841: 41710,
        19968: 53947,
        19969: 46753,
        19971: 50911,
        19975: 52722,
        19976: 54729,
        19977: 51453,
        19978: 51663,
        19979: 53186,
        19980: 55458,
        19981: 45755,
        19982: 54251,
        19984: 55460,
        19985: 46067,
        19987: 55208,
        19988: 51154,
        19989: 55463,
        19990: 51904,
        19992: 51184,
        19993: 45563,
        19994: 53941,
        19995: 46292,
        19996: 46763,
        19997: 52159,
        19998: 55465,
        20002: 46762,
        20004: 49597,
        20005: 53711,
        20007: 51621,
        20008: 55469,
        20010: 47350,
        20011: 53694,
        20012: 58332,
        20013: 54992,
        20016: 47073,
        20018: 46254,
        20020: 49625,
        20022: 55484,
        20024: 52712,
        20025: 46500,
        20026: 52906,
        20027: 55031,
        20029: 49398,
        20030: 48857,
        20031: 55471,
        20035: 50379,
        20037: 48835,
        20039: 55473,
        20040: 50100,
        20041: 53989,
        20043: 54958,
        20044: 52954,
        20045: 54695,
        20046: 47861,
        20047: 47014,
        20048: 49366,
        20050: 50873,
        20051: 50642,
        20052: 51143,
        20054: 47572,
        20056: 46027,
        20057: 53970,
        20060: 55487,
        20061: 48837,
        20062: 50930,
        20063: 53938,
        20064: 53168,
        20065: 53223,
        20070: 51945,
        20073: 55488,
        20080: 49906,
        20081: 49874,
        20083: 51433,
        20094: 51116,
        20102: 49611,
        20104: 54248,
        20105: 54777,
        20107: 51906,
        20108: 46846,
        20109: 55457,
        20110: 54234,
        20111: 49143,
        20113: 54470,
        20114: 48037,
        20115: 55489,
        20116: 52965,
        20117: 48814,
        20120: 55464,
        20122: 53703,
        20123: 53417,
        20127: 55485,
        20128: 55791,
        20129: 52726,
        20130: 49082,
        20132: 48571,
        20133: 47781,
        20134: 53984,
        20135: 45818,
        20136: 47840,
        20137: 50358,
        20139: 53229,
        20140: 48809,
        20141: 52644,
        20142: 49601,
        20146: 51159,
        20147: 55793,
        20149: 55796,
        20154: 51403,
        20155: 55529,
        20159: 53978,
        20160: 51890,
        20161: 51402,
        20162: 55532,
        20163: 55530,
        20164: 55494,
        20165: 48630,
        20166: 50893,
        20167: 46064,
        20169: 55531,
        20170: 48625,
        20171: 48617,
        20173: 51412,
        20174: 46291,
        20177: 49880,
        20179: 45782,
        20180: 55248,
        20181: 51915,
        20182: 52219,
        20183: 54732,
        20184: 47286,
        20185: 53193,
        20189: 55770,
        20190: 55536,
        20191: 51114,
        20193: 55534,
        20195: 46330,
        20196: 49646,
        20197: 53972,
        20200: 55533,
        20202: 53959,
        20203: 55535,
        20204: 50119,
        20208: 53750,
        20210: 55001,
        20211: 55538,
        20213: 55541,
        20214: 48382,
        20215: 48347,
        20219: 51406,
        20221: 47069,
        20223: 47042,
        20225: 50931,
        20233: 55544,
        20234: 53953,
        20237: 52969,
        20238: 48319,
        20239: 47100,
        20240: 47013,
        20241: 53469,
        20247: 55002,
        20248: 54213,
        20249: 48111,
        20250: 48097,
        20251: 55537,
        20254: 51617,
        20255: 52912,
        20256: 46251,
        20258: 55539,
        20260: 51659,
        20261: 55542,
        20262: 49879,
        20263: 55543,
        20266: 52913,
        20267: 55545,
        20271: 45742,
        20272: 47552,
        20274: 55715,
        20276: 45289,
        20278: 49638,
        20280: 51692,
        20282: 52165,
        20284: 52166,
        20285: 55716,
        20291: 46568,
        20294: 46507,
        20301: 52923,
        20302: 46541,
        20303: 55201,
        20304: 55284,
        20305: 54227,
        20307: 52453,
        20309: 47822,
        20311: 55714,
        20312: 55772,
        20313: 54240,
        20314: 55549,
        20315: 47088,
        20316: 55287,
        20317: 55550,
        20318: 55546,
        20319: 55713,
        20320: 50403,
        20323: 54198,
        20324: 55540,
        20325: 55773,
        20327: 55547,
        20329: 50661,
        20332: 49360,
        20335: 53744,
        20336: 45275,
        20339: 48337,
        20340: 55718,
        20342: 55717,
        20347: 55724,
        20348: 55726,
        20350: 55723,
        20351: 51897,
        20355: 55721,
        20356: 54966,
        20360: 46046,
        20361: 55720,
        20363: 49405,
        20365: 51916,
        20367: 55722,
        20369: 55719,
        20372: 55728,
        20375: 46769,
        20379: 47529,
        20381: 53952,
        20384: 53184,
        20387: 49858,
        20389: 48580,
        20390: 54764,
        20391: 45792,
        20392: 51144,
        20393: 49131,
        20394: 55725,
        20396: 55727,
        20398: 52970,
        20399: 47854,
        20405: 51158,
        20415: 45539,
        20419: 46297,
        20420: 46829,
        20421: 55732,
        20426: 49057,
        20430: 55774,
        20431: 51150,
        20432: 49406,
        20433: 55736,
        20439: 52183,
        20440: 47101,
        20442: 55733,
        20444: 55735,
        20445: 45475,
        20446: 54241,
        20447: 55737,
        20449: 53445,
        20451: 55734,
        20454: 55729,
        20456: 55730,
        20457: 49577,
        20458: 55731,
        20461: 48371,
        20462: 53470,
        20463: 47273,
        20465: 48867,
        20467: 55741,
        20472: 55738,
        20474: 45235,
        20478: 55746,
        20492: 55748,
        20493: 45494,
        20495: 55743,
        20498: 46521,
        20500: 48883,
        20504: 52424,
        20505: 47858,
        20506: 53968,
        20508: 55747,
        20511: 48616,
        20513: 45995,
        20517: 55749,
        20518: 48875,
        20520: 55750,
        20521: 55739,
        20522: 50399,
        20524: 55742,
        20525: 55745,
        20526: 55744,
        20538: 54702,
        20540: 54965,
        20542: 51171,
        20547: 55752,
        20551: 48345,
        20552: 55754,
        20556: 55740,
        20558: 55755,
        20559: 50859,
        20565: 55753,
        20570: 55286,
        20572: 52643,
        20581: 48545,
        20588: 55756,
        20598: 50620,
        20599: 52661,
        20603: 55757,
        20606: 55751,
        20607: 45989,
        20608: 49150,
        20613: 47285,
        20616: 49404,
        20621: 45304,
        20643: 46326,
        20645: 55758,
        20647: 55759,
        20648: 46242,
        20649: 55760,
        20652: 46303,
        20658: 45249,
        20666: 55761,
        20667: 51637,
        20687: 53233,
        20694: 55762,
        20698: 49605,
        20710: 55766,
        20711: 51630,
        20716: 55765,
        20717: 55764,
        20718: 55767,
        20723: 52187,
        20725: 48553,
        20731: 50855,
        20742: 55763,
        20743: 55768,
        20747: 55769,
        20754: 51429,
        20769: 49372,
        20799: 46841,
        20800: 55459,
        20801: 54474,
        20803: 54442,
        20804: 53462,
        20805: 46052,
        20806: 54743,
        20808: 53192,
        20809: 47586,
        20811: 49099,
        20813: 50146,
        20817: 46802,
        20820: 52675,
        20821: 55790,
        20822: 55792,
        20826: 46515,
        20828: 46773,
        20834: 48804,
        20837: 51435,
        20840: 51371,
        20843: 45259,
        20844: 47531,
        20845: 49657,
        20846: 55778,
        20848: 49340,
        20849: 47538,
        20851: 47576,
        20852: 53451,
        20853: 45560,
        20854: 50916,
        20855: 48863,
        20856: 46564,
        20857: 55240,
        20859: 53752,
        20860: 48358,
        20861: 51934,
        20864: 48317,
        20865: 55782,
        20866: 55527,
        20869: 50394,
        20872: 47316,
        20873: 51389,
        20876: 45793,
        20877: 54489,
        20882: 50096,
        20885: 50145,
        20886: 55970,
        20887: 51423,
        20889: 53428,
        20891: 48892,
        20892: 50601,
        20896: 47578,
        20898: 55971,
        20900: 54441,
        20901: 55972,
        20907: 55803,
        20908: 46764,
        20911: 47083,
        20912: 45561,
        20913: 55804,
        20914: 46053,
        20915: 48886,
        20917: 49142,
        20918: 53937,
        20919: 49380,
        20923: 46771,
        20924: 55806,
        20925: 55805,
        20928: 48827,
        20932: 50912,
        20934: 55228,
        20935: 55969,
        20937: 49593,
        20939: 46578,
        20940: 49640,
        20943: 48373,
        20945: 46293,
        20955: 49629,
        20957: 50429,
        20960: 48312,
        20961: 47026,
        20964: 47087,
        20971: 55788,
        20973: 50878,
        20975: 49069,
        20976: 48075,
        20979: 46538,
        20981: 56265,
        20982: 53463,
        20984: 52665,
        20985: 45244,
        20986: 46070,
        20987: 48119,
        20988: 56266,
        20989: 47791,
        20991: 54500,
        20992: 46518,
        20993: 46579,
        20994: 55510,
        20995: 51408,
        20998: 47062,
        20999: 51152,
        21e3: 55511,
        21002: 49071,
        21005: 56251,
        21006: 55512,
        21009: 53452,
        21010: 48046,
        21014: 60350,
        21015: 49616,
        21016: 49653,
        21017: 54514,
        21018: 47317,
        21019: 46260,
        21021: 46069,
        21024: 51646,
        21028: 50640,
        21032: 50649,
        21033: 49403,
        21035: 45552,
        21037: 55513,
        21038: 47566,
        21040: 46525,
        21043: 55514,
        21046: 54982,
        21047: 52130,
        21048: 51375,
        21049: 51634,
        21050: 46284,
        21051: 49100,
        21053: 47604,
        21055: 55515,
        21056: 55516,
        21057: 46823,
        21058: 48321,
        21059: 52458,
        21066: 53239,
        21068: 55517,
        21069: 51120,
        21072: 47568,
        21073: 48547,
        21076: 52446,
        21078: 50890,
        21084: 55520,
        21086: 55518,
        21089: 55519,
        21093: 45310,
        21095: 48871,
        21097: 51875,
        21098: 48372,
        21103: 47281,
        21106: 47342,
        21117: 55522,
        21119: 48587,
        21121: 55524,
        21122: 55523,
        21128: 50684,
        21136: 55525,
        21139: 55526,
        21147: 49574,
        21149: 51376,
        21150: 45292,
        21151: 47526,
        21152: 48339,
        21153: 52977,
        21154: 56253,
        21155: 49619,
        21160: 46767,
        21161: 55034,
        21162: 50604,
        21163: 48601,
        21164: 56254,
        21165: 56255,
        21169: 49400,
        21170: 48802,
        21171: 49357,
        21182: 56256,
        21183: 51910,
        21187: 45738,
        21191: 54210,
        21193: 50147,
        21195: 53675,
        21200: 56258,
        21202: 49365,
        21206: 56259,
        21208: 49073,
        21215: 50364,
        21220: 51162,
        21232: 56260,
        21241: 55784,
        21242: 51671,
        21246: 47540,
        21247: 52976,
        21248: 54472,
        21253: 45308,
        21254: 46290,
        21256: 53465,
        21261: 55785,
        21263: 57035,
        21264: 55787,
        21269: 55472,
        21270: 48047,
        21271: 45489,
        21273: 46039,
        21274: 55502,
        21277: 54481,
        21280: 48563,
        21281: 49135,
        21283: 53179,
        21286: 55504,
        21290: 47051,
        21294: 55505,
        21305: 50853,
        21306: 51192,
        21307: 53949,
        21310: 55506,
        21311: 50404,
        21313: 51886,
        21315: 51111,
        21317: 55462,
        21319: 51709,
        21320: 52967,
        21321: 48092,
        21322: 45291,
        21326: 48042,
        21327: 53421,
        21329: 45488,
        21330: 55268,
        21331: 55231,
        21333: 46501,
        21334: 49908,
        21335: 50383,
        21338: 45737,
        21340: 45751,
        21342: 45541,
        21343: 57266,
        21344: 54716,
        21345: 49064,
        21346: 49836,
        21347: 55509,
        21348: 49841,
        21350: 55508,
        21351: 52948,
        21353: 56032,
        21355: 52928,
        21358: 55476,
        21359: 50094,
        21360: 54177,
        21361: 52899,
        21363: 48308,
        21364: 51380,
        21365: 49873,
        21367: 48877,
        21368: 53430,
        21370: 56033,
        21375: 51172,
        21378: 45991,
        21380: 46834,
        21381: 52476,
        21382: 49402,
        21385: 49399,
        21387: 53689,
        21388: 53729,
        21389: 55495,
        21397: 45790,
        21400: 49381,
        21402: 47857,
        21405: 55496,
        21407: 54445,
        21410: 53217,
        21411: 55497,
        21413: 55498,
        21414: 53187,
        21416: 46072,
        21417: 48839,
        21422: 55499,
        21430: 56268,
        21435: 51365,
        21439: 53208,
        21441: 51454,
        21442: 45774,
        21448: 54230,
        21449: 45798,
        21450: 48304,
        21451: 54225,
        21452: 52139,
        21453: 47028,
        21457: 47010,
        21460: 51941,
        21462: 51361,
        21463: 51932,
        21464: 45540,
        21465: 53488,
        21467: 50641,
        21471: 56261,
        21472: 46590,
        21475: 49114,
        21476: 47557,
        21477: 48868,
        21478: 49645,
        21480: 57270,
        21481: 57269,
        21482: 54971,
        21483: 48592,
        21484: 54745,
        21485: 45256,
        21486: 46755,
        21487: 49097,
        21488: 52392,
        21489: 57267,
        21490: 51895,
        21491: 54226,
        21493: 55503,
        21494: 53942,
        21495: 47813,
        21496: 52158,
        21497: 52414,
        21499: 57271,
        21500: 46576,
        21501: 57268,
        21505: 54261,
        21507: 46036,
        21508: 47351,
        21510: 57274,
        21512: 47823,
        21513: 48298,
        21514: 46581,
        21516: 52652,
        21517: 50171,
        21518: 47859,
        21519: 49396,
        21520: 52674,
        21521: 53234,
        21522: 57272,
        21523: 53189,
        21525: 49856,
        21526: 57273,
        21527: 49904,
        21531: 48893,
        21533: 49631,
        21534: 52684,
        21535: 54007,
        21536: 47053,
        21537: 57281,
        21539: 57284,
        21542: 47089,
        21543: 45257,
        21544: 46806,
        21545: 47060,
        21547: 47788,
        21548: 52477,
        21549: 49108,
        21550: 52145,
        21551: 50932,
        21553: 54952,
        21554: 57285,
        21556: 52962,
        21557: 46003,
        21560: 52988,
        21561: 46261,
        21563: 52935,
        21564: 47856,
        21566: 52961,
        21568: 53693,
        21571: 57280,
        21574: 46324,
        21576: 46026,
        21578: 47334,
        21579: 57275,
        21584: 50373,
        21586: 57276,
        21587: 57277,
        21588: 57278,
        21589: 50619,
        21590: 57279,
        21591: 57282,
        21592: 54449,
        21593: 57283,
        21595: 51130,
        21596: 52952,
        21602: 50392,
        21604: 57290,
        21606: 57295,
        21608: 55004,
        21617: 57289,
        21618: 57306,
        21619: 52918,
        21621: 47815,
        21622: 57294,
        21623: 57288,
        21624: 50654,
        21627: 51691,
        21628: 47860,
        21629: 50172,
        21632: 48855,
        21634: 57286,
        21636: 57293,
        21638: 50648,
        21643: 54694,
        21644: 47821,
        21646: 48844,
        21647: 54205,
        21648: 47296,
        21650: 55012,
        21652: 57287,
        21653: 47550,
        21654: 49063,
        21657: 49660,
        21658: 57291,
        21659: 57292,
        21661: 57296,
        21667: 57307,
        21668: 57317,
        21670: 57303,
        21671: 57302,
        21672: 55241,
        21673: 57315,
        21674: 57316,
        21675: 58859,
        21676: 53927,
        21677: 57298,
        21679: 49065,
        21681: 54491,
        21683: 49096,
        21684: 57300,
        21688: 53196,
        21691: 57309,
        21693: 53706,
        21695: 57310,
        21696: 45223,
        21697: 50871,
        21698: 57299,
        21700: 47845,
        21702: 46815,
        21703: 52699,
        21704: 47614,
        21705: 54485,
        21708: 57311,
        21709: 53228,
        21710: 45221,
        21711: 57319,
        21712: 57297,
        21713: 53702,
        21714: 57301,
        21715: 57304,
        21716: 57305,
        21717: 57308,
        21719: 48041,
        21721: 57312,
        21722: 57313,
        21724: 57314,
        21725: 57318,
        21726: 57320,
        21727: 54196,
        21733: 47335,
        21734: 50614,
        21735: 57322,
        21736: 51674,
        21737: 49576,
        21738: 50372,
        21741: 49118,
        21742: 53240,
        21746: 54748,
        21747: 57326,
        21754: 45752,
        21756: 47839,
        21757: 57324,
        21759: 56257,
        21761: 53732,
        21766: 52212,
        21767: 46269,
        21769: 45222,
        21775: 57329,
        21776: 52422,
        21777: 57330,
        21780: 57325,
        21787: 57321,
        21792: 57323,
        21794: 57327,
        21795: 57328,
        21796: 48061,
        21799: 57331,
        21802: 57332,
        21804: 48035,
        21806: 51931,
        21807: 52904,
        21808: 57511,
        21809: 45994,
        21811: 57510,
        21815: 57505,
        21820: 57342,
        21822: 52697,
        21823: 57340,
        21825: 57338,
        21827: 49104,
        21828: 55236,
        21830: 51660,
        21833: 57336,
        21834: 45217,
        21840: 57341,
        21845: 57339,
        21846: 57506,
        21852: 57512,
        21857: 47048,
        21860: 50849,
        21861: 51638,
        21862: 49330,
        21863: 57333,
        21866: 50622,
        21868: 55492,
        21869: 57337,
        21870: 50422,
        21877: 57507,
        21878: 57508,
        21879: 57509,
        21880: 53413,
        21883: 57524,
        21884: 52452,
        21886: 57521,
        21888: 49062,
        21889: 57519,
        21890: 52921,
        21891: 57515,
        21892: 51654,
        21895: 49326,
        21896: 57518,
        21897: 47853,
        21898: 47792,
        21899: 57513,
        21903: 57334,
        21905: 57523,
        21908: 57528,
        21912: 46253,
        21913: 57529,
        21916: 53170,
        21917: 47816,
        21919: 57520,
        21927: 53498,
        21937: 57516,
        21939: 54523,
        21941: 57335,
        21943: 50663,
        21945: 57517,
        21947: 54263,
        21949: 57526,
        21950: 57527,
        21956: 57540,
        21957: 53473,
        21961: 57532,
        21964: 57545,
        21965: 57546,
        21969: 57534,
        21970: 57514,
        21971: 51620,
        21972: 57537,
        21974: 57522,
        21980: 51912,
        21981: 57539,
        21983: 57525,
        21985: 52939,
        21987: 52163,
        21988: 57549,
        21989: 57542,
        21990: 57538,
        21992: 57547,
        21994: 57530,
        21995: 57535,
        21996: 57536,
        21999: 57541,
        22002: 57543,
        22003: 57544,
        22005: 57548,
        22007: 57531,
        22013: 52180,
        22014: 57557,
        22016: 57558,
        22017: 57554,
        22024: 57552,
        22025: 48334,
        22028: 57553,
        22030: 47298,
        22031: 55493,
        22040: 53482,
        22043: 49903,
        22046: 57551,
        22047: 57533,
        22051: 57556,
        22052: 57555,
        22055: 57559,
        22060: 57564,
        22061: 57560,
        22065: 55030,
        22066: 46e3,
        22068: 55276,
        22070: 52155,
        22073: 57562,
        22075: 52987,
        22079: 47833,
        22092: 57569,
        22093: 57565,
        22094: 53933,
        22100: 57570,
        22103: 57563,
        22104: 57561,
        22105: 57567,
        22108: 57568,
        22114: 57566,
        22116: 57572,
        22120: 50935,
        22121: 55468,
        22122: 54507,
        22123: 57574,
        22124: 51913,
        22129: 57573,
        22134: 47297,
        22139: 57575,
        22140: 57576,
        22149: 57577,
        22150: 57571,
        22158: 47807,
        22159: 52455,
        22163: 57578,
        22179: 53241,
        22191: 57579,
        22199: 51394,
        22204: 48576,
        22218: 50386,
        22228: 57580,
        22231: 57581,
        22234: 51188,
        22235: 52164,
        22237: 57582,
        22238: 48088,
        22239: 55478,
        22240: 54002,
        22241: 57583,
        22242: 52677,
        22244: 46810,
        22251: 57585,
        22253: 54448,
        22256: 49319,
        22257: 46289,
        22260: 52903,
        22261: 57584,
        22265: 57586,
        22266: 47564,
        22269: 47610,
        22270: 52668,
        22271: 57587,
        22275: 50900,
        22276: 57588,
        22278: 54450,
        22280: 51366,
        22281: 57590,
        22282: 57589,
        22300: 57591,
        22303: 52673,
        22307: 51877,
        22312: 54490,
        22313: 56279,
        22314: 56281,
        22316: 56280,
        22317: 47591,
        22318: 56284,
        22319: 56285,
        22320: 46552,
        22323: 56282,
        22329: 56283,
        22330: 45985,
        22331: 56287,
        22334: 48120,
        22336: 54967,
        22338: 56288,
        22343: 48889,
        22346: 47035,
        22348: 56272,
        22349: 52398,
        22350: 49074,
        22351: 48053,
        22352: 55288,
        22353: 49107,
        22359: 49129,
        22362: 48353,
        22363: 52403,
        22364: 56286,
        22365: 45267,
        22366: 52971,
        22367: 47064,
        22368: 55225,
        22369: 50882,
        22372: 49316,
        22374: 52409,
        22376: 56295,
        22377: 56289,
        22378: 50874,
        22379: 56291,
        22381: 56296,
        22383: 50679,
        22387: 56298,
        22390: 56297,
        22391: 49088,
        22395: 56294,
        22396: 56293,
        22402: 46265,
        22403: 49324,
        22404: 49826,
        22405: 56290,
        22406: 56292,
        22411: 53453,
        22412: 56301,
        22418: 49373,
        22419: 56306,
        22427: 46818,
        22432: 56307,
        22433: 56274,
        22434: 47544,
        22435: 54443,
        22436: 56300,
        22438: 49105,
        22439: 56304,
        22441: 56273,
        22443: 46566,
        22445: 56299,
        22446: 49125,
        22450: 56302,
        22452: 56305,
        22456: 56313,
        22466: 47521,
        22467: 45219,
        22475: 49905,
        22478: 46023,
        22479: 56303,
        22482: 56312,
        22484: 50898,
        22485: 56308,
        22488: 56309,
        22489: 56311,
        22490: 56310,
        22493: 56318,
        22495: 54258,
        22496: 45754,
        22500: 56317,
        22509: 56484,
        22511: 56315,
        22516: 56314,
        22520: 56316,
        22521: 50656,
        22522: 48121,
        22525: 56483,
        22528: 56485,
        22530: 52419,
        22534: 46801,
        22535: 56768,
        22539: 56481,
        22541: 56482,
        22545: 51125,
        22549: 46825,
        22553: 56487,
        22558: 56486,
        22560: 56489,
        22561: 45476,
        22564: 46540,
        22570: 49072,
        22576: 53727,
        22581: 46786,
        22596: 56488,
        22604: 52218,
        22605: 60403,
        22609: 52188,
        22612: 52222,
        22616: 52417,
        22622: 51451,
        22629: 56490,
        22635: 52462,
        22636: 56491,
        22654: 56275,
        22656: 56495,
        22657: 56492,
        22659: 48819,
        22661: 51963,
        22665: 56493,
        22674: 51658,
        22675: 50361,
        22681: 51133,
        22682: 56494,
        22686: 54518,
        22687: 53478,
        22696: 50347,
        22697: 46805,
        22716: 56276,
        22721: 45530,
        22725: 56277,
        22737: 56278,
        22741: 47806,
        22756: 51392,
        22763: 51903,
        22764: 51401,
        22766: 55219,
        22768: 51705,
        22771: 49095,
        22774: 47864,
        22777: 53948,
        22786: 58042,
        22788: 46246,
        22791: 45496,
        22797: 47284,
        22799: 53188,
        22804: 55783,
        22805: 53158,
        22806: 52706,
        22809: 55789,
        22810: 46816,
        22812: 53945,
        22815: 47547,
        22820: 58041,
        22821: 58039,
        22823: 46323,
        22825: 52460,
        22826: 52395,
        22827: 47090,
        22829: 55474,
        22830: 53739,
        22831: 47803,
        22833: 51879,
        22836: 52663,
        22839: 53956,
        22840: 49124,
        22841: 48336,
        22842: 46817,
        22844: 57029,
        22849: 57030,
        22850: 56252,
        22852: 53721,
        22855: 50918,
        22856: 50382,
        22857: 47086,
        22859: 47068,
        22862: 49148,
        22863: 55264,
        22865: 50933,
        22868: 45500,
        22869: 57032,
        22870: 48561,
        22871: 52439,
        22872: 57034,
        22874: 57033,
        22880: 46572,
        22882: 51677,
        22885: 45250,
        22899: 50606,
        22900: 50603,
        22902: 50380,
        22904: 48361,
        22905: 52221,
        22909: 47811,
        22913: 58873,
        22914: 51431,
        22915: 58874,
        22916: 52733,
        22918: 55217,
        22919: 47294,
        22920: 49896,
        22922: 51409,
        22925: 58875,
        22930: 46794,
        22931: 48331,
        22934: 53757,
        22935: 59041,
        22937: 50158,
        22942: 59044,
        22947: 58878,
        22948: 59045,
        22949: 52695,
        22952: 47041,
        22953: 58876,
        22954: 58877,
        22955: 59043,
        22958: 50397,
        22959: 59048,
        22962: 59047,
        22969: 50115,
        22971: 50910,
        22974: 59050,
        22982: 50359,
        22986: 59042,
        22987: 51900,
        22992: 48611,
        22993: 47555,
        22994: 59046,
        22995: 53461,
        22996: 52911,
        22999: 59049,
        23e3: 59056,
        23002: 53926,
        23004: 48554,
        23005: 59053,
        23011: 59055,
        23013: 49361,
        23016: 53964,
        23020: 48295,
        23033: 59057,
        23035: 54006,
        23039: 55243,
        23041: 52734,
        23043: 52702,
        23044: 49830,
        23045: 59051,
        23046: 59052,
        23047: 48575,
        23048: 59054,
        23049: 59059,
        23052: 59058,
        23057: 59062,
        23059: 59064,
        23064: 50415,
        23068: 50376,
        23071: 48874,
        23072: 51695,
        23075: 59063,
        23077: 46832,
        23081: 50148,
        23089: 54249,
        23090: 59060,
        23092: 59061,
        23094: 51362,
        23100: 59069,
        23104: 59065,
        23110: 50885,
        23113: 52721,
        23114: 59067,
        23125: 59068,
        23130: 48105,
        23138: 59070,
        23143: 59066,
        23146: 49335,
        23156: 54180,
        23157: 59071,
        23158: 51700,
        23159: 59075,
        23162: 59076,
        23167: 53494,
        23186: 50109,
        23194: 50116,
        23195: 59074,
        23210: 59073,
        23218: 59079,
        23219: 53169,
        23221: 60404,
        23224: 59082,
        23230: 59077,
        23233: 48350,
        23234: 51625,
        23241: 48309,
        23244: 53203,
        23250: 59080,
        23252: 59081,
        23254: 59086,
        23256: 59088,
        23260: 59089,
        23264: 59083,
        23265: 46549,
        23267: 59084,
        23270: 59087,
        23273: 50395,
        23275: 59078,
        23281: 59085,
        23305: 59090,
        23318: 59092,
        23319: 59091,
        23346: 59093,
        23348: 55800,
        23351: 59094,
        23360: 59095,
        23376: 55251,
        23377: 59101,
        23379: 59102,
        23380: 49111,
        23381: 54480,
        23383: 55254,
        23384: 46310,
        23385: 52207,
        23386: 59098,
        23387: 55491,
        23388: 55246,
        23389: 53410,
        23391: 50127,
        23394: 59103,
        23395: 48318,
        23396: 47554,
        23397: 59099,
        23398: 53671,
        23401: 47778,
        23402: 49871,
        23404: 55467,
        23408: 51947,
        23409: 58862,
        23411: 59100,
        23413: 47093,
        23418: 51430,
        23421: 50421,
        23424: 58802,
        23425: 50430,
        23427: 52220,
        23428: 58803,
        23429: 54700,
        23431: 54254,
        23432: 51928,
        23433: 45234,
        23435: 52174,
        23436: 52714,
        23439: 47850,
        23443: 58805,
        23445: 58804,
        23447: 55258,
        23448: 47577,
        23449: 55014,
        23450: 46760,
        23451: 52720,
        23452: 53963,
        23453: 45478,
        23454: 51893,
        23456: 46056,
        23457: 51699,
        23458: 49101,
        23459: 53499,
        23460: 51922,
        23461: 58806,
        23462: 48066,
        23466: 53212,
        23467: 47532,
        23472: 54487,
        23475: 47782,
        23476: 53735,
        23477: 53244,
        23478: 48338,
        23480: 58807,
        23481: 51421,
        23485: 49133,
        23486: 45558,
        23487: 52190,
        23490: 48325,
        23492: 48324,
        23493: 54010,
        23494: 50140,
        23495: 49116,
        23500: 47291,
        23504: 50114,
        23506: 47790,
        23507: 54434,
        23517: 51166,
        23518: 50351,
        23519: 45804,
        23521: 47569,
        23524: 58811,
        23525: 49608,
        23528: 54703,
        23534: 58812,
        23536: 58814,
        23544: 46311,
        23545: 46804,
        23546: 52162,
        23547: 53680,
        23548: 46524,
        23551: 51929,
        23553: 47074,
        23556: 51684,
        23558: 48555,
        23561: 52926,
        23562: 55280,
        23567: 53409,
        23569: 51673,
        23572: 46843,
        23573: 59096,
        23574: 48354,
        23576: 46014,
        23578: 51664,
        23580: 59097,
        23581: 45986,
        23586: 57036,
        23588: 54216,
        23589: 57037,
        23591: 53922,
        23596: 57038,
        23601: 48845,
        23604: 57039,
        23608: 51884,
        23609: 54012,
        23610: 46047,
        23611: 58858,
        23612: 50401,
        23613: 48801,
        23614: 52914,
        23615: 50418,
        23616: 48854,
        23617: 50856,
        23618: 45795,
        23621: 48851,
        23624: 51196,
        23625: 52459,
        23626: 48620,
        23627: 52957,
        23630: 51898,
        23631: 50881,
        23632: 58860,
        23633: 53436,
        23637: 54713,
        23641: 58861,
        23646: 51956,
        23648: 52672,
        23649: 49861,
        23651: 58863,
        23653: 49860,
        23654: 58864,
        23662: 58872,
        23663: 52685,
        23665: 51645,
        23673: 53977,
        23674: 57768,
        23679: 54252,
        23681: 52202,
        23682: 50929,
        23688: 57772,
        23692: 57767,
        23693: 57769,
        23696: 57770,
        23697: 57775,
        23700: 45805,
        23702: 57771,
        23703: 47322,
        23704: 57773,
        23705: 57774,
        23706: 57776,
        23707: 46522,
        23708: 57777,
        23714: 57779,
        23715: 57784,
        23721: 53714,
        23723: 57782,
        23724: 57781,
        23725: 49643,
        23729: 57783,
        23731: 54464,
        23733: 57778,
        23735: 57786,
        23736: 45238,
        23741: 57780,
        23743: 49145,
        23745: 57785,
        23748: 57787,
        23755: 57790,
        23762: 57788,
        23769: 54981,
        23777: 53183,
        23780: 57789,
        23781: 57791,
        23782: 49869,
        23784: 46827,
        23786: 54264,
        23789: 51149,
        23792: 47077,
        23803: 48894,
        23810: 57792,
        23811: 57793,
        23814: 57799,
        23815: 46055,
        23822: 50921,
        23828: 46302,
        23830: 53698,
        23835: 57800,
        23838: 57798,
        23844: 57797,
        23846: 57795,
        23847: 57794,
        23849: 45504,
        23853: 54712,
        23854: 57796,
        23860: 57803,
        23869: 57804,
        23870: 57802,
        23879: 61434,
        23882: 57811,
        23883: 57810,
        23884: 51126,
        23896: 57801,
        23899: 57806,
        23901: 57808,
        23913: 57812,
        23915: 57809,
        23916: 57805,
        23919: 57807,
        23924: 57813,
        23938: 57814,
        23961: 57815,
        23965: 57816,
        23991: 57818,
        24005: 57819,
        24013: 52897,
        24027: 59357,
        24029: 46248,
        24030: 55005,
        24033: 53682,
        24034: 46002,
        24037: 47524,
        24038: 55283,
        24039: 51145,
        24040: 48862,
        24041: 47534,
        24043: 52951,
        24046: 45806,
        24047: 56271,
        24049: 48314,
        24050: 53969,
        24051: 52168,
        24052: 45261,
        24055: 53231,
        24061: 55779,
        24062: 48621,
        24065: 45522,
        24066: 51920,
        24067: 45756,
        24069: 52135,
        24070: 47019,
        24072: 51878,
        24076: 53155,
        24079: 57592,
        24080: 54730,
        24081: 57595,
        24084: 57594,
        24085: 50625,
        24086: 52475,
        24088: 49585,
        24089: 57593,
        24090: 55011,
        24091: 45743,
        24092: 54980,
        24093: 46555,
        24102: 46328,
        24103: 54945,
        24109: 53167,
        24110: 45295,
        24113: 57596,
        24119: 57761,
        24120: 45987,
        24123: 57597,
        24124: 57598,
        24125: 50097,
        24130: 50141,
        24132: 57762,
        24133: 47097,
        24140: 48079,
        24148: 57763,
        24149: 50363,
        24155: 57764,
        24158: 57765,
        24161: 57766,
        24162: 46257,
        24178: 47305,
        24179: 50877,
        24180: 50410,
        24182: 45730,
        24184: 53458,
        24186: 59355,
        24187: 48067,
        24188: 54231,
        24189: 54212,
        24191: 47587,
        24192: 58063,
        24196: 55215,
        24198: 51180,
        24199: 45523,
        24202: 46258,
        24203: 58065,
        24207: 53490,
        24208: 49838,
        24209: 58064,
        24211: 49122,
        24212: 54182,
        24213: 46551,
        24214: 58066,
        24215: 46570,
        24217: 50157,
        24218: 47357,
        24220: 47278,
        24222: 50643,
        24223: 47055,
        24224: 58068,
        24229: 58067,
        24230: 46792,
        24231: 55289,
        24237: 52645,
        24243: 58072,
        24245: 58070,
        24246: 51964,
        24247: 49077,
        24248: 54201,
        24249: 58069,
        24254: 58071,
        24265: 49582,
        24266: 49352,
        24273: 58075,
        24274: 58074,
        24275: 49322,
        24278: 49614,
        24283: 58076,
        24296: 58077,
        24298: 58078,
        24308: 56264,
        24310: 53715,
        24311: 52642,
        24314: 48552,
        24318: 57027,
        24319: 55461,
        24320: 49066,
        24321: 56269,
        24322: 53996,
        24323: 50938,
        24324: 50602,
        24328: 57028,
        24330: 45527,
        24331: 57262,
        24335: 51901,
        24337: 57265,
        24339: 47533,
        24341: 54013,
        24343: 47269,
        24344: 47851,
        24347: 46042,
        24351: 46556,
        24352: 54725,
        24357: 50134,
        24358: 53202,
        24359: 48033,
        24361: 58867,
        24362: 58866,
        24365: 58868,
        24367: 52708,
        24369: 51445,
        24377: 46511,
        24378: 51135,
        24380: 58870,
        24384: 60592,
        24400: 58854,
        24402: 47593,
        24403: 46513,
        24405: 49852,
        24406: 58856,
        24407: 58855,
        24408: 58857,
        24413: 53965,
        24417: 57834,
        24418: 53454,
        24420: 52654,
        24422: 53733,
        24425: 45770,
        24426: 45547,
        24428: 45554,
        24429: 50669,
        24432: 54723,
        24433: 54192,
        24435: 57820,
        24439: 57821,
        24441: 53979,
        24443: 46009,
        24444: 45515,
        24448: 52729,
        24449: 54775,
        24450: 57822,
        24452: 48822,
        24453: 46333,
        24455: 57823,
        24456: 47836,
        24457: 57824,
        24458: 48050,
        24459: 49865,
        24460: 57825,
        24464: 53484,
        24466: 52669,
        24469: 57826,
        24471: 46531,
        24472: 50631,
        24473: 57827,
        24476: 57828,
        24481: 54265,
        24488: 57829,
        24490: 53677,
        24493: 57830,
        24494: 52898,
        24501: 57831,
        24503: 46530,
        24508: 57832,
        24509: 48085,
        24515: 53444,
        24516: 58080,
        24517: 45528,
        24518: 53988,
        24521: 58081,
        24524: 48329,
        24525: 51404,
        24527: 58083,
        24528: 60670,
        24529: 60669,
        24530: 57263,
        24534: 58082,
        24535: 54974,
        24536: 52732,
        24537: 50086,
        24541: 58307,
        24544: 54994,
        24545: 58087,
        24548: 58088,
        24551: 54215,
        24554: 58092,
        24555: 49132,
        24557: 58093,
        24558: 58085,
        24561: 46016,
        24565: 50414,
        24568: 58094,
        24571: 53443,
        24573: 47862,
        24574: 58089,
        24575: 47070,
        24576: 48051,
        24577: 52396,
        24578: 52171,
        24579: 58084,
        24580: 58086,
        24581: 58090,
        24582: 58091,
        24586: 58103,
        24589: 58100,
        24590: 54517,
        24591: 58099,
        24594: 50605,
        24596: 54778,
        24597: 50626,
        24598: 45760,
        24601: 58095,
        24603: 58098,
        24604: 49583,
        24605: 52156,
        24608: 46497,
        24609: 58105,
        24613: 48305,
        24614: 58097,
        24615: 53460,
        24616: 54457,
        24617: 58101,
        24618: 47574,
        24619: 58102,
        24623: 51155,
        24629: 58096,
        24635: 55260,
        24636: 60833,
        24639: 58104,
        24641: 60837,
        24642: 58110,
        24643: 51921,
        24651: 49589,
        24653: 48080,
        24656: 49110,
        24658: 47843,
        24661: 52129,
        24665: 60838,
        24666: 60835,
        24669: 60834,
        24674: 48086,
        24675: 60839,
        24676: 53492,
        24679: 60836,
        24680: 47838,
        24681: 46839,
        24682: 58273,
        24683: 46770,
        24684: 52465,
        24685: 47527,
        24687: 53154,
        24688: 51105,
        24691: 49106,
        24694: 46833,
        24696: 58106,
        24697: 58107,
        24698: 58109,
        24699: 58108,
        24700: 50389,
        24701: 58274,
        24703: 54209,
        24707: 58279,
        24708: 51140,
        24713: 53156,
        24716: 58281,
        24717: 47799,
        24722: 58280,
        24724: 48090,
        24726: 58275,
        24730: 58276,
        24731: 58282,
        24733: 58278,
        24735: 52978,
        24736: 54214,
        24739: 48060,
        24742: 54467,
        24744: 50426,
        24747: 60840,
        24748: 53500,
        24749: 58277,
        24751: 50165,
        24753: 58285,
        24754: 45487,
        24756: 58290,
        24760: 48322,
        24763: 58284,
        24764: 46527,
        24773: 51177,
        24774: 58288,
        24778: 48810,
        24779: 52719,
        24785: 48115,
        24789: 52456,
        24792: 58287,
        24794: 58289,
        24796: 53159,
        24797: 58286,
        24799: 52905,
        24800: 48093,
        24806: 46571,
        24807: 48869,
        24808: 45778,
        24809: 46029,
        24811: 45497,
        24812: 58283,
        24813: 45777,
        24814: 46508,
        24815: 47583,
        24816: 46824,
        24819: 53227,
        24820: 58295,
        24822: 48076,
        24825: 51399,
        24826: 53450,
        24832: 58296,
        24833: 46062,
        24838: 60841,
        24840: 54266,
        24841: 54244,
        24845: 60842,
        24846: 58297,
        24847: 53986,
        24853: 58293,
        24858: 54238,
        24863: 47312,
        24864: 58291,
        24867: 58294,
        24868: 47071,
        24870: 58292,
        24871: 49314,
        24875: 58298,
        24895: 54456,
        24904: 46280,
        24906: 58299,
        24908: 48069,
        24910: 51703,
        24913: 51685,
        24917: 50365,
        24925: 60843,
        24930: 49917,
        24935: 48091,
        24936: 49070,
        24944: 52927,
        24949: 58300,
        24951: 49078,
        24971: 45551,
        24974: 54519,
        24980: 58302,
        24989: 60845,
        24999: 58303,
        25e3: 47785,
        25001: 60844,
        25004: 58301,
        25015: 58304,
        25022: 47798,
        25026: 46766,
        25032: 53432,
        25034: 45251,
        25035: 60846,
        25041: 60847,
        25042: 49345,
        25044: 58305,
        25062: 50611,
        25077: 58306,
        25087: 56498,
        25094: 60848,
        25096: 47338,
        25098: 52972,
        25099: 60071,
        25100: 53479,
        25101: 51961,
        25102: 51414,
        25103: 53175,
        25104: 46025,
        25105: 52946,
        25106: 48612,
        25109: 58334,
        25110: 48114,
        25111: 60072,
        25112: 54717,
        25114: 50909,
        25115: 60073,
        25119: 60074,
        25121: 60076,
        25122: 60075,
        25124: 60078,
        25125: 60077,
        25130: 48600,
        25132: 60079,
        25134: 49854,
        25139: 46273,
        25140: 46327,
        25143: 48039,
        25149: 60646,
        25150: 60645,
        25151: 47039,
        25152: 52217,
        25153: 45538,
        25155: 60647,
        25159: 51656,
        25160: 60648,
        25161: 60649,
        25163: 51926,
        25164: 57040,
        25165: 45765,
        25166: 54522,
        25169: 50891,
        25170: 45255,
        25171: 46322,
        25172: 51411,
        25176: 52688,
        25179: 49080,
        25187: 49115,
        25190: 51108,
        25191: 54964,
        25193: 49321,
        25194: 57041,
        25195: 51624,
        25196: 53743,
        25197: 50596,
        25198: 45287,
        25199: 46006,
        25200: 51397,
        25203: 45282,
        25206: 47094,
        25209: 50682,
        25212: 46835,
        25214: 54738,
        25215: 46032,
        25216: 48316,
        25220: 45997,
        25225: 48881,
        25226: 45265,
        25233: 53974,
        25234: 51939,
        25235: 55205,
        25237: 52662,
        25238: 46774,
        25239: 49081,
        25240: 54747,
        25242: 47271,
        25243: 50647,
        25247: 57042,
        25248: 49113,
        25249: 49877,
        25250: 51136,
        25252: 48036,
        25253: 45480,
        25256: 50666,
        25259: 50683,
        25260: 52391,
        25265: 45479,
        25269: 46550,
        25273: 50344,
        25275: 57043,
        25276: 53690,
        25277: 46057,
        25279: 50162,
        25282: 47095,
        25284: 55028,
        25285: 46499,
        25286: 45808,
        25287: 50356,
        25288: 50409,
        25289: 49325,
        25290: 57044,
        25292: 45288,
        25293: 50628,
        25294: 49632,
        25296: 47573,
        25298: 48860,
        25299: 52696,
        25300: 45262,
        25302: 52687,
        25303: 57046,
        25304: 48848,
        25305: 55230,
        25306: 57045,
        25307: 54736,
        25308: 45277,
        25311: 50402,
        25314: 49827,
        25315: 48368,
        25317: 54197,
        25318: 49337,
        25319: 50593,
        25320: 45734,
        25321: 54513,
        25324: 49320,
        25325: 51907,
        25326: 57047,
        25327: 54780,
        25329: 47536,
        25331: 51373,
        25332: 52137,
        25334: 57049,
        25335: 49085,
        25340: 50868,
        25341: 55207,
        25342: 51888,
        25343: 50371,
        25345: 46038,
        25346: 47570,
        25351: 54968,
        25352: 60156,
        25353: 45236,
        25358: 49126,
        25361: 52468,
        25366: 52698,
        25370: 54975,
        25371: 49870,
        25373: 52942,
        25374: 52386,
        25375: 53422,
        25376: 50387,
        25377: 46514,
        25378: 57048,
        25379: 54773,
        25380: 48311,
        25381: 48083,
        25384: 45220,
        25386: 50610,
        25387: 46316,
        25391: 54769,
        25394: 60157,
        25401: 57050,
        25402: 52646,
        25405: 52716,
        25410: 52966,
        25411: 57052,
        25413: 52657,
        25414: 49318,
        25417: 55229,
        25419: 57051,
        25420: 45254,
        25421: 47796,
        25422: 51667,
        25423: 50419,
        25424: 48872,
        25429: 45750,
        25438: 49356,
        25439: 52208,
        25441: 48369,
        25442: 48059,
        25443: 46519,
        25447: 50677,
        25449: 57062,
        25453: 57059,
        25454: 48861,
        25457: 57055,
        25462: 46263,
        25463: 48605,
        25466: 57056,
        25467: 50413,
        25472: 53190,
        25474: 46560,
        25479: 46814,
        25480: 51930,
        25481: 46580,
        25482: 57061,
        25484: 54726,
        25486: 57057,
        25487: 52429,
        25488: 50942,
        25490: 50629,
        25494: 53940,
        25496: 48882,
        25504: 49875,
        25506: 52413,
        25507: 46008,
        25509: 48595,
        25511: 49112,
        25512: 52678,
        25513: 53722,
        25514: 46315,
        25516: 57060,
        25517: 57053,
        25518: 57063,
        25520: 60158,
        25523: 49840,
        25524: 57058,
        25527: 54976,
        25528: 46503,
        25530: 45812,
        25532: 57064,
        25534: 57074,
        25540: 57069,
        25542: 57073,
        25545: 51424,
        25549: 55265,
        25550: 57071,
        25551: 50152,
        25552: 52449,
        25554: 45797,
        25558: 53950,
        25566: 57070,
        25568: 57067,
        25569: 52949,
        25571: 46247,
        25577: 49067,
        25578: 48830,
        25581: 48594,
        25586: 57065,
        25588: 54446,
        25590: 57054,
        25592: 57066,
        25597: 49343,
        25599: 57068,
        25600: 45811,
        25601: 47337,
        25602: 49831,
        25605: 48577,
        25611: 57077,
        25612: 57080,
        25615: 45739,
        25616: 46244,
        25619: 46314,
        25620: 51622,
        25627: 57078,
        25628: 52177,
        25630: 47331,
        25632: 57079,
        25633: 57082,
        25638: 57081,
        25642: 52418,
        25644: 45281,
        25645: 46318,
        25652: 58810,
        25658: 53423,
        25661: 45803,
        25663: 60321,
        25665: 57076,
        25668: 51683,
        25669: 57075,
        25670: 45274,
        25671: 53921,
        25672: 45559,
        25674: 52399,
        25682: 57072,
        25684: 52132,
        25688: 54698,
        25694: 57083,
        25703: 46301,
        25705: 50342,
        25709: 57085,
        25720: 50174,
        25721: 50337,
        25722: 57249,
        25730: 49612,
        25732: 57084,
        25733: 48879,
        25735: 50866,
        25745: 46021,
        25746: 51446,
        25749: 52154,
        25750: 57086,
        25753: 57252,
        25758: 55218,
        25764: 46007,
        25769: 49603,
        25772: 51147,
        25773: 45733,
        25774: 46313,
        25776: 55211,
        25781: 50412,
        25783: 57250,
        25784: 57251,
        25786: 57253,
        25788: 47795,
        25792: 57254,
        25794: 49374,
        25797: 51651,
        25805: 45785,
        25806: 51174,
        25808: 57255,
        25810: 51164,
        25815: 57256,
        25816: 60322,
        25822: 52179,
        25826: 57258,
        25828: 57257,
        25830: 45761,
        25856: 50634,
        25865: 57259,
        25874: 54492,
        25880: 51393,
        25893: 57260,
        25899: 48880,
        25902: 57261,
        25903: 54951,
        25908: 60087,
        25909: 60342,
        25910: 51925,
        25912: 55548,
        25913: 47300,
        25915: 47525,
        25918: 47045,
        25919: 54782,
        25925: 47562,
        25928: 53415,
        25929: 62669,
        25932: 46544,
        25935: 50164,
        25937: 48840,
        25941: 60343,
        25942: 45245,
        25945: 48588,
        25947: 49586,
        25949: 45526,
        25950: 45992,
        25954: 47314,
        25955: 51618,
        25958: 46808,
        25963: 60344,
        25964: 48820,
        25968: 51965,
        25970: 51139,
        25972: 54779,
        25975: 47091,
        25991: 52932,
        25995: 54699,
        25996: 45555,
        26e3: 60595,
        26001: 45279,
        26003: 60597,
        26007: 46775,
        26009: 49615,
        26011: 62970,
        26012: 53425,
        26015: 54757,
        26017: 52947,
        26020: 48623,
        26021: 46050,
        26023: 47275,
        26025: 54710,
        26027: 60861,
        26029: 46799,
        26031: 52153,
        26032: 53442,
        26041: 47037,
        26044: 60598,
        26045: 51881,
        26049: 50644,
        26051: 60601,
        26052: 60600,
        26053: 49859,
        26054: 60599,
        26059: 53501,
        26060: 60602,
        26062: 60603,
        26063: 55269,
        26066: 60604,
        26070: 60605,
        26071: 50924,
        26080: 52958,
        26082: 48328,
        26085: 51413,
        26086: 46505,
        26087: 48841,
        26088: 54972,
        26089: 54503,
        26092: 53678,
        26093: 53489,
        26094: 60088,
        26095: 60089,
        26096: 60090,
        26097: 47797,
        26102: 51889,
        26103: 49141,
        26106: 52730,
        26112: 60096,
        26114: 45242,
        26115: 60094,
        26118: 49317,
        26122: 60091,
        26124: 45821,
        26126: 50167,
        26127: 48104,
        26131: 53975,
        26132: 52980,
        26133: 60095,
        26137: 60092,
        26141: 60099,
        26143: 53447,
        26144: 54195,
        26149: 46266,
        26151: 50113,
        26152: 55282,
        26157: 54737,
        26159: 51911,
        26161: 60101,
        26164: 60100,
        26165: 60103,
        26166: 60102,
        26172: 55015,
        26174: 53204,
        26177: 60107,
        26179: 48078,
        26187: 48634,
        26188: 51662,
        26191: 60108,
        26194: 51641,
        26195: 53246,
        26196: 60106,
        26197: 54478,
        26198: 60109,
        26199: 60111,
        26202: 52717,
        26207: 60105,
        26209: 60110,
        26212: 52974,
        26214: 48094,
        26216: 46015,
        26222: 50901,
        26223: 48816,
        26224: 52986,
        26228: 51175,
        26230: 48807,
        26231: 60112,
        26234: 54983,
        26238: 49600,
        26242: 54493,
        26244: 60113,
        26247: 53182,
        26252: 60114,
        26257: 51950,
        26262: 50607,
        26263: 45237,
        26269: 60116,
        26279: 60115,
        26280: 62687,
        26286: 50362,
        26292: 45481,
        26297: 58847,
        26302: 60117,
        26329: 51951,
        26331: 60118,
        26332: 60119,
        26333: 50904,
        26342: 60120,
        26345: 60121,
        26352: 54459,
        26354: 51194,
        26355: 53943,
        26356: 47356,
        26359: 60098,
        26361: 45788,
        26364: 49916,
        26366: 54520,
        26367: 52454,
        26368: 55278,
        26376: 54466,
        26377: 54224,
        26378: 60355,
        26379: 50675,
        26381: 47102,
        26384: 60372,
        26388: 52151,
        26389: 60382,
        26391: 49354,
        26395: 52731,
        26397: 45999,
        26399: 50906,
        26406: 60412,
        26408: 50366,
        26410: 52916,
        26411: 50345,
        26412: 45502,
        26413: 54525,
        26415: 51957,
        26417: 55020,
        26420: 50899,
        26421: 46820,
        26426: 48122,
        26429: 53472,
        26432: 51633,
        26434: 54483,
        26435: 51368,
        26438: 47307,
        26440: 59582,
        26441: 51644,
        26444: 59579,
        26446: 49390,
        26447: 53459,
        26448: 45764,
        26449: 46309,
        26451: 59580,
        26454: 54728,
        26460: 46789,
        26462: 59581,
        26463: 51960,
        26464: 47324,
        26465: 52469,
        26469: 49332,
        26472: 53742,
        26473: 59583,
        26474: 59586,
        26477: 47804,
        26479: 45485,
        26480: 48604,
        26482: 60093,
        26483: 59587,
        26485: 59590,
        26487: 59595,
        26492: 59596,
        26494: 52169,
        26495: 45285,
        26497: 48299,
        26500: 47545,
        26503: 59585,
        26505: 52727,
        26507: 59594,
        26512: 52982,
        26517: 54765,
        26519: 49622,
        26520: 59588,
        26522: 50102,
        26524: 47611,
        26525: 54950,
        26526: 59592,
        26530: 51936,
        26531: 54502,
        26533: 59584,
        26535: 59589,
        26536: 59591,
        26538: 51129,
        26539: 47075,
        26541: 59593,
        26543: 49117,
        26544: 59602,
        26547: 59607,
        26549: 59605,
        26550: 48348,
        26551: 48335,
        26552: 59611,
        26561: 59614,
        26563: 59610,
        26564: 45562,
        26575: 45272,
        26576: 50355,
        26577: 47308,
        26578: 50914,
        26579: 51390,
        26580: 51425,
        26584: 59599,
        26585: 59604,
        26586: 59606,
        26588: 47601,
        26589: 59608,
        26590: 55285,
        26592: 50427,
        26594: 59612,
        26597: 45801,
        26601: 59601,
        26604: 48365,
        26607: 49090,
        26608: 59597,
        26609: 55033,
        26611: 49656,
        26612: 45809,
        26621: 59615,
        26623: 51905,
        26624: 59609,
        26629: 54692,
        26631: 45546,
        26632: 54715,
        26633: 59598,
        26634: 59600,
        26635: 46768,
        26636: 59603,
        26638: 59613,
        26639: 49336,
        26641: 51959,
        26643: 52136,
        26646: 50908,
        26647: 49397,
        26653: 59625,
        26657: 53411,
        26665: 59634,
        26666: 55018,
        26674: 59616,
        26675: 59617,
        26679: 53753,
        26680: 47819,
        26681: 47353,
        26684: 47345,
        26685: 54484,
        26686: 59631,
        26688: 59630,
        26689: 59628,
        26690: 47600,
        26691: 52434,
        26692: 59622,
        26693: 52902,
        26694: 49138,
        26696: 45240,
        26697: 59633,
        26698: 59632,
        26700: 55232,
        26702: 59620,
        26704: 52649,
        26705: 51619,
        26707: 48056,
        26708: 48603,
        26709: 59626,
        26720: 59618,
        26721: 59619,
        26722: 59621,
        26723: 46517,
        26724: 59623,
        26725: 51141,
        26726: 59627,
        26727: 59629,
        26728: 48560,
        26729: 55214,
        26731: 59640,
        26740: 59637,
        26742: 52656,
        26743: 59638,
        26753: 49594,
        26755: 59624,
        26757: 50103,
        26758: 45296,
        26767: 59636,
        26771: 59639,
        26775: 47523,
        26786: 51666,
        26790: 50126,
        26791: 52960,
        26792: 49382,
        26797: 52211,
        26799: 52445,
        26800: 53429,
        26803: 51937,
        26805: 59635,
        26816: 48364,
        26818: 59641,
        26825: 50142,
        26827: 50917,
        26829: 47607,
        26834: 45300,
        26837: 55256,
        26840: 48300,
        26842: 50671,
        26848: 52420,
        26851: 59814,
        26862: 51629,
        26864: 59810,
        26865: 49378,
        26869: 49091,
        26873: 59646,
        26874: 47575,
        26876: 59643,
        26881: 59812,
        26885: 53966,
        26891: 59811,
        26893: 54962,
        26894: 55221,
        26896: 59815,
        26898: 48567,
        26911: 59644,
        26912: 59645,
        26916: 59809,
        26925: 52694,
        26928: 53932,
        26932: 59826,
        26937: 59817,
        26941: 46250,
        26943: 46267,
        26946: 59819,
        26964: 53416,
        26967: 59813,
        26970: 46078,
        26973: 59820,
        26974: 49379,
        26976: 59818,
        26979: 59833,
        26982: 59832,
        26987: 59822,
        26990: 59642,
        26993: 59816,
        26999: 49068,
        27e3: 59825,
        27001: 59834,
        27004: 49829,
        27008: 59823,
        27010: 47301,
        27012: 59821,
        27014: 54236,
        27015: 59828,
        27016: 59829,
        27017: 59831,
        27021: 59847,
        27028: 49350,
        27029: 59845,
        27032: 59824,
        27035: 59835,
        27036: 45297,
        27047: 59836,
        27048: 54693,
        27051: 59838,
        27053: 59839,
        27057: 59841,
        27060: 49649,
        27063: 51382,
        27067: 59837,
        27073: 59842,
        27082: 59843,
        27084: 59827,
        27086: 59830,
        27088: 48049,
        27092: 59840,
        27099: 48375,
        27103: 59844,
        27104: 59846,
        27117: 59850,
        27122: 59854,
        27133: 45787,
        27135: 59848,
        27146: 47022,
        27159: 59851,
        27160: 59852,
        27167: 54721,
        27169: 50339,
        27176: 59864,
        27178: 47841,
        27183: 59849,
        27185: 54179,
        27189: 59860,
        27197: 59863,
        27198: 59856,
        27204: 59855,
        27207: 51137,
        27216: 59858,
        27224: 59865,
        27225: 46024,
        27227: 59859,
        27233: 53232,
        27237: 59853,
        27249: 46071,
        27257: 59862,
        27260: 59866,
        27264: 52404,
        27268: 53165,
        27278: 59861,
        27280: 59868,
        27281: 59867,
        27287: 59870,
        27296: 59857,
        27305: 59869,
        27307: 59871,
        27308: 50122,
        27424: 51127,
        27425: 46286,
        27426: 48054,
        27427: 53440,
        27428: 60579,
        27431: 50615,
        27442: 54267,
        27447: 60580,
        27449: 60581,
        27450: 50907,
        27454: 49134,
        27459: 60582,
        27462: 60583,
        27463: 53418,
        27465: 51128,
        27468: 47336,
        27481: 60584,
        27490: 54969,
        27491: 54781,
        27492: 46283,
        27493: 45757,
        27494: 52964,
        27495: 50919,
        27498: 52705,
        27513: 46325,
        27515: 52160,
        27516: 48351,
        27521: 59874,
        27522: 59875,
        27523: 53738,
        27524: 59877,
        27526: 46329,
        27527: 59876,
        27529: 53683,
        27530: 51938,
        27531: 45776,
        27533: 59880,
        27538: 59878,
        27539: 59879,
        27542: 54963,
        27546: 59881,
        27547: 59882,
        27553: 59883,
        27562: 59884,
        27571: 60591,
        27572: 50617,
        27573: 46798,
        27575: 54003,
        27583: 46574,
        27585: 48089,
        27586: 60593,
        27589: 53987,
        27595: 52963,
        27597: 50360,
        27599: 50111,
        27602: 46782,
        27603: 55481,
        27604: 45512,
        27605: 45519,
        27606: 45521,
        27607: 50686,
        27609: 45520,
        27611: 50091,
        27617: 54705,
        27626: 60324,
        27627: 47809,
        27631: 52410,
        27635: 60325,
        27637: 60327,
        27641: 60328,
        27645: 60326,
        27653: 60329,
        27654: 60331,
        27655: 60330,
        27661: 60332,
        27663: 51919,
        27664: 55477,
        27665: 50161,
        27667: 50085,
        27668: 50936,
        27669: 60333,
        27670: 50378,
        27672: 60334,
        27673: 60335,
        27674: 60336,
        27675: 47061,
        27679: 47098,
        27681: 60337,
        27682: 51170,
        27684: 60339,
        27686: 47780,
        27687: 53749,
        27688: 45233,
        27689: 60338,
        27690: 60340,
        27694: 46506,
        27695: 49864,
        27696: 51176,
        27698: 60341,
        27700: 52142,
        27701: 58335,
        27704: 54208,
        27709: 55771,
        27712: 52641,
        27713: 54957,
        27714: 51187,
        27718: 55776,
        27719: 48099,
        27721: 47802,
        27722: 58338,
        27728: 53163,
        27732: 58336,
        27733: 51655,
        27735: 47801,
        27739: 53684,
        27740: 58337,
        27741: 51434,
        27742: 47535,
        27743: 48557,
        27744: 46040,
        27745: 52955,
        27748: 52416,
        27752: 58344,
        27753: 58345,
        27754: 52724,
        27760: 52397,
        27762: 48307,
        27764: 58346,
        27766: 58347,
        27769: 53466,
        27773: 50939,
        27774: 47066,
        27777: 51167,
        27778: 53962,
        27779: 52950,
        27781: 58340,
        27782: 58348,
        27784: 51698,
        27785: 46017,
        27788: 58343,
        27791: 50915,
        27792: 58341,
        27795: 60851,
        27796: 58342,
        27801: 51635,
        27803: 50662,
        27807: 47541,
        27809: 50107,
        27811: 58339,
        27812: 50621,
        27813: 49572,
        27814: 49881,
        27815: 45783,
        27817: 58349,
        27818: 48038,
        27819: 50349,
        27821: 58352,
        27822: 48858,
        27825: 58363,
        27826: 58357,
        27827: 47827,
        27832: 47056,
        27833: 54221,
        27835: 54990,
        27836: 54739,
        27837: 47553,
        27838: 54708,
        27839: 53720,
        27844: 53433,
        27845: 51190,
        27849: 51370,
        27850: 45748,
        27852: 50138,
        27856: 58350,
        27859: 58364,
        27860: 58351,
        27861: 47016,
        27862: 58359,
        27863: 58356,
        27867: 47034,
        27870: 50594,
        27872: 58358,
        27873: 50653,
        27874: 45736,
        27875: 50940,
        27877: 50400,
        27880: 55202,
        27882: 49377,
        27883: 58361,
        27886: 58362,
        27887: 58365,
        27888: 52393,
        27889: 58355,
        27891: 54206,
        27893: 45507,
        27894: 60852,
        27895: 58353,
        27896: 58354,
        27898: 58360,
        27899: 53434,
        27900: 50883,
        27901: 54515,
        27902: 58366,
        27905: 48608,
        27908: 58535,
        27911: 58534,
        27915: 53747,
        27916: 58531,
        27918: 58537,
        27922: 51447,
        27927: 53172,
        27929: 58536,
        27930: 58542,
        27931: 49893,
        27934: 46772,
        27941: 48626,
        27943: 58530,
        27946: 47849,
        27947: 58538,
        27950: 58540,
        27953: 46845,
        27954: 55006,
        27955: 58546,
        27957: 58541,
        27961: 58529,
        27963: 48110,
        27964: 52701,
        27965: 51106,
        27966: 50633,
        27969: 49655,
        27971: 58532,
        27973: 51123,
        27974: 48556,
        27975: 48573,
        27976: 58533,
        27978: 55239,
        27979: 45794,
        27981: 58539,
        27982: 48323,
        27983: 58543,
        27985: 48107,
        27986: 58544,
        27987: 50600,
        27988: 58545,
        27993: 54755,
        27994: 49059,
        27996: 58554,
        27998: 58551,
        28e3: 58555,
        28003: 58557,
        28006: 50902,
        28009: 47814,
        28010: 49355,
        28014: 47265,
        28015: 58548,
        28020: 54433,
        28023: 47779,
        28024: 48638,
        28028: 58556,
        28034: 52671,
        28037: 50425,
        28040: 53243,
        28041: 51686,
        28044: 54207,
        28046: 53201,
        28049: 58547,
        28051: 58552,
        28052: 58553,
        28053: 52457,
        28059: 52430,
        28061: 49364,
        28062: 58549,
        28063: 49584,
        28064: 58550,
        28065: 52944,
        28067: 48065,
        28068: 46547,
        28070: 51443,
        28071: 48551,
        28072: 54727,
        28073: 51628,
        28074: 47266,
        28075: 58570,
        28078: 58572,
        28079: 53700,
        28082: 53946,
        28085: 47789,
        28088: 47828,
        28095: 58563,
        28096: 46573,
        28100: 55245,
        28101: 58560,
        28102: 53245,
        28103: 58559,
        28107: 49628,
        28108: 52426,
        28113: 51943,
        28118: 50391,
        28120: 52436,
        28121: 58568,
        28125: 58567,
        28126: 58561,
        28128: 58564,
        28129: 46509,
        28132: 54233,
        28134: 58566,
        28139: 54009,
        28140: 46307,
        28142: 48052,
        28145: 51694,
        28147: 46270,
        28151: 48108,
        28153: 53709,
        28155: 52461,
        28156: 60853,
        28165: 51173,
        28170: 54440,
        28172: 58571,
        28173: 55253,
        28174: 58562,
        28176: 48549,
        28177: 58565,
        28180: 54246,
        28182: 58569,
        28183: 51704,
        28186: 58558,
        28189: 54245,
        28192: 51198,
        28193: 46793,
        28195: 54524,
        28196: 45747,
        28197: 58583,
        28201: 52930,
        28203: 58573,
        28205: 52924,
        28207: 47323,
        28210: 58582,
        28212: 49098,
        28216: 54222,
        28218: 50156,
        28227: 50632,
        28228: 58584,
        28237: 52676,
        28238: 58575,
        28243: 58580,
        28244: 58581,
        28246: 47870,
        28248: 53222,
        28251: 54719,
        28255: 58578,
        28267: 58576,
        28270: 58574,
        28286: 52709,
        28287: 51882,
        28291: 49315,
        28293: 48550,
        28294: 58579,
        28297: 47304,
        28303: 58599,
        28304: 54452,
        28312: 58587,
        28316: 49647,
        28319: 58601,
        28322: 53991,
        28325: 58591,
        28327: 58592,
        28330: 53162,
        28335: 52189,
        28337: 58586,
        28338: 58577,
        28340: 58597,
        28342: 51420,
        28343: 58595,
        28346: 50407,
        28347: 58594,
        28349: 58593,
        28353: 46076,
        28354: 58600,
        28359: 46561,
        28363: 55244,
        28367: 58598,
        28369: 48044,
        28371: 55250,
        28372: 52431,
        28373: 60408,
        28375: 58596,
        28378: 47606,
        28382: 54989,
        28383: 58585,
        28384: 58588,
        28385: 49914,
        28386: 58590,
        28388: 49867,
        28389: 49348,
        28390: 49872,
        28392: 45557,
        28393: 52402,
        28404: 46542,
        28409: 58607,
        28418: 50863,
        28422: 50913,
        28425: 58613,
        28431: 49833,
        28435: 49388,
        28436: 53725,
        28437: 58606,
        28448: 50350,
        28452: 58605,
        28457: 58614,
        28458: 58612,
        28459: 49918,
        28461: 58589,
        28463: 58608,
        28465: 51966,
        28467: 54724,
        28470: 58609,
        28478: 53754,
        28486: 58603,
        28487: 58604,
        28491: 58610,
        28493: 52907,
        28504: 50635,
        28508: 51121,
        28510: 49850,
        28514: 58602,
        28518: 49610,
        28525: 52406,
        28526: 46001,
        28530: 58619,
        28532: 58611,
        28536: 58618,
        28538: 58621,
        28540: 58620,
        28548: 46030,
        28552: 46010,
        28553: 58615,
        28556: 58617,
        28557: 58616,
        28558: 50668,
        28572: 49341,
        28577: 54504,
        28583: 58786,
        28595: 45252,
        28598: 58788,
        28601: 58787,
        28608: 48292,
        28610: 58789,
        28617: 58785,
        28625: 58622,
        28626: 45556,
        28638: 58792,
        28640: 58793,
        28641: 58790,
        28654: 58791,
        28655: 58794,
        28689: 50905,
        28698: 58795,
        28699: 58797,
        28707: 58796,
        28725: 58799,
        28729: 58798,
        28748: 47584,
        28751: 58800,
        28766: 58801,
        28779: 48112,
        28780: 60641,
        28781: 50160,
        28783: 46534,
        28784: 48082,
        28789: 49641,
        28790: 54510,
        28792: 48836,
        28796: 55238,
        28798: 54486,
        28799: 45779,
        28800: 60606,
        28805: 60097,
        28809: 49839,
        28810: 46262,
        28814: 53719,
        28818: 46004,
        28820: 51378,
        28821: 49083,
        28822: 60608,
        28825: 54987,
        28828: 60607,
        28829: 60609,
        28843: 60613,
        28844: 48870,
        28845: 52415,
        28846: 50650,
        28847: 48828,
        28849: 60614,
        28851: 45566,
        28855: 60612,
        28856: 54696,
        28857: 46563,
        28859: 60610,
        28860: 49590,
        28861: 46051,
        28864: 60611,
        28865: 52152,
        28866: 49347,
        28867: 52478,
        28872: 49618,
        28874: 60616,
        28888: 47846,
        28889: 49363,
        28891: 55026,
        28895: 53708,
        28900: 49086,
        28902: 47027,
        28903: 51669,
        28904: 60615,
        28905: 48098,
        28907: 52428,
        28908: 48637,
        28909: 51400,
        28911: 53161,
        28919: 52713,
        28921: 50667,
        28925: 47081,
        28937: 53705,
        28938: 47800,
        28944: 60617,
        28947: 60618,
        28949: 48064,
        28950: 60619,
        28952: 60642,
        28953: 45498,
        28954: 47065,
        28966: 48569,
        28975: 60620,
        28976: 53734,
        28977: 60621,
        28982: 51387,
        28997: 60625,
        29002: 60627,
        29004: 48077,
        29006: 48357,
        29020: 60623,
        29022: 51639,
        29028: 50106,
        29030: 60643,
        29031: 54741,
        29032: 60624,
        29038: 55027,
        29042: 60626,
        29043: 60622,
        29048: 60628,
        29050: 60629,
        29053: 51647,
        29060: 53160,
        29066: 53468,
        29071: 53676,
        29076: 51419,
        29080: 60630,
        29081: 52981,
        29087: 51948,
        29088: 60634,
        29096: 60633,
        29100: 45246,
        29107: 60631,
        29109: 60632,
        29113: 60644,
        29123: 51388,
        29134: 49607,
        29140: 60636,
        29141: 53728,
        29152: 60635,
        29157: 54511,
        29159: 60637,
        29166: 56262,
        29177: 60638,
        29190: 45484,
        29213: 60639,
        29224: 60640,
        29226: 55206,
        29228: 50624,
        29232: 60348,
        29233: 45230,
        29237: 48884,
        29238: 47288,
        29239: 53935,
        29240: 45270,
        29241: 46585,
        29243: 55475,
        29245: 52140,
        29247: 58333,
        29255: 50860,
        29256: 45286,
        29260: 50630,
        29261: 60345,
        29266: 60346,
        29270: 60347,
        29273: 53696,
        29275: 50595,
        29277: 60146,
        29279: 50354,
        29281: 50357,
        29282: 49358,
        29286: 60147,
        29287: 50369,
        29289: 52975,
        29294: 60144,
        29295: 60148,
        29298: 51708,
        29301: 51107,
        29305: 52440,
        29306: 52990,
        29310: 60149,
        29311: 60150,
        29312: 53164,
        29313: 49383,
        29316: 60151,
        29322: 46783,
        29323: 60152,
        29325: 60153,
        29327: 60154,
        29330: 60155,
        29343: 60145,
        29356: 51374,
        29357: 57835,
        29359: 47032,
        29360: 57836,
        29364: 57837,
        29366: 55220,
        29367: 57838,
        29368: 57839,
        29369: 54220,
        29377: 57841,
        29378: 49137,
        29379: 57840,
        29380: 46546,
        29384: 45495,
        29389: 57843,
        29390: 57842,
        29392: 47868,
        29394: 57844,
        29399: 47543,
        29401: 48849,
        29406: 50428,
        29408: 47837,
        29409: 48582,
        29416: 57845,
        29417: 57847,
        29420: 46784,
        29421: 53185,
        29422: 51880,
        29423: 57846,
        29424: 54776,
        29425: 54268,
        29426: 57848,
        29427: 57852,
        29428: 57849,
        29431: 57850,
        29432: 49386,
        29434: 57854,
        29435: 58017,
        29436: 49351,
        29441: 57851,
        29443: 57853,
        29450: 58021,
        29454: 49620,
        29459: 58019,
        29461: 58024,
        29462: 45822,
        29463: 58018,
        29467: 50125,
        29468: 45762,
        29469: 58023,
        29470: 58022,
        29473: 58020,
        29474: 58025,
        29477: 58027,
        29481: 53449,
        29482: 55021,
        29483: 50088,
        29484: 58028,
        29486: 53207,
        29489: 58030,
        29492: 47855,
        29495: 59872,
        29496: 58029,
        29497: 58026,
        29502: 48043,
        29503: 54451,
        29517: 58032,
        29520: 58031,
        29522: 59873,
        29527: 58033,
        29536: 58034,
        29548: 58035,
        29549: 52385,
        29551: 58036,
        29566: 58037,
        29572: 53502,
        29575: 49866,
        29577: 54257,
        29579: 52725,
        29582: 59360,
        29585: 59361,
        29590: 48833,
        29595: 49898,
        29599: 59364,
        29602: 59363,
        29609: 52710,
        29611: 50101,
        29614: 59362,
        29615: 48055,
        29616: 53206,
        29618: 49633,
        29619: 59369,
        29623: 59368,
        29626: 59380,
        29627: 45731,
        29632: 59370,
        29634: 59366,
        29640: 59372,
        29641: 59371,
        29642: 51642,
        29645: 54756,
        29647: 59365,
        29648: 47017,
        29649: 59367,
        29657: 59374,
        29662: 59379,
        29664: 55017,
        29669: 59373,
        29671: 59378,
        29673: 59377,
        29677: 45280,
        29682: 59381,
        29699: 51186,
        29701: 49349,
        29702: 49389,
        29705: 49648,
        29706: 59376,
        29711: 59382,
        29712: 52214,
        29722: 59554,
        29723: 59553,
        29730: 55233,
        29733: 59386,
        29734: 59385,
        29736: 59387,
        29738: 59383,
        29740: 59390,
        29742: 59389,
        29744: 59388,
        29747: 49621,
        29748: 51161,
        29749: 50685,
        29750: 50627,
        29756: 51181,
        29761: 59555,
        29781: 59558,
        29783: 59557,
        29785: 59559,
        29786: 47863,
        29787: 59384,
        29788: 59556,
        29790: 51440,
        29791: 51626,
        29805: 59561,
        29808: 47589,
        29814: 53758,
        29815: 59560,
        29822: 59562,
        29824: 59565,
        29825: 59566,
        29827: 49575,
        29831: 59567,
        29835: 59568,
        29838: 59564,
        29840: 59572,
        29852: 59563,
        29854: 59569,
        29863: 59573,
        29864: 59570,
        29865: 59571,
        29882: 59575,
        29906: 59574,
        29916: 47567,
        29918: 61612,
        29920: 61613,
        29922: 50864,
        29923: 45290,
        29924: 51391,
        29926: 52703,
        29934: 52941,
        29935: 60081,
        29940: 60082,
        29942: 50879,
        29943: 46281,
        29951: 60083,
        29956: 54759,
        29965: 56825,
        29967: 60084,
        29969: 60085,
        29971: 60086,
        29976: 47306,
        29977: 57264,
        29978: 51701,
        29980: 52464,
        29983: 51706,
        29989: 51707,
        29992: 54211,
        29993: 52134,
        29995: 47270,
        29996: 61614,
        29997: 45506,
        29999: 58808,
        3e4: 52463,
        30001: 54217,
        30002: 48343,
        30003: 51690,
        30005: 46567,
        30007: 50384,
        30008: 46569,
        30010: 61102,
        30011: 48045,
        30014: 59358,
        30016: 61103,
        30021: 45993,
        30024: 61106,
        30027: 61105,
        30028: 48615,
        30030: 61104,
        30031: 52919,
        30036: 50639,
        30041: 49652,
        30042: 56270,
        30043: 61107,
        30044: 53491,
        30053: 49876,
        30054: 50920,
        30058: 47020,
        30066: 61108,
        30068: 46059,
        30072: 48123,
        30073: 61109,
        30079: 59356,
        30083: 61110,
        30086: 48558,
        30091: 61922,
        30095: 51944,
        30097: 53961,
        30098: 61658,
        30100: 61659,
        30102: 61660,
        30103: 49606,
        30105: 47341,
        30106: 48846,
        30109: 61662,
        30111: 50609,
        30112: 61661,
        30113: 53745,
        30115: 61664,
        30116: 45260,
        30117: 48618,
        30123: 53983,
        30124: 61663,
        30126: 46255,
        30127: 47080,
        30128: 61670,
        30129: 61669,
        30130: 50851,
        30131: 61665,
        30132: 61666,
        30133: 46275,
        30136: 61667,
        30137: 54766,
        30140: 52443,
        30141: 48850,
        30142: 48306,
        30146: 61672,
        30147: 61671,
        30148: 61668,
        30149: 45729,
        30151: 54946,
        30152: 54200,
        30153: 48823,
        30154: 51372,
        30157: 61674,
        30162: 53751,
        30164: 54988,
        30165: 47835,
        30166: 61673,
        30168: 46779,
        30171: 52660,
        30174: 50854,
        30178: 49569,
        30179: 61675,
        30180: 61678,
        30182: 61677,
        30183: 61680,
        30184: 61676,
        30186: 48062,
        30187: 61679,
        30192: 52405,
        30193: 61682,
        30196: 46037,
        30201: 45524,
        30204: 61683,
        30207: 61684,
        30208: 61686,
        30209: 46305,
        30211: 61681,
        30213: 61687,
        30218: 61690,
        30220: 61688,
        30224: 61685,
        30229: 61693,
        30231: 61689,
        30232: 61692,
        30233: 61694,
        30235: 61857,
        30239: 52929,
        30240: 61860,
        30242: 61859,
        30244: 49654,
        30245: 61691,
        30246: 51933,
        30249: 46321,
        30250: 45553,
        30251: 52401,
        30253: 61862,
        30256: 61863,
        30259: 61868,
        30260: 54734,
        30261: 61865,
        30264: 51379,
        30268: 61858,
        30270: 61867,
        30271: 61864,
        30272: 61861,
        30275: 61866,
        30284: 45225,
        30285: 61869,
        30292: 61871,
        30294: 61873,
        30300: 61872,
        30302: 61870,
        30307: 53666,
        30315: 61874,
        30319: 61875,
        30328: 47599,
        30331: 46535,
        30333: 45271,
        30334: 45273,
        30338: 54509,
        30340: 46532,
        30342: 48596,
        30343: 48074,
        30344: 61607,
        30347: 47326,
        30350: 61608,
        30353: 45224,
        30355: 61609,
        30358: 52718,
        30361: 61610,
        30372: 61611,
        30382: 50852,
        30385: 55013,
        30386: 61924,
        30388: 61925,
        30399: 50163,
        30402: 54235,
        30405: 54993,
        30406: 50664,
        30408: 54191,
        30410: 53990,
        30413: 61121,
        30414: 45243,
        30415: 54709,
        30416: 53710,
        30417: 48352,
        30418: 47824,
        30420: 49144,
        30422: 47303,
        30423: 46529,
        30424: 50636,
        30427: 51874,
        30431: 50123,
        30437: 61122,
        30446: 50367,
        30447: 46754,
        30449: 60908,
        30450: 50084,
        30452: 54961,
        30456: 53216,
        30457: 60911,
        30460: 50638,
        30462: 46812,
        30465: 51873,
        30468: 60909,
        30471: 60912,
        30472: 60913,
        30473: 50108,
        30475: 49076,
        30477: 60910,
        30489: 60916,
        30490: 60914,
        30495: 54758,
        30496: 50143,
        30498: 60915,
        30502: 60918,
        30504: 54691,
        30505: 53667,
        30509: 60917,
        30511: 50128,
        30517: 60919,
        30518: 49140,
        30519: 48876,
        30520: 60920,
        30522: 52471,
        30524: 53723,
        30528: 55237,
        30529: 54774,
        30531: 60924,
        30535: 60923,
        30544: 60921,
        30545: 60922,
        30554: 60925,
        30555: 48806,
        30561: 52143,
        30562: 61089,
        30563: 46781,
        30565: 61090,
        30566: 50368,
        30568: 60926,
        30571: 48606,
        30572: 45767,
        30585: 46787,
        30589: 61093,
        30590: 55482,
        30591: 61091,
        30592: 61094,
        30596: 50153,
        30597: 46066,
        30604: 61095,
        30605: 61092,
        30606: 53177,
        30609: 61096,
        30610: 49911,
        30623: 61097,
        30624: 61098,
        30626: 57003,
        30629: 50867,
        30631: 51142,
        30633: 55029,
        30634: 46537,
        30636: 52146,
        30640: 61099,
        30643: 52651,
        30645: 61100,
        30651: 54704,
        30653: 61101,
        30655: 63172,
        30669: 56263,
        30679: 46243,
        30683: 50092,
        30684: 61926,
        30690: 51896,
        30691: 53971,
        30693: 54954,
        30695: 61426,
        30697: 48856,
        30699: 48579,
        30700: 61427,
        30701: 46796,
        30702: 45227,
        30707: 51887,
        30710: 60854,
        30712: 60855,
        30717: 52985,
        30718: 47023,
        30719: 49139,
        30720: 60856,
        30721: 49899,
        30722: 51632,
        30729: 60857,
        30732: 50934,
        30733: 49075,
        30737: 60860,
        30738: 50680,
        30740: 53712,
        30742: 55209,
        30743: 60858,
        30744: 60859,
        30746: 53730,
        30748: 60863,
        30749: 60864,
        30751: 60868,
        30755: 60872,
        30757: 60870,
        30758: 60878,
        30759: 54760,
        30761: 60873,
        30764: 60871,
        30765: 60862,
        30768: 50665,
        30772: 50886,
        30775: 51689,
        30776: 54482,
        30777: 60865,
        30778: 60866,
        30779: 60867,
        30780: 60869,
        30782: 49401,
        30784: 46241,
        30789: 47592,
        30791: 60880,
        30796: 60881,
        30798: 60874,
        30800: 60879,
        30802: 52984,
        30805: 52150,
        30806: 60876,
        30807: 60877,
        30813: 53237,
        30826: 60882,
        30827: 49650,
        30828: 54194,
        30829: 60875,
        30830: 51383,
        30839: 48367,
        30844: 50672,
        30855: 60886,
        30857: 46575,
        30860: 49845,
        30861: 45229,
        30862: 52201,
        30865: 45486,
        30867: 60884,
        30871: 52715,
        30872: 46562,
        30874: 60885,
        30875: 60883,
        30876: 60887,
        30879: 46586,
        30881: 60888,
        30883: 60889,
        30885: 60892,
        30887: 45516,
        30896: 50678,
        30897: 48366,
        30898: 60890,
        30899: 52412,
        30900: 45802,
        30905: 60891,
        30910: 50411,
        30913: 46277,
        30917: 45301,
        30921: 60895,
        30922: 49370,
        30923: 46312,
        30928: 50637,
        30932: 60893,
        30933: 49092,
        30937: 60894,
        30952: 50341,
        30956: 60896,
        30962: 60897,
        30964: 60899,
        30967: 49623,
        30970: 48071,
        30977: 48568,
        30981: 60898,
        30995: 60900,
        31006: 60902,
        31012: 60901,
        31028: 60903,
        31034: 51902,
        31035: 60650,
        31036: 49393,
        31038: 51687,
        31040: 60651,
        31041: 50926,
        31046: 60652,
        31048: 50925,
        31049: 60653,
        31059: 60656,
        31062: 55270,
        31063: 60659,
        31066: 60657,
        31067: 60654,
        31068: 60655,
        31069: 55203,
        31070: 51697,
        31071: 52206,
        31072: 60660,
        31074: 60658,
        31077: 53225,
        31079: 60662,
        31080: 50865,
        31085: 48320,
        31087: 60661,
        31095: 46523,
        31096: 48118,
        31098: 60663,
        31104: 55799,
        31105: 48635,
        31108: 49851,
        31109: 60664,
        31114: 60665,
        31119: 47267,
        31130: 60666,
        31143: 60667,
        31155: 60668,
        31161: 54253,
        31162: 55470,
        31163: 49387,
        31165: 51165,
        31166: 47820,
        31168: 53475,
        31169: 52157,
        31171: 52666,
        31174: 47313,
        31177: 45564,
        31179: 51183,
        31181: 54998,
        31185: 49094,
        31186: 50155,
        31189: 61429,
        31192: 50136,
        31199: 55266,
        31203: 61431,
        31204: 46035,
        31206: 51160,
        31207: 53741,
        31209: 54984,
        31211: 61432,
        31213: 61430,
        31215: 48125,
        31216: 46022,
        31224: 48597,
        31227: 53958,
        31229: 48096,
        31232: 53153,
        31234: 61436,
        31235: 61435,
        31238: 61433,
        31243: 46028,
        31245: 51668,
        31246: 52144,
        31252: 61438,
        31255: 45278,
        31258: 54985,
        31262: 61437,
        31264: 46061,
        31267: 63189,
        31283: 52936,
        31287: 61602,
        31289: 61601,
        31291: 46526,
        31292: 48346,
        31293: 48124,
        31295: 47333,
        31302: 50370,
        31313: 61603,
        31319: 52203,
        31344: 61606,
        31348: 53672,
        31350: 48831,
        31351: 51182,
        31352: 61878,
        31353: 61879,
        31354: 49109,
        31359: 46249,
        31360: 61880,
        31361: 52667,
        31363: 51156,
        31364: 54701,
        31366: 61881,
        31368: 61882,
        31373: 51151,
        31377: 53924,
        31378: 54991,
        31381: 61883,
        31382: 48593,
        31383: 46256,
        31384: 48829,
        31388: 46300,
        31389: 52945,
        31391: 49119,
        31392: 61885,
        31397: 49146,
        31398: 61884,
        31400: 61887,
        31404: 61886,
        31405: 61888,
        31411: 61889,
        31423: 49662,
        31435: 49570,
        31446: 51962,
        31449: 54718,
        31454: 48826,
        31455: 48825,
        31456: 54722,
        31459: 49058,
        31461: 52655,
        31462: 61877,
        31469: 48607,
        31471: 46795,
        31481: 55025,
        31482: 62403,
        31485: 62404,
        31487: 47309,
        31491: 62406,
        31492: 62407,
        31494: 45258,
        31496: 62405,
        31498: 62409,
        31499: 52209,
        31503: 62411,
        31505: 53414,
        31508: 45514,
        31509: 62408,
        31513: 62415,
        31515: 46545,
        31518: 62423,
        31520: 62418,
        31524: 62420,
        31525: 62419,
        31526: 47099,
        31528: 45503,
        31530: 62414,
        31531: 62410,
        31532: 46554,
        31534: 62416,
        31537: 62417,
        31539: 62421,
        31544: 62413,
        31546: 48355,
        31548: 49661,
        31550: 62422,
        31557: 62426,
        31559: 62412,
        31561: 46536,
        31563: 48622,
        31564: 62428,
        31567: 47012,
        31568: 49136,
        31569: 55038,
        31570: 52658,
        31572: 46320,
        31574: 45791,
        31576: 62424,
        31578: 62425,
        31579: 51640,
        31581: 62429,
        31584: 62430,
        31586: 62433,
        31598: 62431,
        31601: 62435,
        31602: 62434,
        31605: 62427,
        31607: 49130,
        31609: 46063,
        31611: 62432,
        31614: 51113,
        31616: 48370,
        31621: 62443,
        31629: 47551,
        31632: 62436,
        31636: 45741,
        31637: 48126,
        31639: 52195,
        31644: 62445,
        31645: 62441,
        31649: 47580,
        31650: 62446,
        31654: 62437,
        31655: 62438,
        31656: 62442,
        31657: 49889,
        31658: 62444,
        31659: 62447,
        31660: 62440,
        31661: 48381,
        31665: 53220,
        31668: 62448,
        31672: 62439,
        31681: 62450,
        31686: 55213,
        31687: 50858,
        31692: 62451,
        31697: 62449,
        31699: 49832,
        31705: 47325,
        31706: 62453,
        31709: 62452,
        31713: 46299,
        31717: 62454,
        31718: 62455,
        31722: 62456,
        31726: 49338,
        31729: 49385,
        31735: 50673,
        31740: 62459,
        31742: 62458,
        31751: 46296,
        31755: 62462,
        31756: 62457,
        31759: 62460,
        31766: 62461,
        31775: 62625,
        31782: 62627,
        31783: 48073,
        31786: 62626,
        31800: 62628,
        31807: 45758,
        31808: 62630,
        31809: 62629,
        31821: 48302,
        31859: 50135,
        31860: 55777,
        31867: 49376,
        31868: 62668,
        31869: 55249,
        31881: 47067,
        31889: 62670,
        31890: 49571,
        31893: 50889,
        31895: 46294,
        31896: 54707,
        31900: 62672,
        31901: 62671,
        31902: 62673,
        31903: 52186,
        31906: 62674,
        31908: 54465,
        31909: 55008,
        31914: 47072,
        31918: 49592,
        31921: 49595,
        31922: 62675,
        31923: 48812,
        31929: 46306,
        31932: 62676,
        31933: 62677,
        31934: 48811,
        31937: 62678,
        31941: 62683,
        31943: 62679,
        31944: 62682,
        31946: 47869,
        31948: 62680,
        31949: 62681,
        31957: 47330,
        31958: 52423,
        31959: 62684,
        31961: 45786,
        31964: 50131,
        31967: 54499,
        31968: 49079,
        31976: 62685,
        31983: 50612,
        31992: 62697,
        31995: 53173,
        32010: 52937,
        32032: 52184,
        32034: 52215,
        32039: 48628,
        32043: 55247,
        32047: 49371,
        32110: 53493,
        32119: 62698,
        32166: 62699,
        32174: 62700,
        32315: 63459,
        32321: 47025,
        32327: 62701,
        32386: 55275,
        32411: 62702,
        32415: 59129,
        32416: 48832,
        32417: 59130,
        32418: 47852,
        32419: 59131,
        32420: 53195,
        32421: 59132,
        32422: 54460,
        32423: 48310,
        32424: 59133,
        32425: 59134,
        32426: 48333,
        32427: 51410,
        32428: 52915,
        32429: 59297,
        32431: 46271,
        32432: 59298,
        32433: 51636,
        32434: 47321,
        32435: 50377,
        32437: 55261,
        32438: 49882,
        32439: 47063,
        32440: 54973,
        32441: 52934,
        32442: 47044,
        32445: 50598,
        32446: 59299,
        32447: 53215,
        32448: 59300,
        32449: 59301,
        32450: 59302,
        32451: 49591,
        32452: 55273,
        32453: 51696,
        32454: 53176,
        32455: 54959,
        32456: 54997,
        32457: 59303,
        32458: 45293,
        32459: 59304,
        32460: 59305,
        32461: 51676,
        32462: 53999,
        32463: 48813,
        32464: 59306,
        32465: 45299,
        32466: 51422,
        32467: 48609,
        32468: 59307,
        32469: 51398,
        32471: 59308,
        32472: 48102,
        32473: 47352,
        32474: 53668,
        32475: 59309,
        32476: 49895,
        32477: 48888,
        32478: 48586,
        32479: 52659,
        32480: 59310,
        32481: 59311,
        32482: 48878,
        32483: 53477,
        32485: 52199,
        32486: 52432,
        32487: 48332,
        32488: 59312,
        32489: 48296,
        32490: 53495,
        32491: 59313,
        32493: 53496,
        32494: 59314,
        32495: 59315,
        32496: 46274,
        32497: 59316,
        32498: 59317,
        32499: 51710,
        32500: 52908,
        32501: 50144,
        32502: 59319,
        32503: 45505,
        32504: 46065,
        32506: 59320,
        32507: 59321,
        32508: 55259,
        32509: 54720,
        32510: 59322,
        32511: 49868,
        32512: 55226,
        32513: 59323,
        32514: 59324,
        32515: 59325,
        32516: 48362,
        32517: 50149,
        32518: 49346,
        32519: 59326,
        32520: 59327,
        32521: 48297,
        32523: 59328,
        32524: 59329,
        32525: 59318,
        32526: 46800,
        32527: 59330,
        32529: 59331,
        32530: 59332,
        32531: 48058,
        32532: 46558,
        32533: 49862,
        32534: 45536,
        32535: 59333,
        32536: 54453,
        32537: 59334,
        32538: 47295,
        32539: 59336,
        32540: 59335,
        32541: 47084,
        32543: 59337,
        32544: 45816,
        32545: 59338,
        32546: 59339,
        32547: 59340,
        32548: 59341,
        32549: 59342,
        32550: 59343,
        32551: 59344,
        32552: 54183,
        32553: 52213,
        32554: 59345,
        32555: 59346,
        32556: 59347,
        32557: 59348,
        32558: 51657,
        32559: 59349,
        32560: 59350,
        32561: 59351,
        32562: 59352,
        32563: 59353,
        32564: 48585,
        32565: 59354,
        32566: 62398,
        32568: 47319,
        32570: 51377,
        32578: 62399,
        32580: 62400,
        32581: 62401,
        32592: 47582,
        32593: 52728,
        32596: 55528,
        32597: 47793,
        32599: 49886,
        32600: 61111,
        32602: 47011,
        32607: 61113,
        32609: 61112,
        32610: 45269,
        32616: 61115,
        32617: 54742,
        32618: 55279,
        32622: 54979,
        32625: 61117,
        32626: 51952,
        32628: 61116,
        32633: 61118,
        32638: 61120,
        32641: 61119,
        32650: 53746,
        32652: 51132,
        32654: 50112,
        32660: 47329,
        32666: 49639,
        32669: 62662,
        32670: 53471,
        32671: 62663,
        32673: 53211,
        32676: 51386,
        32679: 62664,
        32687: 62665,
        32688: 62666,
        32690: 62667,
        32696: 55802,
        32697: 47358,
        32700: 58865,
        32701: 54256,
        32703: 62688,
        32705: 52940,
        32709: 46049,
        32714: 61876,
        32716: 53998,
        32718: 62689,
        32724: 53224,
        32725: 62690,
        32728: 51148,
        32735: 46548,
        32736: 46308,
        32737: 62692,
        32741: 62691,
        32742: 62693,
        32745: 62694,
        32750: 62695,
        32752: 47794,
        32753: 45247,
        32755: 62696,
        32763: 47021,
        32764: 53997,
        32768: 53931,
        32769: 49359,
        32771: 49084,
        32772: 60323,
        32773: 54751,
        32774: 60104,
        32779: 61939,
        32780: 46840,
        32781: 52131,
        32784: 50381,
        32786: 61927,
        32788: 61928,
        32789: 47355,
        32790: 61929,
        32791: 47812,
        32792: 54469,
        32793: 45266,
        32796: 61930,
        32800: 61931,
        32802: 61932,
        32805: 61933,
        32806: 61934,
        32807: 61935,
        32808: 61937,
        32809: 61936,
        32810: 50645,
        32817: 61938,
        32819: 46842,
        32821: 61940,
        32822: 53934,
        32823: 57031,
        32824: 52170,
        32827: 46044,
        32829: 46498,
        32831: 47522,
        32834: 50420,
        32835: 61941,
        32838: 61942,
        32842: 49604,
        32843: 49659,
        32844: 54960,
        32845: 61943,
        32850: 61944,
        32852: 49578,
        32856: 50872,
        32858: 48859,
        32873: 61945,
        32874: 46287,
        32881: 61946,
        32895: 60850,
        32896: 60849,
        32899: 52192,
        32900: 53982,
        32902: 52161,
        32903: 54744,
        32905: 51426,
        32907: 49375,
        32908: 48289,
        32915: 60353,
        32918: 53412,
        32920: 55010,
        32922: 46791,
        32923: 47320,
        32924: 60352,
        32925: 47310,
        32927: 60351,
        32928: 45990,
        32929: 47561,
        32930: 54955,
        32932: 47092,
        32933: 47050,
        32937: 48359,
        32938: 47038,
        32939: 60358,
        32941: 60359,
        32942: 45241,
        32943: 49103,
        32945: 60357,
        32946: 54269,
        32948: 60360,
        32951: 60361,
        32954: 47054,
        32956: 60354,
        32957: 60356,
        32958: 51702,
        32959: 54999,
        32960: 54733,
        32961: 53426,
        32962: 60367,
        32963: 52920,
        32964: 60368,
        32966: 46504,
        32972: 45491,
        32973: 60370,
        32974: 52389,
        32982: 50646,
        32983: 60371,
        32985: 60369,
        32986: 50655,
        32987: 60366,
        32988: 51876,
        32989: 60373,
        32990: 45307,
        32993: 47866,
        32996: 55479,
        32997: 61923,
        32999: 60362,
        33e3: 60363,
        33001: 60364,
        33002: 60365,
        33003: 60374,
        33004: 59072,
        33005: 60377,
        33007: 49128,
        33008: 53960,
        33009: 60375,
        33010: 60380,
        33011: 47340,
        33012: 60376,
        33014: 48570,
        33016: 53464,
        33018: 45239,
        33020: 60381,
        33021: 50396,
        33026: 54956,
        33030: 46304,
        33033: 49910,
        33034: 48313,
        33037: 60378,
        33038: 60379,
        33039: 54496,
        33040: 50922,
        33041: 50388,
        33042: 60383,
        33043: 50599,
        33044: 55797,
        33046: 45745,
        33048: 60388,
        33050: 48581,
        33054: 60386,
        33068: 60387,
        33071: 47276,
        33073: 52689,
        33074: 60389,
        33078: 60385,
        33080: 49587,
        33086: 50850,
        33094: 52467,
        33096: 60390,
        33098: 49328,
        33099: 53944,
        33100: 60391,
        33104: 47279,
        33105: 47277,
        33107: 60392,
        33108: 51131,
        33109: 52723,
        33113: 60394,
        33114: 60395,
        33120: 60397,
        33125: 53448,
        33127: 60402,
        33129: 60398,
        33133: 60401,
        33134: 51449,
        33136: 53756,
        33137: 60396,
        33140: 60393,
        33145: 47289,
        33146: 53209,
        33147: 50405,
        33148: 60399,
        33149: 60400,
        33150: 52442,
        33151: 52680,
        33152: 45298,
        33154: 60406,
        33160: 60405,
        33162: 45746,
        33167: 47328,
        33169: 60407,
        33176: 45548,
        33179: 52421,
        33180: 50340,
        33181: 53157,
        33187: 60409,
        33190: 60578,
        33192: 50674,
        33194: 60410,
        33203: 51653,
        33210: 58079,
        33211: 60414,
        33216: 52686,
        33217: 60577,
        33218: 45531,
        33219: 54199,
        33222: 53980,
        33226: 60413,
        33228: 60411,
        33251: 46012,
        33255: 60080,
        33258: 55252,
        33260: 62635,
        33261: 46068,
        33267: 54977,
        33268: 54978,
        33275: 54761,
        33276: 48842,
        33278: 62631,
        33280: 53928,
        33281: 62632,
        33282: 62633,
        33284: 62634,
        33285: 48843,
        33286: 54239,
        33292: 51680,
        33293: 51681,
        33296: 62402,
        33298: 51942,
        33300: 52466,
        33307: 58038,
        33308: 52148,
        33310: 52968,
        33311: 55003,
        33313: 62637,
        33314: 62638,
        33315: 62639,
        33320: 62642,
        33322: 47805,
        33323: 62643,
        33324: 45283,
        33325: 62640,
        33327: 62641,
        33328: 48546,
        33329: 45781,
        33331: 62646,
        33332: 62647,
        33333: 46822,
        33334: 45744,
        33335: 53199,
        33336: 62644,
        33337: 46252,
        33339: 62645,
        33342: 62648,
        33348: 62649,
        33351: 52647,
        33353: 62650,
        33355: 62651,
        33359: 62652,
        33368: 52178,
        33370: 62653,
        33375: 62654,
        33384: 62655,
        33390: 62686,
        33391: 49596,
        33392: 48360,
        33394: 51627,
        33395: 53726,
        33396: 58869,
        33401: 56499,
        33402: 53973,
        33405: 56500,
        33406: 45228,
        33407: 56501,
        33410: 48602,
        33412: 56505,
        33416: 55490,
        33418: 56503,
        33419: 54259,
        33421: 51670,
        33422: 56506,
        33423: 56502,
        33425: 56507,
        33426: 50082,
        33431: 56508,
        33432: 56517,
        33433: 56509,
        33436: 52959,
        33437: 54949,
        33439: 56527,
        33441: 56525,
        33444: 56530,
        33445: 48614,
        33446: 49835,
        33448: 56504,
        33449: 56523,
        33450: 56526,
        33451: 56510,
        33452: 47058,
        33453: 45253,
        33454: 56519,
        33455: 53438,
        33456: 56513,
        33457: 48040,
        33459: 47036,
        33460: 56524,
        33463: 56518,
        33464: 56511,
        33465: 51163,
        33469: 53695,
        33470: 56512,
        33473: 56522,
        33476: 56528,
        33479: 52909,
        33480: 56514,
        33482: 56515,
        33483: 56520,
        33484: 56521,
        33485: 45780,
        33486: 56529,
        33487: 52181,
        33489: 54455,
        33490: 56539,
        33491: 56543,
        33492: 52390,
        33493: 56550,
        33495: 50151,
        33496: 56540,
        33499: 49089,
        33500: 56537,
        33502: 45306,
        33503: 47542,
        33504: 56549,
        33505: 56531,
        33507: 56516,
        33508: 56534,
        33509: 51444,
        33510: 49120,
        33515: 51643,
        33519: 45501,
        33521: 54178,
        33524: 56538,
        33527: 56533,
        33529: 50875,
        33531: 56542,
        33537: 55234,
        33538: 50095,
        33539: 47030,
        33540: 51153,
        33541: 50089,
        33542: 56546,
        33543: 56536,
        33544: 56555,
        33545: 56532,
        33548: 56541,
        33550: 48805,
        33551: 56535,
        33553: 56544,
        33556: 56547,
        33557: 56548,
        33559: 56568,
        33562: 56545,
        33563: 56738,
        33564: 56551,
        33575: 48363,
        33576: 46276,
        33579: 50083,
        33580: 45799,
        33581: 56570,
        33583: 56562,
        33585: 56559,
        33587: 56572,
        33588: 56558,
        33589: 54e3,
        33590: 45800,
        33592: 51415,
        33593: 51427,
        33594: 56571,
        33596: 56557,
        33600: 56567,
        33603: 56565,
        33606: 48803,
        33607: 56564,
        33609: 45789,
        33615: 56563,
        33616: 48374,
        33617: 56552,
        33618: 48068,
        33620: 49395,
        33626: 48340,
        33627: 56553,
        33628: 56554,
        33630: 56561,
        33631: 56566,
        33632: 56569,
        33633: 46516,
        33635: 51417,
        33636: 48103,
        33637: 56574,
        33638: 56573,
        33639: 54187,
        33640: 56737,
        33641: 56739,
        33642: 56741,
        33643: 54001,
        33644: 56740,
        33645: 56742,
        33646: 56743,
        33647: 53929,
        33655: 47817,
        33656: 56745,
        33659: 56758,
        33660: 56753,
        33661: 56756,
        33669: 56752,
        33670: 50894,
        33673: 49394,
        33678: 51631,
        33682: 56556,
        33683: 56750,
        33688: 56759,
        33691: 56560,
        33692: 56751,
        33694: 56760,
        33696: 56748,
        33704: 56761,
        33705: 56755,
        33706: 56749,
        33707: 50346,
        33712: 56744,
        33713: 49331,
        33714: 49579,
        33715: 56746,
        33716: 56747,
        33718: 56754,
        33719: 48113,
        33720: 56757,
        33721: 54184,
        33722: 56762,
        33724: 56763,
        33725: 50087,
        33728: 56786,
        33729: 56764,
        33733: 56785,
        33735: 47549,
        33738: 48853,
        33740: 48890,
        33743: 47818,
        33748: 56778,
        33750: 56773,
        33752: 56767,
        33756: 45771,
        33757: 56771,
        33759: 56779,
        33760: 45732,
        33761: 56789,
        33765: 56766,
        33769: 50896,
        33770: 56784,
        33776: 56788,
        33777: 49634,
        33778: 47046,
        33784: 56782,
        33785: 56783,
        33789: 56772,
        33793: 56765,
        33795: 56781,
        33796: 52433,
        33798: 56777,
        33803: 56770,
        33804: 50120,
        33805: 50876,
        33806: 52910,
        33807: 56780,
        33809: 56776,
        33816: 56769,
        33820: 56774,
        33821: 49884,
        33828: 54185,
        33829: 54186,
        33830: 56787,
        33831: 53236,
        33832: 51448,
        33841: 56806,
        33848: 56775,
        33852: 56800,
        33853: 49892,
        33862: 56801,
        33873: 56791,
        33879: 55032,
        33881: 56793,
        33882: 56792,
        33883: 47344,
        33884: 56790,
        33889: 50895,
        33891: 46765,
        33897: 56802,
        33899: 47865,
        33900: 54497,
        33901: 56807,
        33905: 46288,
        33907: 56794,
        33909: 49147,
        33910: 56803,
        33912: 56799,
        33914: 56797,
        33922: 46553,
        33927: 56795,
        33928: 56796,
        33929: 56798,
        33931: 48559,
        33932: 56804,
        33934: 56805,
        33943: 56821,
        33945: 50121,
        33948: 52194,
        33953: 56818,
        33967: 55521,
        33970: 50897,
        33972: 56820,
        33976: 54772,
        33977: 56819,
        33978: 56816,
        33981: 56812,
        33983: 56815,
        33985: 56808,
        33988: 53486,
        33993: 51416,
        33994: 56814,
        33997: 56809,
        34e3: 56810,
        34001: 52210,
        34003: 56813,
        34006: 45517,
        34013: 49334,
        34015: 48315,
        34016: 56817,
        34019: 56823,
        34021: 56822,
        34022: 56811,
        34028: 50670,
        34032: 56827,
        34044: 56996,
        34047: 56995,
        34060: 56824,
        34065: 50159,
        34067: 49915,
        34071: 54753,
        34074: 52917,
        34079: 56829,
        34081: 45772,
        34091: 50408,
        34092: 51935,
        34103: 51134,
        34104: 56826,
        34105: 56828,
        34106: 56830,
        34107: 56994,
        34108: 45226,
        34109: 45518,
        34115: 57004,
        34120: 56998,
        34121: 48566,
        34122: 51439,
        34134: 56993,
        34137: 56997,
        34142: 57001,
        34148: 57e3,
        34152: 56999,
        34162: 57005,
        34164: 54476,
        34169: 57011,
        34170: 57002,
        34171: 57006,
        34174: 49369,
        34180: 45473,
        34181: 57014,
        34183: 57009,
        34191: 57010,
        34203: 53670,
        34204: 57013,
        34212: 57007,
        34216: 57008,
        34218: 53437,
        34222: 57012,
        34223: 51949,
        34224: 57017,
        34231: 57016,
        34233: 57015,
        34241: 57019,
        34249: 48613,
        34255: 45784,
        34256: 50154,
        34259: 57018,
        34261: 50618,
        34268: 57020,
        34276: 52441,
        34281: 47018,
        34299: 54501,
        34303: 57021,
        34309: 57023,
        34321: 50338,
        34326: 57025,
        34343: 57022,
        34345: 57024,
        34360: 54714,
        34364: 57026,
        34381: 62126,
        34382: 48034,
        34383: 49842,
        34384: 50608,
        34385: 49863,
        34388: 62127,
        34394: 53481,
        34398: 54237,
        34402: 60349,
        34411: 46054,
        34412: 62128,
        34414: 62129,
        34417: 51885,
        34425: 47847,
        34426: 62131,
        34427: 62133,
        34428: 62132,
        34429: 52196,
        34430: 53178,
        34431: 62130,
        34432: 51892,
        34433: 53967,
        34434: 49900,
        34442: 52931,
        34443: 62136,
        34444: 45302,
        34445: 62135,
        34451: 62142,
        34453: 45775,
        34460: 53697,
        34461: 62138,
        34467: 62140,
        34468: 54505,
        34471: 62139,
        34472: 62134,
        34473: 62143,
        34474: 62141,
        34476: 62137,
        34479: 62151,
        34480: 62148,
        34481: 62150,
        34484: 62154,
        34485: 62146,
        34486: 62144,
        34490: 62149,
        34496: 55035,
        34500: 62145,
        34502: 51193,
        34503: 51679,
        34505: 62152,
        34506: 47558,
        34507: 46512,
        34510: 62147,
        34511: 62153,
        34512: 62160,
        34513: 62166,
        34516: 48087,
        34520: 62165,
        34521: 52700,
        34523: 55019,
        34526: 62162,
        34527: 62164,
        34532: 47346,
        34537: 62155,
        34541: 62158,
        34542: 49913,
        34544: 54749,
        34545: 62156,
        34546: 62157,
        34547: 62159,
        34548: 62163,
        34552: 62169,
        34553: 54204,
        34558: 46826,
        34560: 51953,
        34562: 47076,
        34563: 62167,
        34567: 62168,
        34568: 62170,
        34569: 62173,
        34570: 62171,
        34573: 62172,
        34578: 53713,
        34579: 62161,
        34581: 52681,
        34583: 52943,
        34584: 54953,
        34586: 62179,
        34588: 50139,
        34590: 62176,
        34593: 49327,
        34594: 62188,
        34595: 62174,
        34597: 62177,
        34601: 62184,
        34606: 62178,
        34609: 62183,
        34612: 62182,
        34615: 62185,
        34619: 62175,
        34622: 62180,
        34623: 62186,
        34631: 54188,
        34632: 62181,
        34633: 45813,
        34636: 62194,
        34638: 53419,
        34643: 62197,
        34647: 48072,
        34649: 62201,
        34656: 62192,
        34659: 62198,
        34660: 62200,
        34661: 62202,
        34670: 62195,
        34672: 62193,
        34676: 47867,
        34678: 46587,
        34683: 62191,
        34684: 62199,
        34685: 62189,
        34686: 62190,
        34690: 62187,
        34691: 62374,
        34693: 62371,
        34696: 62370,
        34699: 62196,
        34701: 51418,
        34707: 62203,
        34711: 62373,
        34719: 50168,
        34728: 62205,
        34731: 62375,
        34732: 62377,
        34733: 62372,
        34735: 62204,
        34739: 62379,
        34741: 62378,
        34746: 49885,
        34749: 62382,
        34752: 62384,
        34758: 62369,
        34762: 62385,
        34763: 62380,
        34769: 62383,
        34770: 62206,
        34771: 62381,
        34779: 62386,
        34784: 62388,
        34789: 62376,
        34794: 62387,
        34798: 62389,
        34809: 53431,
        34814: 62392,
        34819: 55801,
        34826: 62393,
        34835: 62391,
        34837: 51428,
        34838: 62390,
        34843: 62394,
        34849: 62395,
        34850: 46272,
        34866: 61123,
        34873: 62396,
        34876: 62397,
        34880: 53674,
        34884: 62636,
        34885: 53446,
        34892: 53456,
        34893: 53724,
        34900: 53198,
        34903: 48598,
        34905: 53699,
        34913: 47842,
        34914: 57833,
        34915: 53954,
        34916: 61890,
        34917: 45753,
        34920: 45549,
        34921: 61891,
        34923: 51648,
        34924: 46020,
        34926: 55794,
        34928: 52133,
        34930: 61892,
        34935: 54996,
        34941: 61893,
        34942: 62656,
        34943: 61894,
        34945: 54444,
        34946: 61895,
        34948: 45248,
        34949: 62657,
        34952: 62658,
        34955: 46332,
        34957: 50651,
        34962: 52411,
        34966: 53476,
        34972: 52704,
        34978: 61896,
        34980: 55795,
        34987: 45499,
        34989: 53166,
        34993: 47268,
        34999: 61898,
        35004: 61899,
        35009: 45763,
        35010: 49617,
        35013: 55216,
        35014: 61897,
        35017: 61900,
        35022: 61902,
        35026: 55798,
        35028: 53985,
        35029: 54435,
        35032: 62659,
        35033: 51385,
        35039: 62660,
        35042: 61901,
        35043: 61903,
        35044: 49123,
        35045: 61904,
        35048: 61908,
        35056: 61910,
        35057: 61905,
        35059: 51665,
        35060: 50657,
        35064: 49891,
        35065: 47612,
        35068: 61907,
        35070: 61909,
        35074: 47571,
        35082: 61915,
        35088: 47830,
        35090: 45309,
        35091: 61913,
        35097: 61912,
        35098: 61906,
        35099: 61914,
        35105: 61911,
        35109: 51436,
        35114: 52682,
        35115: 61917,
        35120: 58813,
        35124: 61916,
        35126: 61918,
        35137: 61919,
        35140: 53221,
        35166: 62661,
        35167: 48627,
        35174: 61920,
        35195: 61921,
        35199: 52983,
        35201: 53930,
        35203: 61947,
        35206: 47282,
        35265: 48379,
        35266: 47579,
        35268: 47590,
        35269: 50137,
        35270: 51923,
        35271: 60136,
        35272: 49344,
        35273: 48885,
        35274: 60137,
        35275: 60138,
        35276: 60139,
        35278: 60140,
        35279: 60141,
        35280: 60142,
        35281: 60143,
        35282: 48583,
        35286: 62971,
        35290: 62973,
        35292: 62974,
        35294: 62972,
        35299: 48610,
        35301: 63137,
        35302: 46245,
        35307: 63138,
        35311: 63139,
        35315: 60594,
        35328: 53716,
        35335: 55786,
        35390: 63140,
        35400: 61114,
        35449: 54706,
        35465: 54270,
        35466: 52444,
        35475: 51908,
        35591: 58816,
        35622: 63141,
        35686: 48815,
        35692: 50857,
        35744: 55973,
        35745: 48326,
        35746: 46761,
        35747: 47292,
        35748: 51407,
        35749: 48293,
        35750: 55974,
        35751: 55975,
        35752: 52438,
        35753: 51395,
        35754: 55976,
        35755: 50941,
        35757: 53685,
        35758: 53993,
        35759: 53686,
        35760: 48327,
        35762: 48562,
        35763: 48100,
        35764: 55977,
        35765: 55978,
        35766: 53704,
        35767: 55979,
        35768: 53485,
        35769: 46831,
        35770: 49883,
        35772: 52175,
        35773: 47085,
        35774: 51688,
        35775: 47043,
        35776: 48887,
        35777: 54948,
        35778: 55980,
        35779: 55981,
        35780: 50880,
        35781: 55271,
        35782: 51894,
        35784: 54697,
        35785: 52191,
        35786: 54767,
        35787: 55982,
        35788: 55007,
        35789: 46282,
        35790: 55984,
        35791: 55983,
        35793: 53995,
        35794: 55985,
        35795: 55986,
        35796: 55987,
        35797: 51924,
        35798: 55988,
        35799: 51883,
        35800: 55989,
        35801: 55990,
        35802: 46031,
        35803: 55023,
        35804: 55991,
        35805: 48048,
        35806: 46510,
        35807: 55992,
        35808: 55993,
        35809: 47598,
        35810: 53679,
        35811: 53992,
        35812: 55994,
        35813: 47299,
        35814: 53226,
        35815: 45807,
        35816: 55995,
        35817: 55996,
        35819: 48619,
        35820: 52956,
        35821: 54255,
        35822: 55997,
        35823: 52979,
        35824: 55998,
        35825: 54229,
        35826: 48101,
        35827: 55999,
        35828: 52149,
        35829: 52176,
        35830: 56e3,
        35831: 51179,
        35832: 55022,
        35833: 56001,
        35834: 50613,
        35835: 46785,
        35836: 56002,
        35837: 47052,
        35838: 49102,
        35839: 56003,
        35840: 56004,
        35841: 52141,
        35842: 56005,
        35843: 46583,
        35844: 56006,
        35845: 49602,
        35846: 55227,
        35847: 56007,
        35848: 52408,
        35850: 53994,
        35851: 50353,
        35852: 56008,
        35853: 46589,
        35854: 48081,
        35855: 56009,
        35856: 53427,
        35857: 56010,
        35858: 56011,
        35859: 52925,
        35860: 56012,
        35861: 56013,
        35862: 56014,
        35863: 45815,
        35864: 56017,
        35865: 56015,
        35866: 53736,
        35867: 56016,
        35868: 50133,
        35869: 56018,
        35871: 56019,
        35872: 56020,
        35873: 56021,
        35874: 53435,
        35875: 53925,
        35876: 45305,
        35877: 56022,
        35878: 51115,
        35879: 56023,
        35880: 48631,
        35881: 50081,
        35882: 56024,
        35883: 56025,
        35884: 50173,
        35885: 52407,
        35886: 56026,
        35887: 56027,
        35888: 49342,
        35889: 50903,
        35890: 56028,
        35891: 56029,
        35892: 51124,
        35893: 56030,
        35894: 56031,
        35895: 47560,
        35905: 48109,
        35910: 46777,
        35911: 62712,
        35913: 62713,
        35916: 52707,
        35925: 62905,
        35930: 60384,
        35937: 53235,
        35938: 48063,
        35946: 47808,
        35947: 54437,
        35955: 57817,
        35960: 62964,
        35961: 45482,
        35962: 45810,
        35970: 62965,
        35973: 62967,
        35977: 47825,
        35978: 62966,
        35980: 50098,
        35988: 62969,
        35992: 62968,
        36125: 45492,
        36126: 54762,
        36127: 47290,
        36129: 47537,
        36130: 45766,
        36131: 54512,
        36132: 53197,
        36133: 45276,
        36134: 54731,
        36135: 48117,
        36136: 54986,
        36137: 47031,
        36138: 52400,
        36139: 50870,
        36140: 45537,
        36141: 47546,
        36142: 55036,
        36143: 47585,
        36144: 47009,
        36145: 48378,
        36146: 60122,
        36147: 60123,
        36148: 52473,
        36149: 47603,
        36150: 60124,
        36151: 46331,
        36152: 50099,
        36153: 47057,
        36154: 47832,
        36155: 60125,
        36156: 54516,
        36157: 60126,
        36158: 48342,
        36159: 48095,
        36160: 60127,
        36161: 49630,
        36162: 49848,
        36163: 54495,
        36164: 55242,
        36165: 60128,
        36166: 60129,
        36167: 60132,
        36168: 60130,
        36169: 60131,
        36170: 51678,
        36171: 47283,
        36172: 46788,
        36173: 60133,
        36174: 51946,
        36175: 51661,
        36176: 46285,
        36179: 58073,
        36180: 50658,
        36181: 60134,
        36182: 49333,
        36184: 55224,
        36185: 60135,
        36186: 55212,
        36187: 51452,
        36188: 55507,
        36189: 55501,
        36190: 54494,
        36192: 54521,
        36193: 51652,
        36194: 54190,
        36195: 47315,
        36196: 46048,
        36198: 51682,
        36199: 62710,
        36203: 47829,
        36205: 62711,
        36208: 55263,
        36211: 62705,
        36212: 47280,
        36213: 54740,
        36214: 47311,
        36215: 50928,
        36225: 46019,
        36228: 62706,
        36229: 45996,
        36234: 54461,
        36235: 51191,
        36241: 62708,
        36244: 62707,
        36255: 52427,
        36259: 51364,
        36273: 62709,
        36275: 55267,
        36276: 50623,
        36277: 62912,
        36280: 62907,
        36282: 62915,
        36284: 62914,
        36286: 54970,
        36287: 62913,
        36291: 54462,
        36292: 62916,
        36294: 62924,
        36299: 45263,
        36300: 46584,
        36302: 62921,
        36303: 62922,
        36305: 50652,
        36310: 62917,
        36311: 62918,
        36314: 62919,
        36315: 62923,
        36317: 48864,
        36318: 62920,
        36319: 47354,
        36323: 62928,
        36324: 62931,
        36328: 49127,
        36330: 47602,
        36331: 62908,
        36332: 62925,
        36335: 49847,
        36339: 52472,
        36341: 48377,
        36343: 62926,
        36344: 62927,
        36345: 62929,
        36346: 46821,
        36347: 62930,
        36349: 62933,
        36357: 62909,
        36361: 62932,
        36362: 54203,
        36364: 46060,
        36367: 52388,
        36372: 62934,
        36381: 62935,
        36382: 48865,
        36383: 62936,
        36386: 52447,
        36387: 62939,
        36393: 45768,
        36394: 55257,
        36396: 62937,
        36398: 62938,
        36399: 62940,
        36401: 62946,
        36405: 62944,
        36409: 62943,
        36410: 62941,
        36413: 62945,
        36416: 62942,
        36417: 62948,
        36418: 62949,
        36420: 52451,
        36423: 58815,
        36424: 46520,
        36425: 62947,
        36426: 62952,
        36427: 52387,
        36433: 62950,
        36434: 62951,
        36441: 62910,
        36454: 45508,
        36457: 62911,
        36460: 46533,
        36461: 45796,
        36463: 62956,
        36464: 62953,
        36466: 46807,
        36468: 62957,
        36470: 62954,
        36476: 62955,
        36479: 46298,
        36481: 54506,
        36485: 62958,
        36487: 46073,
        36495: 62959,
        36496: 62961,
        36500: 62960,
        36508: 62962,
        36510: 62963,
        36523: 51693,
        36524: 47530,
        36527: 51195,
        36530: 46819,
        36538: 52425,
        36558: 60070,
        36710: 46005,
        36711: 54526,
        36712: 47596,
        36713: 53497,
        36715: 59885,
        36716: 55210,
        36717: 59886,
        36718: 49878,
        36719: 51437,
        36720: 47844,
        36721: 59887,
        36722: 59888,
        36723: 59889,
        36724: 55009,
        36725: 59890,
        36726: 59891,
        36727: 59893,
        36728: 59892,
        36729: 59894,
        36730: 59895,
        36731: 51169,
        36732: 59896,
        36733: 54488,
        36734: 59897,
        36735: 48590,
        36737: 59898,
        36738: 59899,
        36739: 48591,
        36740: 59900,
        36741: 47272,
        36742: 49598,
        36743: 59901,
        36744: 45490,
        36745: 48084,
        36746: 47605,
        36747: 59902,
        36749: 60065,
        36750: 60066,
        36751: 60067,
        36752: 47096,
        36753: 48301,
        36755: 51940,
        36756: 57550,
        36757: 54447,
        36758: 53181,
        36759: 54711,
        36760: 60068,
        36761: 54750,
        36762: 60069,
        36763: 53441,
        36764: 47548,
        36766: 46279,
        36767: 45529,
        36771: 49329,
        36776: 45542,
        36777: 45543,
        36779: 45544,
        36784: 46013,
        36785: 51432,
        36790: 58817,
        36793: 45535,
        36797: 49609,
        36798: 46319,
        36801: 51112,
        36802: 54232,
        36804: 50937,
        36805: 53688,
        36807: 47613,
        36808: 49909,
        36814: 54189,
        36816: 54475,
        36817: 48636,
        36819: 58818,
        36820: 47029,
        36821: 58819,
        36824: 48057,
        36825: 54754,
        36827: 48632,
        36828: 54454,
        36829: 52901,
        36830: 49580,
        36831: 46041,
        36834: 52470,
        36836: 58822,
        36837: 58820,
        36838: 58824,
        36840: 58826,
        36841: 58823,
        36842: 46543,
        36843: 50888,
        36845: 46588,
        36846: 58821,
        36848: 51958,
        36851: 58825,
        36855: 50132,
        36856: 45509,
        36857: 48291,
        36861: 55223,
        36864: 52683,
        36865: 52173,
        36866: 51914,
        36867: 52435,
        36868: 58828,
        36869: 58827,
        36870: 50406,
        36873: 53665,
        36874: 53687,
        36875: 58829,
        36877: 58832,
        36879: 52664,
        36880: 55024,
        36881: 58831,
        36882: 46557,
        36884: 52670,
        36886: 58833,
        36887: 46778,
        36890: 52648,
        36891: 47588,
        36893: 51909,
        36894: 46033,
        36895: 52185,
        36896: 54508,
        36897: 58834,
        36898: 47082,
        36902: 58830,
        36909: 58837,
        36910: 46334,
        36911: 58838,
        36917: 58835,
        36918: 58836,
        36920: 53981,
        36923: 49887,
        36924: 45510,
        36926: 54242,
        36929: 46813,
        36930: 52204,
        36932: 58839,
        36935: 54262,
        36941: 45545,
        36943: 46836,
        36944: 58842,
        36945: 58840,
        36946: 58841,
        36947: 46528,
        36951: 53957,
        36952: 58844,
        36955: 58846,
        36962: 58845,
        36963: 51122,
        36965: 53923,
        36968: 58843,
        36973: 54498,
        36974: 54746,
        36980: 58848,
        36981: 55281,
        36989: 58849,
        36991: 45532,
        36992: 53755,
        36994: 58850,
        36995: 58852,
        37e3: 58851,
        37003: 58853,
        37009: 53976,
        37011: 46539,
        37013: 59359,
        37015: 56053,
        37017: 56056,
        37019: 56054,
        37021: 56055,
        37025: 56058,
        37026: 53455,
        37027: 50375,
        37030: 45294,
        37034: 53424,
        37036: 56057,
        37038: 54218,
        37039: 47786,
        37040: 56226,
        37041: 51185,
        37043: 56060,
        37044: 56059,
        37045: 51675,
        37046: 56061,
        37048: 56225,
        37049: 55262,
        37050: 56062,
        37051: 49626,
        37054: 56229,
        37057: 54260,
        37060: 56231,
        37061: 56228,
        37063: 56232,
        37066: 48572,
        37070: 49353,
        37071: 56227,
        37072: 56230,
        37073: 54947,
        37075: 56233,
        37079: 56237,
        37083: 56238,
        37084: 56236,
        37085: 47810,
        37089: 49060,
        37090: 56235,
        37094: 56234,
        37095: 54471,
        37096: 45759,
        37099: 56239,
        37101: 47609,
        37103: 56240,
        37108: 46011,
        37112: 46502,
        37117: 46780,
        37118: 56241,
        37122: 46837,
        37124: 56242,
        37145: 45513,
        37150: 56244,
        37154: 56243,
        37155: 56245,
        37167: 56247,
        37169: 56246,
        37177: 56248,
        37187: 56249,
        37190: 56250,
        37193: 54223,
        37194: 62714,
        37195: 51189,
        37196: 55235,
        37197: 50660,
        37198: 62716,
        37199: 62717,
        37200: 62715,
        37202: 48838,
        37207: 53487,
        37210: 47059,
        37213: 54477,
        37214: 52394,
        37217: 62882,
        37218: 62881,
        37219: 47784,
        37220: 62718,
        37221: 52182,
        37225: 62884,
        37226: 49362,
        37228: 46058,
        37230: 52650,
        37231: 62885,
        37232: 62883,
        37233: 48564,
        37234: 62888,
        37236: 62889,
        37237: 48589,
        37238: 50104,
        37239: 49121,
        37240: 52193,
        37241: 62890,
        37245: 62886,
        37246: 62887,
        37247: 50416,
        37253: 62892,
        37255: 46268,
        37257: 55277,
        37259: 46295,
        37260: 62891,
        37261: 62894,
        37264: 62893,
        37265: 62895,
        37266: 53457,
        37274: 50129,
        37275: 51369,
        37282: 62896,
        37283: 62897,
        37290: 62898,
        37293: 62899,
        37294: 62900,
        37295: 62901,
        37300: 62903,
        37301: 62902,
        37306: 62904,
        37319: 45769,
        37321: 54228,
        37322: 51917,
        37324: 49391,
        37325: 55e3,
        37326: 53936,
        37327: 49599,
        37329: 48624,
        37340: 47274,
        37492: 48376,
        37518: 63174,
        37550: 63175,
        37576: 63176,
        37694: 63177,
        37738: 63178,
        37775: 63180,
        37834: 63179,
        37846: 63465,
        37950: 63181,
        37995: 63182,
        38021: 61124,
        38022: 61125,
        38023: 61126,
        38024: 54763,
        38025: 46756,
        38026: 61128,
        38027: 61127,
        38028: 61129,
        38029: 61130,
        38030: 51109,
        38031: 61131,
        38032: 61132,
        38034: 47024,
        38035: 46582,
        38036: 61133,
        38037: 61135,
        38039: 61134,
        38041: 47302,
        38042: 61136,
        38043: 61137,
        38044: 61138,
        38045: 46811,
        38046: 45998,
        38047: 54995,
        38048: 50374,
        38049: 45493,
        38050: 47318,
        38051: 61139,
        38052: 61140,
        38053: 54463,
        38054: 51157,
        38055: 48891,
        38056: 52953,
        38057: 47539,
        38058: 61142,
        38059: 61141,
        38060: 61144,
        38061: 61143,
        38062: 50597,
        38063: 61145,
        38064: 61146,
        38065: 51118,
        38066: 61147,
        38067: 51119,
        38068: 61148,
        38069: 45735,
        38070: 61149,
        38071: 61150,
        38072: 61151,
        38073: 61152,
        38074: 61153,
        38075: 55274,
        38076: 61154,
        38077: 61155,
        38078: 48344,
        38079: 61156,
        38080: 54219,
        38081: 52474,
        38082: 45740,
        38083: 49637,
        38084: 61157,
        38085: 51110,
        38086: 50093,
        38088: 61158,
        38089: 61159,
        38090: 61160,
        38091: 61161,
        38092: 61162,
        38093: 61163,
        38094: 61164,
        38096: 61165,
        38097: 61166,
        38098: 61167,
        38101: 61168,
        38102: 61169,
        38103: 61170,
        38104: 61172,
        38105: 61171,
        38107: 61173,
        38108: 52653,
        38109: 49857,
        38110: 61174,
        38111: 61175,
        38112: 61176,
        38113: 54689,
        38114: 61177,
        38115: 53171,
        38116: 61178,
        38117: 61179,
        38119: 61180,
        38120: 61181,
        38121: 61345,
        38122: 61182,
        38123: 61346,
        38124: 47349,
        38125: 50170,
        38126: 61347,
        38127: 61348,
        38128: 48578,
        38129: 53951,
        38130: 45817,
        38131: 61349,
        38132: 61350,
        38133: 61351,
        38134: 54008,
        38135: 61352,
        38136: 55037,
        38137: 61353,
        38138: 50892,
        38140: 61354,
        38141: 61355,
        38142: 49588,
        38143: 61356,
        38144: 53242,
        38145: 52216,
        38146: 61358,
        38147: 61357,
        38148: 46074,
        38149: 47608,
        38150: 61359,
        38151: 61360,
        38152: 53474,
        38153: 61361,
        38154: 61362,
        38155: 47078,
        38156: 53439,
        38157: 61363,
        38158: 61364,
        38159: 61365,
        38160: 51441,
        38161: 52448,
        38162: 61366,
        38163: 61367,
        38164: 61368,
        38165: 61369,
        38166: 61370,
        38167: 54752,
        38168: 61371,
        38169: 46317,
        38170: 50090,
        38171: 61372,
        38173: 61373,
        38174: 61374,
        38175: 61375,
        38177: 52989,
        38178: 61376,
        38179: 49888,
        38180: 46264,
        38181: 55222,
        38182: 48629,
        38184: 53191,
        38185: 61379,
        38186: 61377,
        38187: 61378,
        38188: 61380,
        38189: 46759,
        38190: 48380,
        38191: 48866,
        38192: 50124,
        38193: 61381,
        38194: 61382,
        38196: 61383,
        38197: 61391,
        38198: 61384,
        38199: 61385,
        38200: 61386,
        38201: 51138,
        38202: 61425,
        38203: 46797,
        38204: 61387,
        38206: 61388,
        38207: 61389,
        38208: 46790,
        38209: 50110,
        38210: 61390,
        38212: 61392,
        38213: 61393,
        38214: 61394,
        38215: 54770,
        38217: 61395,
        38218: 50423,
        38220: 61396,
        38221: 50424,
        38222: 61397,
        38223: 61398,
        38224: 47332,
        38225: 45303,
        38226: 61399,
        38227: 61400,
        38228: 61401,
        38230: 61402,
        38231: 61403,
        38232: 61404,
        38233: 61405,
        38235: 61406,
        38236: 48821,
        38237: 61409,
        38238: 61407,
        38239: 61408,
        38241: 61410,
        38242: 61411,
        38243: 49613,
        38244: 61412,
        38245: 61413,
        38246: 61414,
        38247: 61415,
        38248: 61416,
        38249: 61417,
        38250: 61418,
        38251: 61419,
        38252: 61420,
        38253: 49368,
        38255: 61421,
        38256: 49581,
        38257: 61422,
        38258: 61423,
        38259: 61424,
        38262: 53218,
        38271: 45988,
        38376: 50117,
        38377: 58309,
        38378: 51649,
        38379: 58310,
        38381: 45525,
        38382: 52938,
        38383: 46259,
        38384: 51442,
        38385: 58311,
        38386: 53200,
        38387: 58312,
        38388: 48356,
        38389: 58313,
        38390: 58314,
        38391: 50118,
        38392: 54690,
        38393: 50390,
        38394: 47595,
        38395: 52933,
        38396: 58315,
        38397: 50166,
        38398: 58316,
        38400: 47015,
        38401: 47347,
        38402: 47826,
        38403: 58317,
        38404: 58318,
        38405: 54468,
        38406: 58319,
        38408: 58320,
        38409: 53707,
        38410: 58321,
        38411: 58322,
        38412: 58323,
        38413: 58324,
        38414: 53718,
        38415: 58325,
        38416: 45819,
        38417: 49339,
        38418: 58326,
        38420: 49323,
        38421: 58327,
        38422: 58328,
        38423: 58329,
        38425: 58330,
        38426: 58331,
        38428: 47287,
        38429: 56034,
        38431: 46803,
        38433: 56036,
        38434: 56035,
        38442: 56038,
        38446: 51438,
        38449: 56037,
        38450: 47040,
        38451: 53748,
        38452: 54005,
        38453: 54771,
        38454: 48599,
        38459: 55272,
        38460: 56040,
        38461: 56039,
        38463: 45218,
        38464: 52691,
        38466: 56041,
        38468: 47293,
        38469: 48330,
        38470: 49853,
        38471: 49828,
        38472: 46018,
        38473: 56042,
        38475: 49834,
        38476: 50352,
        38477: 48565,
        38480: 53214,
        38484: 56043,
        38485: 51650,
        38491: 45533,
        38495: 56044,
        38497: 46776,
        38498: 54458,
        38500: 46077,
        38503: 56045,
        38504: 54473,
        38505: 53205,
        38506: 50659,
        38508: 56046,
        38514: 56047,
        38516: 56048,
        38517: 49642,
        38518: 52437,
        38519: 53213,
        38533: 54247,
        38534: 49825,
        38536: 56049,
        38539: 52197,
        38541: 56050,
        38543: 52198,
        38544: 54014,
        38548: 47348,
        38551: 56051,
        38552: 45231,
        38553: 53174,
        38556: 54735,
        38567: 52205,
        38576: 56052,
        38579: 58308,
        38582: 49573,
        38585: 63167,
        38588: 63168,
        38589: 63169,
        38590: 50385,
        38592: 51384,
        38593: 53731,
        38596: 53467,
        38597: 53701,
        38598: 48303,
        38599: 47565,
        38601: 61428,
        38604: 46278,
        38605: 54202,
        38606: 63170,
        38607: 46075,
        38610: 63171,
        38613: 46577,
        38624: 63173,
        38632: 54250,
        38633: 63143,
        38634: 53673,
        38639: 63145,
        38643: 63144,
        38646: 49635,
        38647: 49367,
        38649: 45474,
        38654: 52973,
        38656: 53480,
        38657: 63147,
        38660: 53238,
        38662: 63146,
        38663: 54768,
        38664: 63148,
        38665: 50105,
        38669: 48116,
        38670: 63150,
        38671: 63149,
        38675: 50398,
        38678: 49624,
        38684: 52138,
        38686: 53180,
        38698: 63151,
        38701: 63152,
        38704: 63153,
        38706: 49846,
        38712: 45268,
        38713: 50681,
        38718: 63154,
        38738: 51168,
        38739: 63142,
        38742: 48824,
        38745: 48818,
        38747: 46565,
        38750: 47047,
        38752: 49087,
        38753: 50130,
        38754: 50150,
        38757: 55500,
        38761: 47343,
        38771: 48633,
        38772: 53669,
        38774: 45264,
        38780: 63408,
        38789: 63409,
        38795: 53420,
        38797: 45232,
        38801: 63410,
        38802: 63411,
        38804: 63412,
        38808: 51146,
        38816: 48847,
        38819: 63415,
        38827: 63414,
        38829: 45534,
        38831: 63413,
        38834: 63416,
        38836: 63417,
        38886: 52900,
        38887: 51405,
        38889: 47787,
        38890: 59576,
        38891: 59577,
        38892: 59578,
        38893: 48834,
        38899: 54004,
        38901: 54479,
        38902: 51672,
        39029: 53939,
        39030: 46757,
        39031: 51178,
        39032: 61948,
        39033: 53230,
        39034: 52147,
        39035: 53483,
        39036: 59375,
        39037: 52711,
        39038: 47563,
        39039: 46809,
        39040: 61949,
        39041: 45284,
        39042: 52172,
        39043: 61950,
        39044: 54436,
        39045: 49837,
        39046: 49644,
        39047: 50884,
        39048: 48817,
        39049: 62113,
        39050: 48341,
        39052: 62114,
        39053: 62115,
        39055: 62116,
        39056: 53955,
        39057: 50869,
        39059: 52679,
        39060: 62117,
        39062: 54193,
        39063: 49093,
        39064: 52450,
        39066: 62118,
        39067: 62119,
        39068: 53717,
        39069: 46830,
        39070: 62120,
        39071: 62121,
        39072: 46559,
        39073: 62122,
        39074: 62123,
        39076: 45820,
        39077: 62124,
        39078: 62125,
        39079: 51367,
        39118: 47079,
        39121: 60585,
        39122: 60586,
        39123: 60587,
        39125: 60588,
        39128: 50862,
        39129: 60589,
        39130: 60590,
        39134: 47049,
        39135: 51891,
        39143: 58040,
        39144: 63439,
        39181: 63440,
        39184: 45773,
        39214: 63441,
        39252: 63443,
        39253: 63442,
        39267: 58043,
        39269: 48290,
        39271: 58044,
        39272: 58045,
        39273: 58046,
        39274: 58047,
        39275: 58048,
        39276: 58049,
        39277: 47033,
        39278: 54011,
        39279: 48548,
        39280: 51918,
        39281: 45477,
        39282: 52167,
        39284: 58050,
        39285: 46844,
        39286: 51396,
        39287: 58051,
        39290: 48584,
        39292: 45565,
        39293: 58052,
        39295: 46838,
        39296: 58053,
        39297: 50393,
        39300: 58054,
        39301: 53210,
        39302: 47581,
        39303: 58055,
        39304: 49313,
        39306: 58056,
        39307: 45814,
        39309: 58057,
        39311: 49651,
        39312: 58058,
        39313: 58059,
        39314: 49912,
        39315: 58060,
        39316: 58061,
        39317: 58062,
        39318: 51927,
        39319: 55480,
        39320: 55781,
        39321: 53219,
        39333: 61605,
        39336: 56496,
        39532: 49901,
        39533: 54438,
        39534: 52692,
        39535: 53681,
        39536: 46043,
        39537: 51197,
        39539: 45749,
        39540: 49855,
        39541: 59104,
        39542: 51899,
        39543: 59105,
        39544: 59106,
        39545: 48852,
        39546: 59107,
        39547: 55204,
        39548: 52693,
        39549: 59109,
        39550: 48349,
        39551: 59108,
        39552: 59110,
        39553: 59111,
        39554: 49902,
        39556: 48574,
        39557: 59112,
        39558: 49894,
        39559: 47783,
        39560: 59113,
        39562: 59114,
        39563: 46034,
        39564: 53737,
        39567: 49061,
        39568: 59115,
        39569: 50927,
        39570: 59116,
        39571: 59117,
        39574: 59118,
        39575: 50861,
        39576: 59119,
        39578: 51623,
        39579: 59120,
        39580: 59121,
        39581: 59122,
        39582: 58809,
        39583: 59123,
        39584: 59124,
        39585: 49890,
        39586: 59125,
        39587: 59126,
        39588: 55016,
        39589: 59127,
        39591: 59128,
        39592: 47559,
        39600: 63419,
        39601: 63418,
        39606: 63422,
        39607: 63420,
        39608: 47777,
        39610: 63423,
        39612: 63424,
        39616: 63426,
        39617: 63425,
        39618: 63428,
        39621: 63427,
        39627: 63429,
        39628: 63430,
        39633: 63431,
        39635: 52200,
        39640: 47327,
        39647: 63444,
        39649: 63445,
        39654: 63446,
        39659: 63448,
        39661: 63450,
        39663: 63447,
        39673: 63451,
        39675: 63449,
        39683: 55255,
        39688: 63452,
        39695: 63453,
        39699: 63454,
        39711: 63455,
        39715: 63456,
        39727: 56267,
        39730: 55466,
        39739: 58871,
        39740: 47597,
        39745: 49149,
        39746: 48106,
        39747: 63433,
        39748: 50887,
        39749: 63432,
        39751: 63434,
        39752: 63436,
        39753: 63435,
        39757: 63437,
        39759: 52922,
        39761: 63438,
        39764: 50343,
        40060: 54243,
        40063: 63183,
        40065: 49843,
        40066: 63184,
        40069: 63185,
        40070: 63186,
        40071: 63187,
        40072: 63188,
        40075: 63190,
        40077: 45483,
        40078: 63191,
        40080: 63192,
        40081: 63193,
        40082: 63194,
        40084: 63195,
        40085: 63196,
        40090: 63197,
        40091: 63198,
        40092: 53194,
        40094: 63199,
        40095: 63200,
        40096: 63201,
        40097: 63202,
        40098: 63203,
        40099: 63204,
        40100: 49392,
        40101: 63205,
        40102: 63206,
        40103: 63207,
        40104: 63208,
        40105: 63209,
        40107: 63210,
        40109: 63211,
        40110: 63212,
        40112: 63213,
        40113: 63214,
        40114: 63215,
        40115: 63216,
        40116: 63217,
        40117: 63218,
        40118: 63219,
        40119: 63220,
        40120: 48808,
        40122: 63221,
        40123: 63222,
        40124: 63223,
        40125: 63224,
        40131: 51450,
        40132: 63225,
        40133: 63226,
        40134: 63227,
        40135: 63228,
        40138: 63229,
        40139: 63230,
        40140: 63393,
        40141: 63394,
        40142: 63395,
        40143: 63396,
        40144: 63397,
        40147: 63398,
        40148: 63399,
        40149: 63400,
        40150: 45550,
        40151: 63401,
        40152: 63402,
        40153: 63403,
        40156: 63404,
        40157: 63405,
        40158: 49627,
        40159: 63406,
        40162: 63407,
        40479: 50417,
        40480: 61615,
        40481: 48294,
        40482: 61616,
        40483: 50169,
        40485: 50616,
        40486: 53691,
        40488: 61617,
        40489: 61618,
        40490: 61619,
        40491: 61620,
        40492: 61621,
        40493: 53692,
        40495: 53740,
        40497: 61623,
        40498: 61622,
        40499: 54439,
        40501: 52690,
        40502: 61624,
        40503: 61626,
        40504: 61625,
        40505: 61627,
        40506: 61628,
        40509: 47339,
        40510: 61629,
        40511: 47848,
        40513: 61630,
        40514: 61631,
        40515: 48873,
        40516: 61632,
        40517: 46828,
        40518: 61633,
        40519: 61634,
        40520: 61635,
        40521: 61636,
        40522: 51381,
        40523: 61637,
        40524: 61638,
        40526: 61639,
        40527: 50676,
        40529: 61640,
        40533: 61641,
        40535: 61642,
        40536: 63421,
        40538: 61643,
        40539: 61644,
        40540: 61645,
        40542: 61646,
        40547: 61647,
        40548: 47831,
        40550: 61648,
        40551: 61649,
        40552: 61650,
        40553: 61651,
        40554: 61652,
        40555: 61653,
        40556: 61654,
        40557: 61656,
        40560: 54181,
        40561: 61655,
        40563: 61657,
        40574: 62906,
        40575: 49849,
        40578: 63460,
        40583: 63461,
        40584: 63462,
        40587: 63463,
        40594: 63464,
        40595: 49844,
        40605: 63466,
        40607: 63467,
        40614: 49907,
        40628: 62704,
        40632: 62703,
        40635: 49897,
        40637: 63457,
        40638: 63458,
        40644: 48070,
        40649: 55780,
        40653: 51954,
        40654: 49384,
        40655: 61604,
        40657: 47834,
        40660: 51117,
        40664: 50348,
        40667: 63468,
        40668: 63469,
        40669: 63470,
        40671: 63472,
        40672: 63471,
        40674: 63473,
        40677: 63476,
        40679: 63475,
        40681: 63474,
        40682: 63477,
        40687: 63478,
        40697: 60905,
        40699: 60906,
        40700: 60907,
        40702: 63164,
        40715: 63165,
        40717: 63166,
        40718: 46758,
        40720: 55486,
        40723: 47556,
        40727: 55483,
        40729: 56497,
        40736: 51955,
        40738: 63479,
        40748: 63480,
        40751: 63481,
        40759: 63483,
        40761: 63482,
        40763: 45511,
        40765: 63484,
        40766: 63485,
        40772: 63486,
        40784: 50923,
        40785: 60596,
        40831: 46045,
        40832: 63155,
        40835: 63156,
        40836: 49636,
        40837: 63157,
        40838: 63158,
        40839: 63159,
        40840: 63160,
        40841: 63161,
        40842: 63162,
        40843: 51363,
        40844: 63163,
        40857: 49658,
        40858: 47528,
        40859: 60904,
        40863: 47594,
        40864: 55775,
        57424: 43761,
        57425: 43762,
        57426: 43763,
        57427: 43764,
        57428: 43765,
        57429: 43766,
        57430: 43767,
        57431: 43768,
        57432: 43769,
        57433: 43770,
        57434: 43771,
        57435: 43772,
        57436: 43773,
        57437: 43774,
        57438: 43937,
        57439: 43938,
        57440: 43939,
        57441: 43940,
        57442: 43941,
        57443: 43942,
        57444: 43943,
        57445: 43944,
        57446: 43945,
        57447: 43946,
        57448: 43947,
        57449: 43948,
        57450: 43949,
        57451: 43950,
        57452: 43951,
        57453: 43952,
        57454: 43953,
        57455: 43954,
        57456: 43955,
        57457: 43956,
        57458: 43957,
        57459: 43958,
        57460: 43959,
        57461: 43960,
        57462: 43961,
        57463: 43962,
        57464: 43963,
        57465: 43964,
        57466: 43965,
        57467: 43966,
        57468: 43967,
        57469: 43968,
        57470: 43969,
        57471: 43970,
        57472: 43971,
        57473: 43972,
        57474: 43973,
        57475: 43974,
        57476: 43975,
        57477: 43976,
        57478: 43977,
        57479: 43978,
        57480: 43979,
        57481: 43980,
        57482: 43981,
        57483: 43982,
        57484: 43983,
        57485: 43984,
        57486: 43985,
        57487: 43986,
        57488: 43987,
        57489: 43988,
        57490: 43989,
        57491: 43990,
        57492: 43991,
        57493: 43992,
        57494: 43993,
        57495: 43994,
        57496: 43995,
        57497: 43996,
        57498: 43997,
        57499: 43998,
        57500: 43999,
        57501: 44e3,
        57502: 44001,
        57503: 44002,
        57504: 44003,
        57505: 44004,
        57506: 44005,
        57507: 44006,
        57508: 44007,
        57509: 44008,
        57510: 44009,
        57511: 44010,
        57512: 44011,
        57513: 44012,
        57514: 44013,
        57515: 44014,
        57516: 44015,
        57517: 44016,
        57518: 44017,
        57519: 44018,
        57520: 44019,
        57521: 44020,
        57522: 44021,
        57523: 44022,
        57524: 44023,
        57525: 44024,
        57526: 44025,
        57527: 44026,
        57528: 44027,
        57529: 44028,
        57530: 44029,
        57531: 44030,
        57532: 44193,
        57533: 44194,
        57534: 44195,
        57535: 44196,
        57536: 44197,
        57537: 44198,
        57538: 44199,
        57539: 44200,
        57540: 44201,
        57541: 44202,
        57542: 44203,
        57543: 44204,
        57544: 44205,
        57545: 44206,
        57546: 44207,
        57547: 44208,
        57548: 44209,
        57549: 44210,
        57550: 44211,
        57551: 44212,
        57552: 44213,
        57553: 44214,
        57554: 44215,
        57555: 44216,
        57556: 44217,
        57557: 44218,
        57558: 44219,
        57559: 44220,
        57560: 44221,
        57561: 44222,
        57562: 44223,
        57563: 44224,
        57564: 44225,
        57565: 44226,
        57566: 44227,
        57567: 44228,
        57568: 44229,
        57569: 44230,
        57570: 44231,
        57571: 44232,
        57572: 44233,
        57573: 44234,
        57574: 44235,
        57575: 44236,
        57576: 44237,
        57577: 44238,
        57578: 44239,
        57579: 44240,
        57580: 44241,
        57581: 44242,
        57582: 44243,
        57583: 44244,
        57584: 44245,
        57585: 44246,
        57586: 44247,
        57587: 44248,
        57588: 44249,
        57589: 44250,
        57590: 44251,
        57591: 44252,
        57592: 44253,
        57593: 44254,
        57594: 44255,
        57595: 44256,
        57596: 44257,
        57597: 44258,
        57598: 44259,
        57599: 44260,
        57600: 44261,
        57601: 44262,
        57602: 44263,
        57603: 44264,
        57604: 44265,
        57605: 44266,
        57606: 44267,
        57607: 44268,
        57608: 44269,
        57609: 44270,
        57610: 44271,
        57611: 44272,
        57612: 44273,
        57613: 44274,
        57614: 44275,
        57615: 44276,
        57616: 44277,
        57617: 44278,
        57618: 44279,
        57619: 44280,
        57620: 44281,
        57621: 44282,
        57622: 44283,
        57623: 44284,
        57624: 44285,
        57625: 44286,
        57626: 44449,
        57627: 44450,
        57628: 44451,
        57629: 44452,
        57630: 44453,
        57631: 44454,
        57632: 44455,
        57633: 44456,
        57634: 44457,
        57635: 44458,
        57636: 44459,
        57637: 44460,
        57638: 44461,
        57639: 44462,
        57640: 44463,
        57641: 44464,
        57642: 44465,
        57643: 44466,
        57644: 44467,
        57645: 44468,
        57646: 44469,
        57647: 44470,
        57648: 44471,
        57649: 44472,
        57650: 44473,
        57651: 44474,
        57652: 44475,
        57653: 44476,
        57654: 44477,
        57655: 44478,
        57656: 44479,
        57657: 44480,
        57658: 44481,
        57659: 44482,
        57660: 44483,
        57661: 44484,
        57662: 44485,
        57663: 44486,
        57664: 44487,
        57665: 44488,
        57666: 44489,
        57667: 44490,
        57668: 44491,
        57669: 44492,
        57670: 44493,
        57671: 44494,
        57672: 44495,
        57673: 44496,
        57674: 44497,
        57675: 44498,
        57676: 44499,
        57677: 44500,
        57678: 44501,
        57679: 44502,
        57680: 44503,
        57681: 44504,
        57682: 44505,
        57683: 44506,
        57684: 44507,
        57685: 44508,
        57686: 44509,
        57687: 44510,
        57688: 44511,
        57689: 44512,
        57690: 44513,
        57691: 44514,
        57692: 44515,
        57693: 44516,
        57694: 44517,
        57695: 44518,
        57696: 44519,
        57697: 44520,
        57698: 44521,
        57699: 44522,
        57700: 44523,
        57701: 44524,
        57702: 44525,
        57703: 44526,
        57704: 44527,
        57705: 44528,
        57706: 44529,
        57707: 44530,
        57708: 44531,
        57709: 44532,
        57710: 44533,
        57711: 44534,
        57712: 44535,
        57713: 44536,
        57714: 44537,
        57715: 44538,
        57716: 44539,
        57717: 44540,
        57718: 44541,
        57719: 44542,
        57720: 44705,
        57721: 44706,
        57722: 44707,
        57723: 44708,
        57724: 44709,
        57725: 44710,
        57726: 44711,
        57727: 44712,
        57728: 44713,
        57729: 44714,
        57730: 44715,
        57731: 44716,
        57732: 44717,
        57733: 44718,
        57734: 44719,
        57735: 44720,
        57736: 44721,
        57737: 44722,
        57738: 44723,
        57739: 44724,
        57740: 44725,
        57741: 44726,
        57742: 44727,
        57743: 44728,
        57744: 44729,
        57745: 44730,
        57746: 44731,
        57747: 44732,
        57748: 44733,
        57749: 44734,
        57750: 44735,
        57751: 44736,
        57752: 44737,
        57753: 44738,
        57754: 44739,
        57755: 44740,
        57756: 44741,
        57757: 44742,
        57758: 44743,
        57759: 44744,
        57760: 44745,
        57761: 44746,
        57762: 44747,
        57763: 44748,
        57764: 44749,
        57765: 44750,
        57766: 44751,
        57767: 44752,
        57768: 44753,
        57769: 44754,
        57770: 44755,
        57771: 44756,
        57772: 44757,
        57773: 44758,
        57774: 44759,
        57775: 44760,
        57776: 44761,
        57777: 44762,
        57778: 44763,
        57779: 44764,
        57780: 44765,
        57781: 44766,
        57782: 44767,
        57783: 44768,
        57784: 44769,
        57785: 44770,
        57786: 44771,
        57787: 44772,
        57788: 44773,
        57789: 44774,
        57790: 44775,
        57791: 44776,
        57792: 44777,
        57793: 44778,
        57794: 44779,
        57795: 44780,
        57796: 44781,
        57797: 44782,
        57798: 44783,
        57799: 44784,
        57800: 44785,
        57801: 44786,
        57802: 44787,
        57803: 44788,
        57804: 44789,
        57805: 44790,
        57806: 44791,
        57807: 44792,
        57808: 44793,
        57809: 44794,
        57810: 44795,
        57811: 44796,
        57812: 44797,
        57813: 44798,
        57814: 44961,
        57815: 44962,
        57816: 44963,
        57817: 44964,
        57818: 44965,
        57819: 44966,
        57820: 44967,
        57821: 44968,
        57822: 44969,
        57823: 44970,
        57824: 44971,
        57825: 44972,
        57826: 44973,
        57827: 44974,
        57828: 44975,
        57829: 44976,
        57830: 44977,
        57831: 44978,
        57832: 44979,
        57833: 44980,
        57834: 44981,
        57835: 44982,
        57836: 44983,
        57837: 44984,
        57838: 44985,
        59335: 43196,
        59336: 43199,
        65073: 42738,
        65075: 42740,
        65076: 42741,
        65077: 42720,
        65078: 42721,
        65079: 42736,
        65080: 42737,
        65081: 42722,
        65082: 42723,
        65083: 42734,
        65084: 42735,
        65085: 42726,
        65086: 42727,
        65087: 42724,
        65088: 42725,
        65089: 42728,
        65090: 42729,
        65091: 42730,
        65092: 42731,
        65281: 41889,
        65282: 41890,
        65283: 41891,
        65284: 41447,
        65285: 41893,
        65286: 41894,
        65287: 41895,
        65288: 41896,
        65289: 41897,
        65290: 41898,
        65291: 41899,
        65292: 41900,
        65293: 41901,
        65294: 41902,
        65295: 41903,
        65296: 41904,
        65297: 41905,
        65298: 41906,
        65299: 41907,
        65300: 41908,
        65301: 41909,
        65302: 41910,
        65303: 41911,
        65304: 41912,
        65305: 41913,
        65306: 41914,
        65307: 41915,
        65308: 41916,
        65309: 41917,
        65310: 41918,
        65311: 41919,
        65312: 41920,
        65313: 41921,
        65314: 41922,
        65315: 41923,
        65316: 41924,
        65317: 41925,
        65318: 41926,
        65319: 41927,
        65320: 41928,
        65321: 41929,
        65322: 41930,
        65323: 41931,
        65324: 41932,
        65325: 41933,
        65326: 41934,
        65327: 41935,
        65328: 41936,
        65329: 41937,
        65330: 41938,
        65331: 41939,
        65332: 41940,
        65333: 41941,
        65334: 41942,
        65335: 41943,
        65336: 41944,
        65337: 41945,
        65338: 41946,
        65339: 41947,
        65340: 41948,
        65341: 41949,
        65342: 41950,
        65343: 41951,
        65344: 41952,
        65345: 41953,
        65346: 41954,
        65347: 41955,
        65348: 41956,
        65349: 41957,
        65350: 41958,
        65351: 41959,
        65352: 41960,
        65353: 41961,
        65354: 41962,
        65355: 41963,
        65356: 41964,
        65357: 41965,
        65358: 41966,
        65359: 41967,
        65360: 41968,
        65361: 41969,
        65362: 41970,
        65363: 41971,
        65364: 41972,
        65365: 41973,
        65366: 41974,
        65367: 41975,
        65368: 41976,
        65369: 41977,
        65370: 41978,
        65371: 41979,
        65372: 41980,
        65373: 41981,
        65374: 41387,
        65504: 41449,
        65505: 41450,
        65507: 41982,
        65509: 41892
      };
      function str_bytes(str) {
        var bytes = new Array();
        var len, c;
        len = str.length;
        for (var i = 0; i < len; i++) {
          c = str.charCodeAt(i);
          if (c >= 65536 && c <= 1114111) {
            bytes.push(c >> 18 & 7 | 240);
            bytes.push(c >> 12 & 63 | 128);
            bytes.push(c >> 6 & 63 | 128);
            bytes.push(c & 63 | 128);
          } else if (c >= 2048 && c <= 65535) {
            bytes.push(c >> 12 & 15 | 224);
            bytes.push(c >> 6 & 63 | 128);
            bytes.push(c & 63 | 128);
          } else if (c >= 128 && c <= 2047) {
            bytes.push(c >> 6 & 31 | 192);
            bytes.push(c & 63 | 128);
          } else {
            bytes.push(c & 255);
          }
        }
        var ret = Uint8Array.from(bytes);
        return ret;
      }
      exports.str_bytes = str_bytes;
      function bytes_str(arr) {
        var str = "", _arr = arr;
        for (var i = 0; i < _arr.length; i++) {
          var one = _arr[i].toString(2);
          var v = one.match(/^1+?(?=0)/);
          if (v && one.length == 8) {
            var bytesLength = v[0].length;
            var store = _arr[i].toString(2).slice(7 - bytesLength);
            for (var st = 1; st < bytesLength; st++) {
              store += _arr[st + i].toString(2).slice(2);
            }
            str += String.fromCharCode(parseInt(store, 2));
            i += bytesLength - 1;
          } else {
            str += String.fromCharCode(_arr[i]);
          }
        }
        return str;
      }
      exports.bytes_str = bytes_str;
      function str_bytes_uni(src) {
        var ret = [];
        for (var i = 0; i < src.length; i++) {
          var c = src.charCodeAt(i);
          ret.push(c >> 8 & 255);
          ret.push(c & 255);
        }
        return ret;
      }
      exports.str_bytes_uni = str_bytes_uni;
      function utf8_bytes_gb(src) {
        var ret = [];
        for (var i = 0; i < src.length; i++) {
          var c = src.charCodeAt(i);
          if (c < 128) {
            ret.push(c);
            continue;
          }
          var gbKey = code_table[c];
          if (gbKey) {
            ret.push(gbKey >> 8);
            ret.push(gbKey & 255);
          }
        }
        return Uint8Array.from(ret);
      }
      exports.utf8_bytes_gb = utf8_bytes_gb;
    }
  });

  // parse_ack.js
  var require_parse_ack = __commonJS({
    "parse_ack.js"(exports) {
      "use strict";
      var import_bytes_deal = __toESM(require_bytes_deal());
      var LED_Head_TLV = 21930;
      var TYPE_CMD_TLV_Set = 2;
      var TYPE_CMD_TLV_Get = 3;
      var TYPE_CMD_TLV_Upgrade = 4;
      var TYPE_CMD_TLV_Ack = 128;
      var TYPE_UPLOAD = 6;
      var TYPE_UPLOAD_GAME_Info = 10;
      var TLV_LED_Power = 4;
      var TLV_LED_Light = 6;
      var TLV_LED_Dev_Info = 10;
      var TLV_LED_param_io = 23;
      var TLV_LED_Advance = 27;
      var TLV_LED_pgm_flicker = 45;
      var TLV_LED_Rotate = 47;
      var TLV_LED_Ani_num = 51;
      var TLV_LED_bluetooth = 52;
      var TLV_LED_pgm_key = 53;
      var TLV_LED_pgm_play = 54;
      var TLV_LED_pwd = 55;
      var TLV_LED_global_ani = 56;
      var TLV_LED_channel_color = 57;
      var TLV_LED_mirror = 58;
      var TLV_LED_sensor = 62;
      var ACK_TLV_ERR_Unknown = 255;
      var Size_Min_Ack_Pkt_Tlv = 10;
      var Size_Min_Ack_Get_Pkt_Tlv = 13;
      function Uint8Array_to_str(src, offset, len) {
        var dataString = "";
        for (var i = offset; i < len; i++) {
          dataString += String.fromCharCode(src[i]);
        }
        return dataString;
      }
      function read_power(buf, len) {
        var type = buf[0];
        if (len < 2 || 0 != type && type * 5 + 1 != len) {
          console.error("read_power: tlv data err!\n");
          return null;
        }
        if (type > 0) {
          var weeks = buf[1];
          var week = [];
          for (var i = 0; i < 7; ++i) {
            if ((weeks & 1 << i) > 0)
              week.push(i + 1);
          }
          var period = [];
          var pos = 2;
          for (var i = 0; i < type; ++i) {
            period.push(("0" + buf[pos]).substr(-2) + ":" + ("0" + buf[pos + 1]).substr(-2) + "-" + ("0" + buf[pos + 2]).substr(-2) + ":" + ("0" + buf[pos + 3]).substr(-2));
            pos += 5;
          }
          return { power: { type: 2, week, period } };
        } else
          return { power: { type: buf[1] } };
      }
      function read_light(buf, len) {
        var type = buf[0];
        if (len < 2 || 0 != type && type * 3 + 1 != len) {
          console.error("read_light: tlv data err\n");
          return null;
        }
        if (type == 0) {
          return { light: { type: 0, value_fix: buf[1] } };
        } else {
          var pos = 1;
          var period = [];
          for (var i = 0; i < type; i++) {
            period.push({
              value: buf[pos],
              time: ("0" + buf[pos + 1]).substr(-2) + ":" + ("0" + buf[pos + 2]).substr(-2)
            });
            pos += 3;
          }
          return { light: { type: 1, value_period: period } };
        }
      }
      function read_param_dev_ex(buf, len) {
        var type = buf[0];
        if (len < 5 || 0 == type && len < 16) {
          console.error("read_param_dev_ex: tlv data err\n");
          return null;
        }
        var w = import_bytes_deal.bytes_read_int(buf, 1, 2, false);
        var h = import_bytes_deal.bytes_read_int(buf, 3, 2, false);
        if (0 == type) {
          var type_color = buf[7];
          if (type_color < 1)
            type_color = 1;
          var gray = buf[8] - 1;
          var typeScan = buf[9];
          var count_io = len - 16;
          var decoder = 0;
          var polar_nodecoder = 0;
          if (typeScan >= 128) {
            decoder = 0;
            typeScan = 255 - typeScan + 128;
          } else if (typeScan > 21) {
            typeScan -= 21;
            var h1 = typeScan >> 4;
            var l = typeScan & 15;
            typeScan = (l << 4) + (l == 0 ? h1 : h1 + 1);
            decoder = 1;
          } else if (typeScan > 16) {
            typeScan -= 16;
            typeScan = typeScan << 4 & 255;
            polar_nodecoder = buf[10];
          } else {
            decoder = 1;
            typeScan = typeScan << 4 & 255;
          }
          var data_out = [];
          for (var i = 0; i < count_io; ++i)
            data_out.push(buf[16 + i]);
          return {
            param_dev: {
              width: w,
              height: h,
              polar_data: buf[5],
              polar_oe: buf[6],
              type_color,
              gray,
              decoder,
              type_scan: typeScan,
              polar_nodecoder,
              line_bank: buf[11],
              segment: buf[12],
              delay_frame: buf[13],
              rate_frame: buf[14],
              backgroup: buf[15],
              count_io,
              data_out
            }
          };
        } else
          return { param_dev: { width: w, height: h } };
      }
      function read_dev_info(buf) {
        var data = "";
        for (var i = 0; i < buf.length; i++)
          data += String.fromCharCode(buf[i]);
        var arr = data.split(",");
        if (arr.length == 5)
          return { dev_info: {
            id_dev: arr[0],
            version: arr[1] + "_" + arr[2],
            model: arr[3],
            expend: arr[4]
          } };
        else if (arr.length > 5) {
          var diy = "";
          var other = [];
          if (arr.length > 6) {
            var last = arr[arr.length - 1];
            if (last.substr(last.length - 1, 1) == "]") {
              diy = last;
              if (arr.length > 7)
                other = arr.slice(6, arr.length - 7);
            } else
              other = arr.slice(6);
          }
          return { dev_info: {
            id_dev: arr[0],
            version: arr[1] + "_" + arr[2],
            model: arr[3],
            expend: arr[4],
            cid: arr[5],
            other,
            diy
          } };
        } else
          return { dev_info: {
            id_dev: arr[0],
            version: arr[1] + "_" + arr[2],
            model: arr[3]
          } };
      }
      function get_arr_int_from_bit(buf, offset, len_val) {
        var ret = [];
        for (var i = 0; i < len_val; ++i) {
          if (buf[i + offset] == 0)
            continue;
          for (var j = 0; j < 8; ++j) {
            var bit = buf[i + offset] >> j & 1;
            if (1 == bit) {
              var val = i * 8 + j;
              ret.push(val);
            }
          }
        }
        return ret;
      }
      function read_io_bind(buf, len) {
        if (len <= 0)
          return { param_io: null };
        var ntype = buf[0];
        switch (ntype) {
          case 0:
          case 1:
            if (len != 5) {
              console.error("read_io_bind fail as len uncatch", buf);
              return null;
            }
            var ids_io = get_arr_int_from_bit(buf, 1, 4);
            return { param_io: { type: 0, polar: 0, ids_io } };
          case 2:
          case 3:
            console.error("unsurpport!");
            return null;
          case 4:
            var id = buf[1];
            var times = [];
            for (var i = 0; i < len - 4; i += 2) {
              var t = import_bytes_deal.bytes_read_int(buf, 3 + i, 2, false);
              times.push(t);
            }
            return { param_io: { type: 4, id, times } };
          case 5:
            var id = buf[1];
            var polar = buf[2];
            var idx_time = buf[3];
            var time_last = import_bytes_deal.bytes_read_int(buf, 4, 2, false);
            return { param_io: { type: 5, id, polar, idx_time, time_remaining: time_last } };
          default:
            return { param_io: null };
        }
      }
      function read_pgm_flicker(buf) {
        if (buf.length != 6) {
          console.error("invalid pgm_flicker", buf);
          return null;
        }
        var ms = import_bytes_deal.bytes_read_int(buf, 2, 4, false);
        return { pgm_flicker: {
          type: buf[0],
          count_pgm: buf[1],
          time: ms
        } };
      }
      function read_ani_num(buf, len) {
        if (len < 2) {
          console.error("read_ani_num failed: invalid data", buf);
          return { ani_num: null };
        }
        var ntype = buf[0];
        switch (ntype) {
          case 0:
            if (len >= 7) {
              var color = import_bytes_deal.bytes_read_int(buf, 4, 3);
              return { ani_num: { type: 0, fmt: buf[1], fmt_data: { clock: buf[2], date: buf[3], color } } };
            } else
              return { ani_num: { type: 0, fmt: buf[1] } };
          case 1: {
            if (len == 5)
              return { ani_num: { type: 1, fmt: buf[1], h: buf[2], m: buf[3], s: buf[4] } };
            break;
          }
          case 2:
            return { ani_num: { type: 2, fmt: buf[1] } };
          case 3: {
            if (len == 6) {
              var score_r = import_bytes_deal.bytes_read_int(buf, 2, 2);
              var score_b = import_bytes_deal.bytes_read_int(buf, 4, 2);
              return { ani_num: { type: 3, fmt: buf[1], score_r, score_b } };
            }
            break;
          }
          case 4:
            return { ani_num: { type: 4, style: buf[1] } };
          case 5: {
            if (buf[1] == 0) {
              if (len >= 4) {
                var count = Math.floor((len - 4) / 4);
                if (count == 0)
                  return { ani_num: { type: 5, style_light: 0, style_val: buf[2], speed: buf[3] } };
                else {
                  var arr = [];
                  for (var i = 0; i < count; i++)
                    arr.push(import_bytes_deal.bytes_read_int(buf, 4 + 3 * i, 3));
                  return { ani_num: { type: 5, style_light: 0, style_val: buf[2], speed: buf[3], arr_color: arr } };
                }
              }
            } else if (len == 6) {
              var c = import_bytes_deal.bytes_read_int(buf, 3, 3);
              return { ani_num: { type: 5, style_light: 1, style_val: buf[2], color: c } };
            }
          }
        }
        console.error("read_ani_num failed: unkonwn data", buf);
        return { ani_num: null };
      }
      function read_sensor(buf, len) {
        if (len < 2) {
          console.error("read_ani_num failed: invalid data", buf);
          return { sensor: null };
        }
        var ntype = buf[0];
        switch (ntype) {
          case 0:
            return { sensor: { type: 0, val: buf[1] } };
        }
        console.error("read_sensor failed: unkonwn data", buf);
        return { sensor: null };
      }
      function get_telecontrol_model(b1, b2) {
        if (b1 == 170) {
          if (b2 == 188)
            return 0;
          if (b2 == 187)
            return 1;
          if (b2 == 191)
            return 2;
          if (b2 == 189)
            return 16;
        } else if (b1 == 42 && b2 == 190)
          return 32;
        return 255;
      }
      function read_telecontrol_btn(buf, len, model) {
        if (len - 4 != buf[3] * 4)
          return { telecontrol: null };
        if (model < 0)
          model = get_telecontrol_model(buf[1], buf[2]);
        var keys = [];
        for (var i = 0; i < buf[3]; i++) {
          var item = { index: 0, delay: 0, val: 0, id_pro: 0, reset: 0, id_item: -1, play_model: -1, play_value: -1 };
          var offset = 4 + i * 4;
          item["index"] = buf[offset] & 63;
          if ((buf[offset] & 192) == 192)
            item["delay"] = 1;
          item["val"] = buf[offset + 1];
          if (item["val"] == 2) {
            item["id_pro"] = buf[offset + 2] + 1;
            var val = buf[offset + 3];
            item["reset"] = (val & 32) == 32 ? 1 : 0;
            var play_model = (val >> 6) - 1;
            if (play_model != 3) {
              if (play_model == 0)
                item["id_item"] = val & 7;
              else {
                var val_1 = val & 31;
                item["play_model"] = play_model - 1;
                item["play_value"] = val_1 >= 31 ? -1 : val_1;
              }
            }
          }
          keys.push(item);
        }
        return { telecontrol: { model, keys, type: 0 } };
      }
      function read_telecontrol(buf, len) {
        var ntype = buf[0];
        var model = get_telecontrol_model(buf[1], buf[2]);
        if (ntype == 2) {
          return read_telecontrol_btn(buf, len, model);
        } else if (ntype == 4) {
          var state = buf[3];
          var mac = "";
          if (state == 2 && len >= 4 + 6)
            mac = import_bytes_deal.bytes_to_hex(buf.slice(4, 10), "");
          return { telecontrol: { model, bind_state: state, type: 2, bind_mac: mac } };
        }
        return { telecontrol: null };
      }
      function read_bluetooth(buf, len) {
        if (len == 0)
          return { cmd: "failed", errcode: 111 };
        else if (len == 2) {
          if (buf[0] == 0)
            return { bluetooth: { type: buf[0], val: buf[1] } };
          if (buf[0] == 1)
            return { power_model: buf[1] };
        }
        if (buf[0] >= 2 && buf[0] <= 4 && len >= 4)
          return read_telecontrol(buf, len);
        else
          return { bluetooth: null };
      }
      function read_pgm_key(buf, len) {
        if (len < 21) {
          if (len == 4) {
            var ts = import_bytes_deal.bytes_read_int(buf, 0, 4);
            return { pgm_key: { ts_update: ts } };
          }
          return { pgm_key: [] };
        }
        var index = 0;
        var arr_pgm = [];
        while (index <= len - 21) {
          var key_buf = buf.slice(index + 1, index + 21);
          var strkey = import_bytes_deal.bytes_to_hex(key_buf, "");
          var item = { id_pro: buf[index] + 1, key: strkey };
          arr_pgm.push(item);
          index += 21;
        }
        return { pgm_key: arr_pgm };
      }
      function read_pgm_play(buf, len) {
        if (len < 2)
          return { pgm_play: null };
        var arr = [];
        for (var i = 2; i < len; i++)
          arr.push(buf[i] + 1);
        return { pgm_play: { model: buf[0], index: buf[1], ids_pro: arr } };
      }
      function read_pwd(buf, len) {
        var ntype = buf[0];
        if (ntype == 2 || ntype == 3)
          return { pwd: { type: ntype } };
        else {
          var pwd = Uint8Array_to_str(buf, 1, len - 1);
          return { pwd: { type: 1, val: pwd } };
        }
      }
      function read_global_ani(buf, len) {
        if (len <= 1)
          return { global_ani: { type: 255 } };
        var gtype = buf[0];
        var ret = { global_ani: {} };
        var ga = ret.global_ani;
        if ((gtype & 1) == 1) {
          if (buf[1] == 0)
            ga.type = 1;
          else {
            ga.type = 0;
            ga.val = buf[1];
          }
        }
        if (len > 2) {
          if ((gtype & 2) == 2)
            ga.speed = buf[2];
          if (len >= 3 && (gtype & 4) == 4)
            ga.time_stay = buf[3];
        }
        return ret;
      }
      function read_channel_color(buf, len) {
        var ntype = buf[0];
        var arr = [];
        for (var i = 1; i < len; i++)
          arr.push(buf[i]);
        return { channel_color: { type: ntype, arr_color: arr } };
      }
      function read_param(tag, buf, len) {
        switch (tag) {
          case TLV_LED_Advance:
            return read_param_dev_ex(buf, len);
          case TLV_LED_Power:
            return read_power(buf, len);
          case TLV_LED_Light:
            return read_light(buf, len);
          case TLV_LED_Dev_Info:
            return read_dev_info(buf);
          case TLV_LED_param_io:
            return read_io_bind(buf, len);
          case TLV_LED_pgm_flicker:
            return read_pgm_flicker(buf);
          case TLV_LED_Rotate:
            return { rotate: buf[0] * 90 };
          case TLV_LED_Ani_num:
            return read_ani_num(buf, len);
          case TLV_LED_bluetooth:
            return read_bluetooth(buf, len);
          case TLV_LED_pgm_key:
            return read_pgm_key(buf, len);
          case TLV_LED_pgm_play:
            return read_pgm_play(buf, len);
          case TLV_LED_pwd:
            return read_pwd(buf, len);
          case TLV_LED_global_ani:
            return read_global_ani(buf, len);
          case TLV_LED_channel_color:
            return read_channel_color(buf, len);
          case TLV_LED_mirror:
            return { mirror: buf[0] };
          case TLV_LED_sensor:
            return read_sensor(buf, len);
          default:
            return null;
        }
      }
      exports.read_param = read_param;
      function is_head(item, index, buf) {
        return index < buf.length - 2 && item == 170 && buf[index + 1] == 85;
      }
      function check_cs(buf, offset, len) {
        var cs_0 = import_bytes_deal.bytes_read_int(buf, offset + len - 2, 2, false);
        var cs = 0;
        for (var i = 0; i < len - 2; i++)
          cs += buf[offset + i];
        cs = cs & 65535;
        return cs == cs_0;
      }
      function get_ack_pkg_info(buf) {
        var npos = 0;
        var state = -1;
        var pos_h = 0;
        var pos_h_ex = 0;
        var len_pkt = 0;
        while (npos < buf.length) {
          var tmp = buf.slice(npos, buf.length);
          if (buf.length < Size_Min_Ack_Pkt_Tlv)
            break;
          pos_h = tmp.findIndex(is_head);
          if (pos_h < 0)
            break;
          state = 1;
          pos_h_ex = npos + pos_h;
          len_pkt = import_bytes_deal.bytes_read_int(tmp, pos_h + 4, 2, false) + 6;
          if (len_pkt <= tmp.length) {
            if ((tmp[pos_h + 8] & 128) == 128) {
              if (check_cs(tmp, pos_h, len_pkt)) {
                state = 0;
                break;
              }
            } else {
              state = 0;
              break;
            }
          }
          npos = pos_h_ex + 2;
        }
        if (state == -1 && buf.length > 0 && buf[buf.length - 1] == 170) {
          pos_h_ex = buf.length - 1;
          state = 2;
        }
        return { state, pos_h: pos_h_ex, len_pkt };
      }
      function tlv_get_len(buf, offset) {
        if (buf[offset] == 129)
          return { len: buf[offset + 1], len_len: 2 };
        if (buf[offset] == 130)
          return { len: import_bytes_deal.bytes_read_int(buf, offset, 2, false), len_len: 3 };
        return { len: buf[offset], len_len: 1 };
      }
      function deal_rev_data(buf) {
        var sno = import_bytes_deal.bytes_read_int(buf, 6, 2, false);
        var bChecksum = buf[8] >> 7 == 1 && buf.length >= 12;
        var len_cs = bChecksum ? 2 : 0;
        var ret = null;
        if (Size_Min_Ack_Pkt_Tlv == buf.length)
          ret = { cmd: "failed", "errcode": ACK_TLV_ERR_Unknown };
        else if (buf[9] == TYPE_CMD_TLV_Ack + TYPE_CMD_TLV_Set || buf[9] == TYPE_CMD_TLV_Ack + TYPE_CMD_TLV_Upgrade) {
          if (0 == buf[10])
            ret = { cmd: "ok" };
          else
            ret = { cmd: "failed", "errcode": buf[10] };
        } else if (buf[9] == TYPE_CMD_TLV_Ack + TYPE_CMD_TLV_Get) {
          if (Size_Min_Ack_Pkt_Tlv == buf.length)
            ret = { cmd: "failed", "errcode": ACK_TLV_ERR_Unknown };
          else if (buf.length >= Size_Min_Ack_Get_Pkt_Tlv) {
            var tlvlen = tlv_get_len(buf, 11);
            if (tlvlen.len + tlvlen.len_len <= buf.length - 11 - len_cs)
              ret = read_param(buf[10], buf.slice(11 + tlvlen.len_len, 11 + tlvlen.len_len + tlvlen.len), tlvlen.len);
          }
        } else if (buf[9] == TYPE_UPLOAD) {
          var tlvlen = tlv_get_len(buf, 11);
          if (tlvlen.len + tlvlen.len_len <= buf.length - 11 - len_cs) {
            if (buf[10] == TYPE_UPLOAD_GAME_Info) {
              if (buf[11] != 5)
                return { upload: { game_info: null } };
              var id = buf[12] - 128;
              var score = import_bytes_deal.bytes_read_int(buf, 13, 4);
              return { upload: { game_info: { id, score } }, sno };
            } else if (buf[10] == TLV_LED_pgm_play) {
              ret = read_pgm_play(buf.slice(11 + tlvlen.len_len, 11 + tlvlen.len_len + tlvlen.len), tlvlen.len);
              return { upload: ret, sno };
            } else {
              ret = read_param(buf[10], buf.slice(11 + tlvlen.len_len, 11 + tlvlen.len_len + tlvlen.len), tlvlen.len);
              return { upload: ret, sno };
            }
          }
        }
        return { ack: ret, sno };
      }
      function parse_ack_ex2(buf) {
        var pkt_info = get_ack_pkg_info(buf);
        if (pkt_info.state == 0) {
          var rev = deal_rev_data(buf.slice(pkt_info.pos_h, pkt_info.pos_h + pkt_info.len_pkt));
          return { pkt_info, data: rev };
        }
        return { pkt_info };
      }
      exports.parse_ack_ex = parse_ack_ex2;
      function parse_ack2(buf) {
        var len = buf.length;
        if (len < Size_Min_Ack_Pkt_Tlv)
          return null;
        if (import_bytes_deal.bytes_read_int(buf, 0, 2, false) != LED_Head_TLV)
          return null;
        var len_data_0 = import_bytes_deal.bytes_read_int(buf, 4, 2, false);
        if (len_data_0 > len - 6)
          return null;
        return deal_rev_data(buf);
      }
      exports.parse_ack = parse_ack2;
    }
  });

  // parse_data.js
  var require_parse_data = __commonJS({
    "parse_data.js"(exports) {
      "use strict";
      var import_bytes_deal = __toESM(require_bytes_deal());
      var import_code_convert = __toESM(require_code_convert());
      var LED_Head_TLV = 21930;
      var TYPE_CMD_TLV_Set = 2;
      var TYPE_CMD_TLV_Get = 3;
      var TYPE_CMD_TLV_Upgrade = 4;
      var TLV_LED_Power = 4;
      var TLV_LED_Timing = 5;
      var TLV_LED_Light = 6;
      var TLV_LED_Delete = 8;
      var TLV_LED_Dev_Info = 10;
      var TLV_LED_Advance = 27;
      var TLV_LED_Property_Pkt = 18;
      var TLV_LED_Pkt = 19;
      var TLV_LED_param_io = 23;
      var TLV_LED_Dispatch_pgm = 24;
      var TLV_LED_Update_param = 38;
      var TLV_LED_Cancel_Play_list = 39;
      var TLV_LED_Show_dev = 41;
      var TLV_LED_Pgm_flicker = 45;
      var TLV_LED_Rotate = 47;
      var TLV_LED_Game = 48;
      var TLV_LED_RTDraw = 50;
      var TLV_LED_Ani_num = 51;
      var TLV_LED_bluetooth = 52;
      var TLV_LED_pgm_key = 53;
      var TLV_LED_pgm_play = 54;
      var TLV_LED_pwd = 55;
      var TLV_LED_global_ani = 56;
      var TLV_LED_channel_color = 57;
      var TLV_LED_mirror = 58;
      var TLV_LED_sensor = 62;
      var TLV_LED_devinfo_ex = 63;
      var TLV_LED_Data_Save = 9;
      var TLV_LED_ID_Program = 12;
      var TLV_LED_ID_Region = 13;
      var TLV_LED_ID_Item = 14;
      var TLV_LED_Property_Item = 17;
      var TLV_LED_Animate = 20;
      var TLV_LED_Border = 21;
      var TLV_LED_Period = 22;
      var TLV_LED_RTShow = 25;
      var TLV_LED_Property_Pro_ex = 28;
      var TLV_LED_Property_Reg_ex = 29;
      var TLV_TYPE_Res_Item = 0;
      var TLV_TYPE_Res_Upgrade = 1;
      var TLV_TYPE_Res_Play_List = 3;
      var TLV_TYPE_Res_Play_List2 = 6;
      var ITEM_TLV_Text = 6;
      var ITEM_TLV_Text_ex = 9;
      var ITEM_TLV_Gif_src = 10;
      var ITEM_TLV_res_color = 11;
      var TLV_LED_Text_color = 0;
      var TLV_LED_Text_space = 4;
      var TLV_LED_Text_time_target = 5;
      var TLV_LED_Text_ver = 6;
      var TLV_LED_Text_ver_ex = 7;
      var TLV_LED_Ver_text_clock_year = 0;
      var TLV_LED_Ver_text_clock_month = 1;
      var TLV_LED_Ver_text_clock_day = 2;
      var TLV_LED_Ver_text_clock_hour = 3;
      var TLV_LED_Ver_text_clock_min = 4;
      var TLV_LED_Ver_text_clock_sec = 5;
      var TLV_LED_Ver_text_clock_week = 6;
      var TLV_LED_Ver_text_timing_day = 8;
      var TLV_LED_Ver_text_timing_hour = 9;
      var TLV_LED_Ver_text_timing_min = 10;
      var TLV_LED_Ver_text_timing_sec = 11;
      var TLV_LED_Ver_text_temp = 12;
      var TLV_LED_Ver_text_humid = 13;
      var TLV_LED_Ver_text_speed = 14;
      var TLV_LED_Text_ver_ex_timing = 3;
      var L_Border_48_r = [TLV_LED_Border, 18, 10, 5, 8, 4, 3, 1, 8, 28, 62, 127, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_48_r_ex = [TLV_LED_Border, 102, 10, 5, 8, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0];
      var L_Border_r1 = [TLV_LED_Border, 30, 10, 5, 8, 1, 0, 1, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_g1 = [TLV_LED_Border, 30, 10, 5, 8, 1, 0, 1, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_rg1 = [TLV_LED_Border, 30, 10, 5, 8, 1, 0, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_r4 = [TLV_LED_Border, 30, 10, 5, 8, 1, 0, 1, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_g4 = [TLV_LED_Border, 30, 10, 5, 8, 1, 0, 1, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_rg4 = [TLV_LED_Border, 30, 10, 5, 8, 1, 0, 1, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var L_Border_r8 = [TLV_LED_Border, 30, 10, 3, 8, 1, 0, 1, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0];
      var L_Border_g8 = [TLV_LED_Border, 30, 10, 3, 8, 1, 0, 1, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0];
      var L_Border_rg8 = [TLV_LED_Border, 30, 10, 3, 8, 1, 0, 1, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0];
      var GSize_max_pkt_res_tlv = 1024;
      var GSize_max_pkt_tlv = GSize_max_pkt_res_tlv + 37;
      var L_type_cmd = TYPE_CMD_TLV_Set;
      var L_type_data = 193;
      var L_count_pkt = 0;
      var L_unack = false;
      var L_def_inter = 1;
      var LED_Item;
      (function(LED_Item2) {
        LED_Item2[LED_Item2["none"] = -1] = "none";
        LED_Item2[LED_Item2["text"] = 0] = "text";
        LED_Item2[LED_Item2["graphic"] = 1] = "graphic";
        LED_Item2[LED_Item2["text_pic"] = 2] = "text_pic";
        LED_Item2[LED_Item2["text_clock"] = 3] = "text_clock";
        LED_Item2[LED_Item2["text_timing"] = 4] = "text_timing";
        LED_Item2[LED_Item2["text_temp_humid"] = 5] = "text_temp_humid";
        LED_Item2[LED_Item2["text_audio"] = 6] = "text_audio";
        LED_Item2[LED_Item2["text_part"] = 7] = "text_part";
        LED_Item2[LED_Item2["text_weather"] = 8] = "text_weather";
        LED_Item2[LED_Item2["text_sensor"] = 9] = "text_sensor";
      })(LED_Item || (LED_Item = {}));
      function isArray(arr) {
        return arr != null && Object.prototype.toString.call(arr) === "[object Array]";
      }
      function get_json_number(obj, key, def) {
        if (typeof obj[key] == "number")
          return obj[key];
        return def;
      }
      function calc_make_up_mod(value, mod) {
        var tmp = value % mod;
        if (tmp > 0)
          return value + mod - tmp;
        else
          return value;
      }
      function calc_count_mod(value, mod) {
        var ret = Math.floor(value / mod);
        if (value % mod > 0)
          ret++;
        return ret;
      }
      function bytes_write_period_hn(dst, offset, str) {
        var h0 = 0, n0 = 0, h1 = 23, n1 = 59;
        h0 = parseInt(str.substr(0, 2));
        n0 = parseInt(str.substr(3, 2));
        h1 = parseInt(str.substr(6, 2));
        n1 = parseInt(str.substr(9, 2));
        dst[offset] = h0;
        dst[offset + 1] = n0;
        dst[offset + 2] = h1;
        dst[offset + 3] = n1;
        return true;
      }
      function tlv_get_len_len(len) {
        if (len < 128) {
          return 1;
        } else if (len < 256) {
          return 2;
        } else {
          return 3;
        }
      }
      function tlv_write_len_len(dst, offset, len) {
        if (len < 128) {
          dst[offset] = len;
          return 1;
        } else if (len < 256) {
          dst[offset] = 129;
          dst[offset + 1] = len;
          return 2;
        } else {
          dst[offset] = 130;
          dst[offset + 1] = len & 255;
          dst[offset + 2] = len >> 8 & 255;
          return 3;
        }
      }
      function get_type_item(pType) {
        if (null == pType || typeof pType != "string")
          return -1;
        var sl = ["text", "graphic", "text_pic", "text_clock", "text_timing", "text_temp_humid", "text_audio", "text_part", "text_weather"];
        for (var i = 0; sl.length - 1; i++) {
          if (sl[i] == pType)
            return i;
        }
        return -1;
      }
      function get_type_border(pBorder) {
        if (null == pBorder)
          return 0;
        return get_json_number(pBorder, "fixed_value", 0);
      }
      function get_len_border(type_fixed) {
        if (0 == type_fixed)
          return 0;
        if (type_fixed <= 9)
          return L_Border_r1.length;
        if (type_fixed > 48)
          return L_Border_48_r_ex.length;
        return 7;
      }
      function write_data_simple_tag(ret, pos, tag, value) {
        ret[pos] = tag;
        ret[pos + 1] = 1;
        ret[pos + 2] = value;
        return 3;
      }
      function write_data_ani(ret, pos, pInfo) {
        ret[pos] = TLV_LED_Animate;
        ret[pos + 1] = 3;
        ret[pos + 2] = pInfo.type_ani;
        ret[pos + 3] = pInfo.speed;
        ret[pos + 4] = pInfo.time_stay;
        return 5;
      }
      function write_data_item_info(ret, pos, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save) {
        var len = pos;
        if (update_item) {
          ret[len++] = TLV_LED_RTShow;
          ret[len++] = 4;
          ret[len++] = 2;
          ret[len++] = id_pgm;
          ret[len++] = id_rect;
          ret[len++] = id_item;
        }
        len += write_data_simple_tag(ret, len, TLV_LED_Data_Save, 1 - data_save);
        len += write_data_simple_tag(ret, len, TLV_LED_ID_Program, id_pgm);
        len += write_data_simple_tag(ret, len, TLV_LED_ID_Region, id_rect);
        len += write_data_simple_tag(ret, len, TLV_LED_ID_Item, id_item);
        if (null != pInfo_ani) {
          len += write_data_ani(ret, len, pInfo_ani);
          if (pInfo_ani.type_fixed_border > 0)
            len += write_data_border(ret, len, pInfo_ani.type_fixed_border, 9);
        }
        return len - pos;
      }
      function write_data_border(ret, pos, type_fixed, speed) {
        ret[pos] = TLV_LED_Border;
        var len = 0;
        if (type_fixed <= 9 || type_fixed == 49) {
          switch (type_fixed) {
            case 1: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_r4, 0, L_Border_r4.length);
              len = L_Border_r4.length;
              break;
            }
            case 2: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_g4, 0, L_Border_g4.length);
              len = L_Border_g4.length;
              break;
            }
            case 3: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_rg4, 0, L_Border_rg4.length);
              len = L_Border_rg4.length;
              break;
            }
            case 4: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_r1, 0, L_Border_r1.length);
              break;
            }
            case 5: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_g1, 0, L_Border_g1.length);
              len = L_Border_g1.length;
              break;
            }
            case 6: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_rg1, 0, L_Border_rg1.length);
              len = L_Border_rg1.length;
              break;
            }
            case 7: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_r8, 0, L_Border_r8.length);
              len = L_Border_r8.length;
              break;
            }
            case 8: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_g8, 0, L_Border_g8.length);
              len = L_Border_g8.length;
              break;
            }
            case 9: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_rg8, 0, L_Border_rg8.length);
              len = L_Border_rg8.length;
              break;
            }
            case 49: {
              import_bytes_deal.memcpy_buf(ret, pos, L_Border_48_r_ex, 0, L_Border_48_r_ex.length);
              len = L_Border_48_r_ex.length;
              break;
            }
          }
          ret[2] = speed;
          return len;
        }
        if (type_fixed >= 16)
          ret[3] = 5;
        else if (type_fixed > 12)
          ret[3] = 1;
        else if (type_fixed > 9)
          ret[3] = 0;
        else if (type_fixed > 6)
          ret[3] = 3;
        else
          ret[3] = 5;
        ret[2] = speed;
        if (ret[3] < 2) {
          var color = (type_fixed - 9) % 3;
          ret[1] = 5;
          ret[4] = color != 2 ? 255 : 0;
          ret[5] = color != 1 ? 255 : 0;
          ret[6] = 0;
          return 7;
        } else if (type_fixed < 10) {
          ret[1] = 9;
          ret[4] = 8;
          ret[5] = 1;
          ret[6] = 3;
          ret[7] = 1;
          switch (type_fixed) {
            case 1: {
              ret[8] = 15;
              ret[9] = 0;
              ret[10] = 0;
              break;
            }
            case 2: {
              ret[8] = 0;
              ret[9] = 15;
              ret[10] = 0;
              break;
            }
            case 3: {
              ret[8] = 15;
              ret[9] = 15;
              ret[10] = 0;
              break;
            }
            case 4: {
              ret[8] = 17;
              ret[9] = 0;
              ret[10] = 0;
              break;
            }
            case 5: {
              ret[8] = 0;
              ret[9] = 17;
              ret[10] = 0;
              break;
            }
            case 6: {
              ret[8] = 17;
              ret[9] = 17;
              ret[10] = 0;
              break;
            }
            case 7: {
              ret[8] = 255;
              ret[9] = 0;
              ret[10] = 0;
              break;
            }
            case 8: {
              ret[8] = 0;
              ret[9] = 255;
              ret[10] = 0;
              break;
            }
            case 9: {
              ret[8] = 255;
              ret[9] = 255;
              ret[10] = 0;
              break;
            }
            default:
              break;
          }
          return 11;
        } else {
          len = L_Border_48_r.length;
          import_bytes_deal.memcpy_buf(ret, pos, L_Border_48_r, 0, len);
          ret[2] = speed;
          return len;
        }
      }
      function write_data_item_control(ret, pos, pControl) {
        if (null != pControl && typeof pControl == "object") {
          var tmp = get_json_number(pControl, "play_fixed_time", 0);
          if (0 == tmp) {
            ret[pos] = 0;
            tmp = get_json_number(pControl, "play_loop", 1);
          } else
            ret[pos] = 1;
          ret[pos + 1] = tmp & 255;
          ret[pos + 2] = tmp >> 8 & 255;
        } else {
          ret[pos] = 0;
          ret[pos + 1] = 1;
          ret[pos + 2] = 0;
        }
        return 3;
      }
      function split_data_res(list, pSrc, len, count_pkt_src, param, ntype) {
        var lastPktSize = len % GSize_max_pkt_res_tlv;
        var ipos = 0;
        var len = GSize_max_pkt_res_tlv;
        var ibegin = 0;
        if (null != param) {
          list.unshift(param);
          ibegin++;
        }
        var count_pkt = count_pkt_src + ibegin;
        var tmp = new Uint8Array(13);
        tmp[0] = TLV_LED_Property_Pkt;
        tmp[1] = 7;
        import_bytes_deal.bytes_write_int(tmp, 2, count_pkt, 2, false);
        import_bytes_deal.bytes_write_int(tmp, 6, GSize_max_pkt_res_tlv, 2, false);
        tmp[8] = ntype;
        tmp[9] = TLV_LED_Pkt;
        var pos_len = 10;
        for (var i = ibegin; i < count_pkt; i++) {
          import_bytes_deal.bytes_write_int(tmp, 4, i, 2, false);
          if (i == count_pkt_src + ibegin - 1 && lastPktSize > 0)
            len = lastPktSize;
          var len_header = pos_len + tlv_write_len_len(tmp, pos_len, len);
          var ret = new Uint8Array(len_header + len);
          if (null == ret) {
            console.error("----split_data_res out of memory!\n");
            return false;
          }
          import_bytes_deal.memcpy_buf(ret, 0, tmp, 0, len_header);
          import_bytes_deal.memcpy_buf(ret, len_header, pSrc, ipos, len);
          list.unshift(ret);
          ipos += GSize_max_pkt_res_tlv;
        }
        return true;
      }
      function split_data_res_pgm(plist, pSrc, id_pgm, id_rect, id_item, data_save) {
        var lastPktSize = pSrc.length % GSize_max_pkt_res_tlv;
        var len = GSize_max_pkt_res_tlv;
        var count_pkt = calc_count_mod(pSrc.length, GSize_max_pkt_res_tlv);
        var tmp = new Uint8Array(25);
        write_data_simple_tag(tmp, 0, TLV_LED_Data_Save, 1 - data_save);
        write_data_simple_tag(tmp, 3, TLV_LED_ID_Program, id_pgm);
        write_data_simple_tag(tmp, 6, TLV_LED_ID_Region, id_rect);
        write_data_simple_tag(tmp, 9, TLV_LED_ID_Item, id_item);
        tmp[12] = TLV_LED_Property_Pkt;
        tmp[13] = 7;
        import_bytes_deal.bytes_write_int(tmp, 14, count_pkt, 2);
        import_bytes_deal.bytes_write_int(tmp, 18, GSize_max_pkt_res_tlv, 2);
        tmp[20] = TLV_TYPE_Res_Item;
        tmp[21] = TLV_LED_Pkt;
        var pos_len = 22;
        var ipos = 0;
        for (var i = 0; i < count_pkt; i++) {
          import_bytes_deal.bytes_write_int(tmp, 16, i, 2);
          if (i == count_pkt - 1 && lastPktSize > 0)
            len = lastPktSize;
          var len_header = pos_len + tlv_write_len_len(tmp, pos_len, len);
          var ret = new Uint8Array(len_header + len);
          import_bytes_deal.memcpy_buf(ret, 0, tmp, 0, len_header);
          import_bytes_deal.memcpy_buf(ret, len_header, pSrc, ipos, len);
          plist.unshift(ret);
          ipos += GSize_max_pkt_res_tlv;
        }
        return true;
      }
      function get_data_ani(pInfo, pAni, w_rc, h_rc) {
        pInfo.type_ani = 1;
        pInfo.speed = 9;
        pInfo.time_stay = 3;
        pInfo.interval = 0;
        if (L_def_inter > 0)
          pInfo.interval = w_rc;
        if (null != pAni) {
          pInfo.time_stay = get_json_number(pAni, "time_stay", 3);
          pInfo.speed = get_json_number(pAni, "speed", 10) - 1;
          if (null != pAni.model_continue && typeof pAni.model_continue == "string") {
            var size_interval = get_json_number(pAni, "size_interval", -1);
            if (pAni.model_continue == "left")
              pInfo.type_ani = 0;
            else if (pAni.model_continue == "top") {
              pInfo.type_ani = 4;
              if (L_def_inter > 0)
                pInfo.interval = h_rc;
            } else if (pAni.model_continue == "right")
              pInfo.type_ani = 27;
            if (size_interval >= 0) {
              if (L_def_inter == 0) {
                if (pAni.model_continue == "top")
                  pInfo.interval = h_rc;
                else
                  pInfo.interval = w_rc;
              }
              pInfo.interval = size_interval * pInfo.interval / 100;
            } else {
              var pInterval = pAni.interval_head_tail;
              if (null != pInterval && typeof pInterval == "number" && pInterval <= pInfo.interval)
                pInfo.interval = pInterval;
            }
          } else {
            var pAni_model = pAni.model_normal;
            if (null != pAni_model && typeof pAni_model == "number") {
              pInfo.type_ani = pAni_model;
              if (4 == pInfo.type_ani && L_def_inter > 0)
                pInfo.interval = h_rc;
            } else {
              pAni_model = pAni.model_gif;
              if (null != pAni_model && typeof pAni_model == "number") {
                pInfo.delay_frame = pAni_model * 10;
                pInfo.time_stay = 0;
              }
            }
          }
        }
      }
      function write_data_property_item_graphic_gif_src(ret, pos, pControl) {
        ret[pos] = TLV_LED_Property_Item;
        ret[pos + 1] = 4;
        write_data_item_control(ret, pos + 2, pControl);
        ret[pos + 5] = ITEM_TLV_Gif_src;
        return 6;
      }
      function build_data_item_gif_src(plist, data_gif, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save, pControl) {
        var len = 17 + 6 + get_len_border(pInfo_ani.type_fixed_border);
        if (update_item)
          len += 6;
        var ret = new Uint8Array(len);
        var pos = write_data_item_info(ret, 0, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save);
        write_data_property_item_graphic_gif_src(ret, pos, pControl);
        plist.unshift(ret);
        return split_data_res_pgm(plist, data_gif, id_pgm, id_rect, id_item, data_save);
      }
      var L_tb_gamma = new Uint8Array(256);
      var L_Gamma = 0;
      function init_tb_gamma(gamma) {
        var f;
        if (L_Gamma == gamma)
          return;
        for (var i = 0; i < 256; ++i) {
          f = (i + 0.5) / 256;
          f = Math.pow(f, gamma);
          L_tb_gamma[i] = f * 256 - 0.5;
        }
        L_Gamma = gamma;
      }
      function check_data_zero(buf, tag) {
        for (var i = 0; i < buf.length; i++) {
          if (buf[i] > 0) {
            return;
          }
        }
        console.error(tag, "check_data_zero failed!", buf.length);
      }
      function gamma_correct(pDest, offset_dst, pSrc, offset_src, w, h, w_line, gamma) {
        init_tb_gamma(gamma);
        for (var y = h - 1; y >= 0; y--) {
          var pos = w_line * y;
          for (var x = 0; x < w * 3; x++) {
            var c = pSrc[offset_src + pos + x];
            pDest[offset_dst + pos + x] = L_tb_gamma[c];
          }
        }
      }
      function add_data_graphic_gamma(graphic, pData_src, len_src, gamma) {
        if (pData_src[0] != 66 || pData_src[1] != 77 || len_src < 54) {
          console.error("invalid bmp24", pData_src.slice(0, 3));
          return 0;
        }
        var w = import_bytes_deal.bytes_read_int(pData_src, 18, 4);
        var h = import_bytes_deal.bytes_read_int(pData_src, 22, 4);
        var iLen_width_src = calc_make_up_mod(w * 3, 4);
        var ret = iLen_width_src * h + 54;
        if (ret > len_src) {
          console.error("ret > len_src", ret, len_src);
          return 0;
        }
        if (0 == graphic.m_width || 0 == graphic.m_height) {
          graphic.m_width = w;
          graphic.m_height = h;
          graphic.m_count_page = 0;
          if (null != graphic.p_data)
            graphic.p_data = null;
        }
        if (0 == w || 0 == h)
          return 0;
        var iLen_width = calc_make_up_mod(graphic.m_width * 3, 4);
        var iLen_page = iLen_width * graphic.m_height;
        var iLen_cur = graphic.m_count_page * iLen_page;
        var iLen_all = 0;
        var count_page = 1;
        iLen_all = iLen_page * count_page;
        graphic.m_count_page += count_page;
        var pCur_data = null;
        if (null != graphic.p_data && iLen_cur > 0)
          pCur_data = graphic.p_data;
        graphic.p_data = new Uint8Array(iLen_cur + iLen_all);
        if (null != pCur_data) {
          import_bytes_deal.memcpy_buf(graphic.p_data, 0, pCur_data, 0, iLen_cur);
          pCur_data = null;
        }
        var pData = new Uint8Array(graphic.p_data.buffer, iLen_cur, iLen_all);
        if (graphic.m_width == w && graphic.m_height == h)
          gamma_correct(pData, 0, pData_src, 54, w, h, iLen_width, gamma);
        else {
          var w1 = graphic.m_width < w ? graphic.m_width : w;
          var h1 = graphic.m_height < h ? graphic.m_height : h;
          var d_x = (graphic.m_width - w) / 2;
          var d_y = (graphic.m_height - h) / 2;
          var s_x = 0;
          var s_y = 0;
          if (d_x < 0) {
            s_x = 0 - d_x;
            d_x = 0;
          }
          if (d_y < 0) {
            s_y = 0 - d_y;
            d_y = 0;
          }
          var iLen_width_ex = calc_make_up_mod(w1 * 3, 4);
          for (var y = 0; y < h1; ++y)
            gamma_correct(pData, (d_y + y) * iLen_width + d_x * 3, pData_src, 54 + (s_y + y) * iLen_width_src + s_x * 3, w1, 1, iLen_width_ex, gamma);
        }
        check_data_zero(graphic.p_data, "garphic.p_data");
        return ret;
      }
      function select_arr(value, arr, len_arr) {
        if (len_arr == 0) {
          return -1;
        }
        for (var i = 0; i < len_arr; i++) {
          if (arr[i] == value)
            return i;
        }
        return -1;
      }
      var L_arr = new Uint32Array(257);
      var L_count_use = 0;
      function build_palette(graphic, w, h, w_line_src, len_page_bmp) {
        var bOut = false;
        var len_bit = 1;
        var count = 1 << len_bit;
        L_count_use = 0;
        for (var i = 0; i < L_arr.length; i++)
          L_arr[0] = 0;
        for (var i = 0; i < graphic.m_count_page; i++) {
          var ptmp_src = new Uint8Array(graphic.p_data.buffer, i * len_page_bmp, len_page_bmp);
          for (var y = h - 1; y >= 0; y--) {
            var pline = new Uint8Array(ptmp_src.buffer, ptmp_src.byteOffset + w_line_src * y, w_line_src);
            for (var x = 0; x < w; x++) {
              var c = import_bytes_deal.bytes_read_int(pline, x * 3, 3, true);
              var index = select_arr(c, L_arr, L_count_use);
              if (index < 0) {
                L_arr[L_count_use++] = c;
                if (L_count_use > count) {
                  len_bit = len_bit << 1;
                  if (len_bit > 8) {
                    L_count_use = 0;
                    len_bit = 24;
                    bOut = true;
                    break;
                  }
                  count = 1 << len_bit;
                }
              }
            }
            if (bOut)
              break;
          }
          if (bOut)
            break;
        }
        return len_bit;
      }
      function build_data_bmp_tlv(graphic, len_last_page) {
        var w = graphic.m_width;
        var h = graphic.m_height;
        var w_line_src = calc_make_up_mod(w * 3, 4);
        var len_page_bmp = w_line_src * h;
        var len_bit = build_palette(graphic, w, h, w_line_src, len_page_bmp);
        var w_dst_bmp = calc_count_mod(w * len_bit, 8);
        var len_data_page = w_dst_bmp * h;
        var len_data = len_data_page * graphic.m_count_page;
        var len_palette = len_bit <= 8 ? (1 << len_bit) * 3 : 0;
        var ret = new Uint8Array(15 + len_palette + len_data);
        for (var i = 0; i < L_count_use; ++i) {
          import_bytes_deal.bytes_write_int(ret, 15 + i * 3, L_arr[i], 3);
        }
        ret[0] = "Y".charCodeAt(0);
        ret[1] = "S".charCodeAt(0);
        ret[2] = "T".charCodeAt(0);
        ret[3] = "P".charCodeAt(0);
        ret[4] = "0".charCodeAt(0);
        ret[5] = "1".charCodeAt(0);
        import_bytes_deal.bytes_write_int(ret, 6, graphic.m_width, 2);
        import_bytes_deal.bytes_write_int(ret, 8, graphic.m_height, 2);
        import_bytes_deal.bytes_write_int(ret, 10, graphic.m_count_page, 2);
        import_bytes_deal.bytes_write_int(ret, 12, len_last_page, 2);
        ret[14] = len_bit;
        var b = 0;
        var npos = 15 + len_palette;
        for (var i = 0; i < graphic.m_count_page; ++i) {
          var ptmp_src = new Uint8Array(graphic.p_data.buffer, i * len_page_bmp, len_page_bmp);
          for (var y = h - 1; y >= 0; y--) {
            var pline = new Uint8Array(ptmp_src.buffer, ptmp_src.byteOffset + w_line_src * y, w_line_src);
            if (len_bit == 24) {
              for (var x = 0; x < w; x++) {
                ret[npos + x * 3] = pline[x * 3 + 2];
                ret[npos + x * 3 + 1] = pline[x * 3 + 1];
                ret[npos + x * 3 + 2] = pline[x * 3];
              }
              npos += w_dst_bmp;
              continue;
            }
            var pos_bit = 0;
            for (var x = 0; x < w; x++) {
              var c = import_bytes_deal.bytes_read_int(pline, x * 3, 3, true);
              var index = select_arr(c, L_arr, L_count_use);
              b = b | index << pos_bit;
              pos_bit = pos_bit + len_bit;
              if (8 == pos_bit) {
                ret[npos] = b;
                npos++;
                pos_bit = 0;
                b = 0;
              }
            }
            if (pos_bit > 0) {
              ret[npos] = b;
              npos++;
              pos_bit = 0;
              b = 0;
            }
          }
        }
        return ret;
      }
      function build_data_item_graphic_base(plist, pInfo_ani, graphic, id_pgm, id_rect, id_item, update_item, data_save, len_last_page, pControl) {
        var data_gif = build_data_bmp_tlv(graphic, len_last_page);
        if (null != data_gif) {
          var ret = build_data_item_gif_src(plist, data_gif, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save, pControl);
          return ret;
        } else {
          console.error("data_gif is nil");
          return false;
        }
      }
      function build_data_graphic_pre_data(pre_res, pControl, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save) {
        var ntype = get_json_number(pre_res, "type", 0);
        var len = 17 + 10 + get_len_border(pInfo_ani.type_fixed_border) + 15;
        if (update_item)
          len += 6;
        var ret = new Uint8Array(len);
        var pos = write_data_item_info(ret, 0, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save);
        ret[pos] = TLV_LED_Property_Item;
        ret[pos + 1] = 8;
        write_data_item_control(ret, pos + 2, pControl);
        ret[pos + 5] = ITEM_TLV_res_color;
        ret[pos + 6] = ntype;
        if (ntype == 0) {
          import_bytes_deal.bytes_write_int(ret, pos + 7, get_json_number(pre_res, "color", 0), 3, false);
        } else {
          ret[pos + 7] = get_json_number(pre_res, "id_pro", 1) - 1;
          ret[pos + 8] = get_json_number(pre_res, "id_rect", 1) - 1;
          ret[pos + 9] = get_json_number(pre_res, "id_item", 1) - 1;
        }
        var pos_pkt = pos + 10;
        ret[pos_pkt] = TLV_LED_Property_Pkt;
        ret[pos_pkt + 1] = 7;
        ret[pos_pkt + 2] = 1;
        ret[pos_pkt + 3] = 0;
        ret[pos_pkt + 4] = 0;
        ret[pos_pkt + 5] = 0;
        import_bytes_deal.bytes_write_int(ret, pos_pkt + 6, GSize_max_pkt_res_tlv, 2, false);
        ret[pos_pkt + 8] = 0;
        ret[pos_pkt + 9] = TLV_LED_Pkt;
        ret[pos_pkt + 10] = 4;
        for (var i = 0; i < 4; i++) {
          ret[pos_pkt + 11 + i] = ret[pos + 6 + i];
        }
        return ret;
      }
      function build_data_item_graphic(plist, pItem, pInfo_ani, id_pgm, id_rect, id_item, w_rc, h_rc, gray, update_item, data_save, res) {
        var pControl = pItem.control;
        var bGif = get_json_number(pItem, "isGif", 0) == 1;
        if (null == res) {
          var pre_res = pItem["pre_data"];
          if (null != pre_res) {
            var data_pre_res = build_data_graphic_pre_data(pre_res, pControl, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save);
            plist.unshift(data_pre_res);
            return true;
          }
          console.error("invalid res!", res);
          return false;
        }
        if (res.length > 3 && res[0] == 71 && res[1] == 73 && res[2] == 70)
          return build_data_item_gif_src(plist, res, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save, pControl);
        var size_border = 0;
        if (pInfo_ani.type_fixed_border > 0)
          size_border = 1 + (pInfo_ani.type_fixed_border >> 4);
        var graphic = {
          m_width: w_rc - 2 * size_border,
          m_height: h_rc - 2 * size_border,
          m_count_page: 0,
          p_data: null
        };
        var gamma = gray > 0 ? 1.6 : 1;
        if (null != pItem.gamma && typeof pItem.gamma == "number")
          gamma = pItem.gamma;
        var len_graphic = res.length;
        var ipos = 0;
        while (ipos < len_graphic) {
          var len_bmp = add_data_graphic_gamma(graphic, new Uint8Array(res.buffer, ipos), len_graphic - ipos, gamma);
          if (0 == len_bmp)
            break;
          ipos += len_bmp;
        }
        if (0 == graphic.m_count_page) {
          console.error("graphic.m_count_page = 0!", graphic);
          return false;
        }
        var len_last_page = get_json_number(pItem, "len_valid", pInfo_ani.type_ani == 4 ? h_rc : w_rc);
        var arr_delay;
        if (bGif) {
          if (pInfo_ani.time_stay != 0) {
            pInfo_ani.delay_frame = pInfo_ani.time_stay * 10;
            pInfo_ani.time_stay = 0;
          }
          if (isArray(pItem.delay_frame)) {
            var size = pItem.delay_frame.length;
            if (size > 1) {
              arr_delay = new Uint8Array(size * 2);
              for (var i = 0; i < size; ++i) {
                var delay_frame = pItem.delay_frame[i] * 10;
                arr_delay[i * 2] = delay_frame & 255;
                arr_delay[i * 2 + 1] = delay_frame >> 8 & 255;
              }
            } else if (1 == size)
              pInfo_ani.delay_frame = pItem.delay_frame[0] * 10;
          }
        }
        var ret = build_data_item_graphic_base(plist, pInfo_ani, graphic, id_pgm, id_rect, id_item, update_item, data_save, len_last_page, pControl);
        return ret;
      }
      function get_align(pItem, align) {
        var ptmp = pItem["align_horizontal"];
        if (null != ptmp) {
          if (ptmp == "left")
            align.line = 0;
          else if (ptmp == "center")
            align.line = 1;
          else
            align.line = 2;
        }
        ptmp = pItem["align_vertical"];
        if (null != ptmp) {
          if (ptmp == "top")
            align.page = 0;
          else if (ptmp == "center")
            align.page = 1;
          else
            align.page = 2;
        }
      }
      function write_data_text_align(ret, offset, align) {
        ret[offset++] = 3;
        ret[offset++] = 0;
        ret[offset++] = align.page;
        ret[offset++] = 3;
        ret[offset++] = 1;
        ret[offset++] = align.line;
        if (align.font > 0) {
          ret[offset++] = 3;
          ret[offset++] = 2;
          ret[offset++] = align.font;
          return 9;
        }
        return 6;
      }
      function write_data_text_rotate(ret, offset, type_rotate) {
        ret[offset] = 2;
        ret[offset + 1] = type_rotate;
        return 2;
      }
      function write_data_space(ret, offset, type_space, space) {
        ret[offset] = TLV_LED_Text_space;
        ret[offset + 1] = type_space;
        ret[offset + 2] = space;
        return 3;
      }
      function write_data_property_item_text(ret, offset, size_font, code, font, interval, type_text, layout, pControl) {
        ret[offset + 0] = TLV_LED_Property_Item;
        ret[offset + 1] = 10;
        write_data_item_control(ret, offset + 2, pControl);
        ret[offset + 5] = type_text;
        ret[offset + 6] = code;
        ret[offset + 7] = font;
        ret[offset + 8] = size_font;
        ret[offset + 9] = layout;
        import_bytes_deal.bytes_write_int(ret, offset + 10, interval, 2);
        return 12;
      }
      function str_to_uint8array(str) {
        var arr = [];
        for (var i = 0, j = str.length; i < j; ++i)
          arr.push(str.charCodeAt(i));
        var tmpUint8Array = new Uint8Array(arr);
        return tmpUint8Array;
      }
      function build_text_clock_ex(pText, len_header) {
        var y = new Uint8Array([TLV_LED_Text_ver, 4, TLV_LED_Ver_text_clock_year]);
        var m = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_clock_month]);
        var d = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_clock_day]);
        var h = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_clock_hour]);
        var n = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_clock_min]);
        var s = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_clock_sec]);
        var len_src = pText.length;
        var count_week = import_bytes_deal.bytes_select_count(pText, 0, str_to_uint8array("{w}"));
        var len_new = count_week * (19 - 3) + len_src;
        var ret = new Uint8Array(len_header + len_new);
        import_bytes_deal.memcpy_buf(ret, len_header, pText, 0, pText.length);
        len_new = len_src;
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{YYYY}"), y);
        y[1] = 2;
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{YY}"), y);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{MM}"), m);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{DD}"), d);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{hh}"), h);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{mm}"), n);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{ss}"), s);
        if (count_week > 0) {
          var week = new Uint8Array([TLV_LED_Text_ver, 0, TLV_LED_Ver_text_clock_week, 2, 7, 210, 187, 182, 254, 200, 253, 203, 196, 206, 229, 193, 249, 200, 213]);
          ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{w}"), week);
        }
        return ret;
      }
      function build_text_timing_ex(pText, len_header, pTarget, bReserve) {
        var d = new Uint8Array([TLV_LED_Text_ver, 4, TLV_LED_Ver_text_timing_day]);
        var h = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_timing_hour]);
        var n = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_timing_min]);
        var s = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_timing_sec]);
        var count_target = import_bytes_deal.bytes_select_count(pText, 0, str_to_uint8array("{T}"));
        var ret;
        var npos = len_header;
        if (!bReserve) {
          ret = new Uint8Array(len_header + pText.length + 11);
          ret[npos] = TLV_LED_Text_ver_ex;
          ret[npos + 1] = 8;
          ret[npos + 2] = 0;
          ret[npos + 3] = TLV_LED_Text_ver_ex_timing;
          npos = npos + 3;
        } else {
          ret = new Uint8Array(len_header + pText.length + 8);
          ret[npos] = TLV_LED_Text_time_target;
        }
        import_bytes_deal.bytes_write_dt(ret, npos + 1, new Date(pTarget));
        import_bytes_deal.memcpy_buf(ret, npos + 8, pText, 0, pText.length);
        if (count_target > 0)
          ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{T}"), str_to_uint8array(pTarget));
        ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{N}"), d);
        d[1] = 3;
        ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{NNN}"), d);
        d[1] = 2;
        ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{NN}"), d);
        var len_old = ret.length;
        ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{ss}"), s);
        if (len_old == ret.length)
          ret[npos + 1 + 6] = bReserve ? 59 : 0;
        len_old = ret.length;
        ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{mm}"), n);
        if (len_old == ret.length)
          ret[npos + 1 + 5] = bReserve ? 59 : 0;
        len_old = ret.length;
        ret = import_bytes_deal.bytes_replace_all(ret, npos + 8, str_to_uint8array("{hh}"), h);
        if (len_old == ret.length)
          ret[npos + 1 + 4] = bReserve ? 23 : 0;
        return ret;
      }
      function build_text_temp_humid_ex(pText, len_header) {
        var t = new Uint8Array([TLV_LED_Text_ver, 210, TLV_LED_Ver_text_temp]);
        var h = new Uint8Array([TLV_LED_Text_ver, 2, TLV_LED_Ver_text_humid]);
        var s = new Uint8Array([TLV_LED_Text_ver, 51, TLV_LED_Ver_text_speed]);
        var s0 = new Uint8Array([TLV_LED_Text_ver, 19, TLV_LED_Ver_text_speed]);
        var s2 = new Uint8Array([TLV_LED_Text_ver, 50, TLV_LED_Ver_text_speed]);
        var s02 = new Uint8Array([TLV_LED_Text_ver, 18, TLV_LED_Ver_text_speed]);
        var ret = new Uint8Array(len_header + pText.length);
        import_bytes_deal.memcpy_buf(ret, len_header, pText, 0, pText.length);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{T}"), t);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{H}"), h);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{S}"), s);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{0S}"), s0);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{SS}"), s2);
        ret = import_bytes_deal.bytes_replace_all(ret, len_header, str_to_uint8array("{0SS}"), s02);
        return ret;
      }
      function deal_text(src, hex, type_item, code, pItem) {
        if (code >= 16) {
          if (src != void 0 && src.length > 0)
            return str_to_uint8array(src);
          if (hex != void 0 && hex.length > 0)
            return import_bytes_deal.hex_to_bytes(hex);
          console.error("----err: empt text and hex");
          return new Uint8Array(0);
        }
        if (src == void 0) {
          console.error("----err: empt text", code, src, hex);
          return new Uint8Array(0);
        }
        var text_gb2312 = import_code_convert.utf8_bytes_gb(src);
        if (text_gb2312.length == 0) {
          console.error("build_data_item_text failed as text_gb2312.length 0");
          return new Uint8Array(0);
        }
        switch (type_item) {
          case LED_Item.text_part:
          case LED_Item.text_weather:
          case LED_Item.text:
            return text_gb2312;
          case LED_Item.text_clock:
            return build_text_clock_ex(text_gb2312, 0);
          case LED_Item.text_timing: {
            var pParam = pItem["param_timing"];
            if (null != pParam && typeof pParam == "object")
              return build_text_timing_ex(text_gb2312, 0, pParam["target"], pParam.isReserve == 1);
            else
              console.error("param invalid:", pParam, pParam.type);
            return new Uint8Array(0);
          }
          case LED_Item.text_temp_humid:
            return build_text_temp_humid_ex(text_gb2312, 0);
          default:
            break;
        }
        return text_gb2312;
      }
      function update_text_font(pinfo, pItem, pDef) {
        var color_font = get_json_number(pItem, "color", pDef.color_font);
        if (color_font < 0)
          color_font = 255;
        var color_bg = get_json_number(pItem, "color_bg", pDef.color_bg);
        var code = get_json_number(pItem, "code", pDef.code);
        var size = get_json_number(pItem, "size", pDef.size);
        pinfo.update_color = true;
        pinfo.update_font = true;
        if (!pinfo.init) {
          pinfo.color_font = color_font;
          pinfo.color_bg = color_bg;
          pinfo.code = code;
          pinfo.font = 0;
          pinfo.size = size;
          pinfo.init = true;
        } else {
          pinfo.update_color = color_font != pinfo.color_font || color_bg != pinfo.color_bg;
          pinfo.update_font = code != pinfo.code || size != pinfo.size;
          if (pinfo.update_color) {
            pinfo.color_font = color_font;
            pinfo.color_bg = color_bg;
          }
          if (pinfo.update_font) {
            pinfo.code = code;
            pinfo.size = size;
          }
        }
      }
      function build_text_font(pinfo) {
        var nlen = (pinfo.update_color ? 7 : 0) + (pinfo.update_font ? 4 : 0);
        var ret = new Uint8Array(nlen);
        var offset = 0;
        if (pinfo.update_color) {
          ret[offset] = TLV_LED_Text_color;
          import_bytes_deal.bytes_write_int(ret, offset + 1, pinfo.color_font, 3);
          import_bytes_deal.bytes_write_int(ret, offset + 4, pinfo.color_bg, 3);
          offset = 7;
        }
        if (pinfo.update_font) {
          ret[offset++] = 1;
          ret[offset++] = pinfo.code;
          ret[offset++] = pinfo.font;
          ret[offset++] = pinfo.size;
        }
        return ret;
      }
      function build_text_gen(pItem) {
        var len_header = 0;
        var rotate = get_json_number(pItem, "rotate", 0) % 360;
        var align = { line: 0, page: 0, font: 0 };
        var space_line = get_json_number(pItem, "space_line", 0);
        var space_font = get_json_number(pItem, "space_font", 0);
        get_align(pItem, align);
        if (rotate > 0) {
          len_header += 2;
          if (270 == rotate) {
            align.font = 1;
          } else if (90 == rotate) {
            var tmp = align.page;
            align.page = align.line;
            align.line = tmp;
          }
        }
        len_header += 3;
        len_header += 3;
        if (align.font > 0)
          len_header += 3;
        if (space_line != 0)
          len_header += 3;
        if (space_font != 0)
          len_header += 3;
        var ret = new Uint8Array(len_header);
        var offset = 0;
        offset += write_data_text_align(ret, offset, align);
        if (rotate > 0)
          offset += write_data_text_rotate(ret, offset, rotate / 90);
        if (space_line != 0)
          offset += write_data_space(ret, offset, 0, space_line);
        if (space_font != 0)
          offset += write_data_space(ret, offset, 1, space_font);
        return ret;
      }
      function build_data_item_text_simple(src, hex, pinfo, type_item, pItem) {
        var txt = deal_text(src, hex, type_item, pinfo.code, pItem);
        if (txt.length == 0)
          return txt;
        var bin_text_font = build_text_font(pinfo);
        var ret = import_bytes_deal.concat_buf([bin_text_font, txt]);
        return ret;
      }
      function build_data_item_text(plist, pItem, pInfo_ani, id_pgm, id_rect, id_item, type_item, update_item, data_save) {
        var pdef = { color_font: 255, color_bg: 0, size: 16, code: 1, font: 0 };
        var pinfo = { init: false, size: 16, code: 1, font: 0, rotate: 0 };
        update_text_font(pinfo, pItem, pdef);
        pdef.code = pinfo.code;
        pdef.size = pinfo.size;
        pdef.font = pinfo.font;
        var type_text = type_item != LED_Item.text_audio ? ITEM_TLV_Text : ITEM_TLV_Text_ex;
        var alltxt;
        var arrText = pItem["list_text"];
        if (arrText == void 0 || arrText.length == 0) {
          alltxt = build_data_item_text_simple(pItem["text"], pItem["hex"], pinfo, type_item, pItem);
        } else {
          var arr = [];
          for (var i = 0; i < arrText.length; i++) {
            var pChild = arrText[i];
            update_text_font(pinfo, pChild, pdef);
            var bin = build_data_item_text_simple(pChild["text"], pChild["hex"], pinfo, type_item, pItem);
            arr.push(bin);
          }
          alltxt = import_bytes_deal.concat_buf(arr);
        }
        if (alltxt.length == 0)
          return new Uint8Array(0);
        var bin_text_gen = build_text_gen(pItem);
        alltxt = import_bytes_deal.concat_buf([bin_text_gen, alltxt]);
        var len = 17 + get_len_border(pInfo_ani.type_fixed_border) + 12;
        if (update_item)
          len += 6;
        var ret = new Uint8Array(len);
        var offset = write_data_item_info(ret, 0, id_pgm, id_rect, id_item, pInfo_ani, update_item, data_save);
        var layout = get_json_number(pItem, "rotate", 0) % 360 == 90 ? 3 : 0;
        write_data_property_item_text(ret, offset, pdef.size, pdef.code, pdef.font, pInfo_ani.interval, type_text, layout, pItem["control"]);
        plist.unshift(ret);
        return split_data_res_pgm(plist, alltxt, id_pgm, id_rect, id_item, data_save);
      }
      function build_data_item(plist, pItem, id_pgm, id_rect, id_item, w_rc, h_rc, gray, update_item, data_save, res) {
        var type = get_type_item(pItem.type_item);
        var info_ani = {
          time_stay: 3,
          type_ani: 1,
          speed: 10,
          interval: 0,
          delay_frame: 65535,
          type_fixed_border: 0
        };
        info_ani.type_fixed_border = get_type_border(pItem.info_border);
        get_data_ani(info_ani, pItem.info_animate, w_rc, h_rc);
        if (LED_Item.none == type) {
          console.error("build_data_item failed as type none!", pItem.type_item);
          return false;
        }
        if (LED_Item.graphic == type) {
          if (0 == w_rc || 0 == h_rc)
            return false;
          var ret = build_data_item_graphic(plist, pItem, info_ani, id_pgm, id_rect, id_item, w_rc, h_rc, gray, update_item, data_save, res);
          return ret;
        } else
          return build_data_item_text(plist, pItem, info_ani, id_pgm, id_rect, id_item, type, update_item, data_save);
      }
      function build_data_period(pPeriod, type) {
        if (null == pPeriod || typeof pPeriod != "object")
          return null;
        var parr = pPeriod.period;
        var pdate = pPeriod.date_play;
        var week = 127;
        if (isArray(pPeriod.week)) {
          var weeks = pPeriod.week;
          week = 0;
          for (var i = 0; i < weeks.length; i++)
            week |= 1 << weeks[i] - 1;
        }
        var y0 = 2e3, m0 = 1, d0 = 1, y1 = 2099, m1 = 12, d1 = 31;
        if (null != pdate && typeof pdate == "string" && pdate.length == 21) {
          y0 = parseInt(pdate.slice(0, 4));
          m0 = parseInt(pdate.slice(5, 7));
          d0 = parseInt(pdate.slice(8, 10));
          y1 = parseInt(pdate.slice(11, 15));
          m1 = parseInt(pdate.slice(16, 18));
          d1 = parseInt(pdate.slice(19, 21));
        }
        var count = 0;
        if (isArray(parr))
          count = parr.length;
        var len = count * 4 + 11;
        var len_len = tlv_get_len_len(len);
        var ret = new Uint8Array(1 + len_len + len);
        ret[0] = TLV_LED_Period;
        tlv_write_len_len(ret, 1, len);
        var pos = len_len + 1;
        ret[pos++] = type;
        import_bytes_deal.bytes_write_int(ret, pos, y0, 2, false);
        pos += 2;
        ret[pos++] = m0;
        ret[pos++] = d0;
        import_bytes_deal.bytes_write_int(ret, pos, y1, 2, false);
        pos += 2;
        ret[pos++] = m1;
        ret[pos++] = d1;
        ret[pos++] = week;
        ret[pos++] = count;
        for (var i = 0; i < count; ++i)
          bytes_write_period_hn(ret, pos + i * 4, parr[i]);
        return ret;
      }
      function build_data_rect(id_rect, w, h, pInfo, type_show) {
        var x = 0, y = 0;
        var w_rc = w;
        var h_rc = h;
        if (null != pInfo && typeof pInfo == "object") {
          w_rc = get_json_number(pInfo, "w", w);
          h_rc = get_json_number(pInfo, "h", h);
          x = get_json_number(pInfo, "x", 0);
          y = get_json_number(pInfo, "y", 0);
        }
        var ret = new Uint8Array(3 + 11);
        ret[0] = TLV_LED_ID_Region;
        ret[1] = 1;
        ret[2] = id_rect;
        ret[3] = TLV_LED_Property_Reg_ex;
        ret[4] = 9;
        import_bytes_deal.bytes_write_int(ret, 5, x, 2, false);
        import_bytes_deal.bytes_write_int(ret, 7, y, 2, false);
        import_bytes_deal.bytes_write_int(ret, 9, w_rc, 2, false);
        import_bytes_deal.bytes_write_int(ret, 11, h_rc, 2, false);
        ret[13] = type_show;
        return ret;
      }
      function build_data_property_pgm(pProperty, parr_rect, no_pgm, w, h, pBG, data_save, type_pgm) {
        var type_play = 0;
        var value_play = 1;
        var len_ppt = 6;
        if (type_pgm > 0 || get_json_number(pProperty, "play_cmd", 0) == 1) {
          type_play = 2;
          len_ppt = 4;
        } else {
          var pType_play = pProperty.play_fixed_time;
          if (null != pType_play && typeof pType_play == "number") {
            type_play = 1;
            value_play = pType_play;
          } else
            value_play = typeof pProperty.play_loop == "number" ? pProperty.play_loop : 1;
        }
        var len_all = 3 + 3 + 2 + len_ppt;
        if (no_pgm != 255)
          len_all += 4;
        var arr_ret = [];
        var ret = new Uint8Array(len_all);
        var pos = 0;
        if (no_pgm != 255) {
          ret[0] = get_json_number(pProperty, "cover", 0) == 1 ? TLV_LED_RTShow : TLV_LED_Delete;
          ret[1] = 2;
          ret[2] = 0;
          ret[3] = no_pgm;
          pos = 4;
        }
        pos += write_data_simple_tag(ret, pos, TLV_LED_Data_Save, 1 - data_save);
        pos += write_data_simple_tag(ret, pos, TLV_LED_ID_Program, no_pgm);
        var type_bg = get_json_number(pProperty, "type_bg", 0);
        ret[pos++] = TLV_LED_Property_Pro_ex;
        ret[pos++] = len_ppt;
        ret[pos++] = type_bg;
        ret[pos++] = type_play;
        if (type_play != 2) {
          import_bytes_deal.bytes_write_int(ret, pos, value_play, 2, false);
          pos += 2;
        }
        var time_sync = get_json_number(pProperty, "time_sync", 3);
        import_bytes_deal.bytes_write_int(ret, pos, time_sync, 2, false);
        arr_ret.push(ret);
        var period_pgm = build_data_period(pProperty.info_period_pro, 0);
        if (null != period_pgm)
          arr_ret.push(period_pgm);
        var count_rect = 0;
        if (isArray(parr_rect))
          count_rect = parr_rect.length;
        if (count_rect > 0) {
          for (var i = 0; i < count_rect; ++i) {
            var pRect = parr_rect[i];
            var data = build_data_rect(i, w, h, pRect.info_pos, get_json_number(pRect, "background", 0));
            arr_ret.push(data);
          }
          if (null != pBG) {
            var data = build_data_rect(count_rect, w, h, pBG.info_pos, 1);
            arr_ret.push(data);
          }
        } else {
          var data = build_data_rect(count_rect, w, h, null, 1);
          ret = import_bytes_deal.concat_buf([ret, data]);
        }
        return import_bytes_deal.concat_buf(arr_ret);
      }
      function build_data_dispatch_pgm_ex(no_pgm, pProperty) {
        var model = 255;
        var len = 6;
        var value_play = get_json_number(pProperty, "play_fixed_time", 0);
        if (value_play > 0)
          model = 1;
        else {
          value_play = get_json_number(pProperty, "play_loop", 0);
          if (value_play > 0)
            model = 0;
          else
            len = 4;
        }
        var ret = new Uint8Array(len + 2);
        ret[0] = TLV_LED_Dispatch_pgm;
        ret[1] = len;
        ret[2] = 2;
        ret[3] = no_pgm;
        ret[4] = 0;
        ret[5] = model;
        if (model != 255)
          import_bytes_deal.bytes_write_int(ret, 6, value_play, 2, false);
        return ret;
      }
      function build_data_pkts_pgm(plist, pPkt, no_pgm, res, play_pgm) {
        var pProperty_pgm = pPkt.property_pro;
        if (null == pProperty_pgm || typeof pProperty_pgm == null) {
          console.error("build_data_pkts_pgm: invalid program!\n");
          return false;
        }
        var w = get_json_number(pProperty_pgm, "width", 0);
        var h = get_json_number(pProperty_pgm, "height", 0);
        if (w <= 0 || h <= 0) {
          console.error("build_data_pkts_pgm: invalid wh! w,h:", w, h);
          return false;
        }
        var type_color = get_json_number(pProperty_pgm, "type_color", 1);
        if (type_color <= 0)
          type_color = 1;
        var gray = 0;
        if (type_color > 15) {
          gray = type_color >> 4;
          type_color = type_color & 15;
        } else
          gray = get_json_number(pProperty_pgm, "gray", 0);
        var data_save = get_json_number(pPkt, "data_save", 0);
        var type_pgm = get_json_number(pProperty_pgm, "type_pro", 0);
        if (type_pgm > 0) {
          if (1 == type_pgm && pPkt.data_save != 0)
            data_save = 1;
          if (type_pgm < 4 && no_pgm < 95)
            no_pgm = 128 - type_pgm;
        }
        var parr_rect = pPkt.list_region;
        var pBG = pPkt["background"];
        if (null == parr_rect || typeof parr_rect != "object" || parr_rect.length <= 0 && pBG == null) {
          console.error("invalid list_rect!");
          return false;
        }
        var ppt = build_data_property_pgm(pProperty_pgm, parr_rect, no_pgm, w, h, pBG, data_save, type_pgm);
        plist.unshift(ppt);
        var index_res = 0;
        for (var i = 0; i < parr_rect.length; ++i) {
          var pRect = parr_rect[i];
          var id_rect = get_json_number(pRect, "id_rect", i);
          var pInfo = pRect.info_pos;
          var w_rc = w;
          var h_rc = h;
          if (null != pInfo && typeof pInfo == "object") {
            if (typeof pInfo.w == "number")
              w_rc = pInfo.w;
            if (typeof pInfo.h == "number")
              h_rc = pInfo.h;
          }
          if (w_rc <= 0 || h_rc <= 0) {
            console.error("Err_LED_Invalid_wh_rect");
            return false;
          }
          var parr_item = pRect.list_item;
          if (null == parr_item || typeof parr_item != "object") {
            console.error("Err_LED_No_item");
            return false;
          }
          for (var j = 0; j < parr_item.length; ++j) {
            var pItem = parr_item[j];
            if (null == pItem || typeof pItem != "object") {
              console.error("Err_LED_Invalid_item");
              return false;
            }
            var id_item = get_json_number(pItem, "id_item", j);
            var res_cur = void 0;
            if (res != void 0 && res.length > index_res)
              res_cur = res[index_res++];
            if (!build_data_item(plist, pItem, no_pgm, id_rect, id_item, w_rc, h_rc, gray, false, data_save, res_cur)) {
              console.error("build_data_item failed!");
              return false;
            }
          }
        }
        if (null != pBG) {
          var id_bg = get_json_number(pBG, "id_rect", parr_rect.length + 1) - 1;
          var w_bg = w;
          var h_bg = h;
          var pPos = pBG.info_pos;
          if (pPos != null) {
            if (typeof pPos.w == "number")
              w_bg = pPos.w;
            if (typeof pPos.h == "number")
              h_bg = pPos.h;
          }
          if (!build_data_item(plist, pBG, no_pgm, id_bg, 0, w_bg, h_bg, gray, false, data_save))
            return false;
        }
        if (plist.length > 1) {
          if (null != play_pgm && get_json_number(play_pgm, "show_now", 0)) {
            var dispatch = build_data_pgm_play(play_pgm);
            plist.unshift(dispatch);
          } else if (1 == get_json_number(pProperty_pgm, "show_now", 0) || type_pgm == 1) {
            var pShow = build_data_dispatch_pgm_ex(no_pgm, pProperty_pgm);
            plist.unshift(pShow);
          }
        }
        return plist.length > 1;
      }
      function merge_pkt(plist, sno, type_data, type_cmd) {
        var len_all = 0;
        var pos = 0;
        var count = plist.length;
        for (var i = 0; i < count; i++)
          len_all += plist[i].length;
        var ret = null;
        if (len_all > GSize_max_pkt_tlv) {
          var bChecksum = type_data >> 7 == 1;
          var len_cs = bChecksum ? 2 : 0;
          ret = new Uint8Array(len_all + (2 + 10 + len_cs) * count);
          for (var i = count - 1; i >= 0; i--) {
            var item = plist[i];
            var pkt = build_pkt(sno, item, type_data, type_cmd, 1);
            sno++;
            import_bytes_deal.memcpy_buf(ret, pos, pkt, 0, pkt.length);
            pos += pkt.length;
          }
        } else {
          var data = new Uint8Array(len_all);
          var pos = 0;
          for (var i = count - 1; i >= 0; i--) {
            var item = plist[i];
            var len = item.length;
            import_bytes_deal.memcpy_buf(data, pos, item, 0, len);
            pos += len;
          }
          ret = build_pkt(sno, data, type_data, type_cmd, 1);
        }
        return ret;
      }
      function build_data_pgm_key(plist, key, ts_key, no_pgm) {
        if (typeof key != "string" || key.length != 40)
          return;
        var arr_key = import_bytes_deal.hex_to_bytes(key, 2);
        if (arr_key.length != 20)
          return;
        var data = new Uint8Array(27);
        data[0] = TLV_LED_pgm_key;
        data[1] = 25;
        data[2] = no_pgm;
        for (var i = 0; i < 20; i++)
          data[i + 3] = arr_key[i];
        import_bytes_deal.bytes_write_int(data, 23, ts_key, 4);
        plist.unshift(data);
      }
      function build_data_pgm(pPkt, id_res, ts_update, sno, res, play_pgm) {
        if (null == pPkt || typeof pPkt != "object")
          return null;
        var no_pgm = get_json_number(pPkt, "id_pro", 1) - 1;
        if (no_pgm < 0) {
          console.error("invalid id_pro:", pPkt.id_pro);
          return null;
        }
        var plist = [];
        if (!build_data_pkts_pgm(plist, pPkt, no_pgm, res, play_pgm)) {
          console.error("build_data_pkts_pgm failed!\n");
          return null;
        }
        build_data_pgm_key(plist, id_res, ts_update, no_pgm);
        return merge_pkt(plist, sno, L_type_data, TYPE_CMD_TLV_Set);
      }
      function build_data_rt_show(rt_show, sno, res) {
        if (!isArray(rt_show.res_show) || rt_show.res_show.length < 1)
          return null;
        var no_pgm = get_json_number(rt_show, "id_pro", 1) - 1;
        var data_save = get_json_number(rt_show, "data_save", 1);
        var gray = get_json_number(rt_show, "gray", 0);
        var w = get_json_number(rt_show, "width", 0);
        var h = get_json_number(rt_show, "height", 0);
        var plist = [];
        var arr_r = [];
        var index_res = 0;
        for (var i = 0; i < rt_show.res_show.length; i++) {
          var pRect = rt_show.res_show[i];
          var pInfo = pRect.info_pos;
          var id_rect = get_json_number(pRect, "id_rect", i + 1) - 1;
          var w_rc = w;
          var h_rc = h;
          if (pInfo != null) {
            var data = build_data_rect(id_rect, w, h, pInfo, 1);
            arr_r.push(data);
            w_rc = get_json_number(pInfo, "w", w_rc);
            h_rc = get_json_number(pInfo, "h", h_rc);
          }
          var parr_item = pRect.list_item;
          if (!isArray(parr_item))
            continue;
          for (var j = 0; j < parr_item.length; ++j) {
            var pItem = parr_item[j];
            if (null == pItem || typeof pItem != "object") {
              console.error("Err_LED_Invalid_item");
              return null;
            }
            var id_item = get_json_number(pItem, "id_item", j + 1) - 1;
            var res_cur = void 0;
            if (res != void 0 && res.length > index_res)
              res_cur = res[index_res++];
            if (!build_data_item(plist, pItem, no_pgm, id_rect, id_item, w_rc, h_rc, gray, true, data_save, res_cur)) {
              console.error("build_data_item failed!");
              return null;
            }
          }
        }
        if (arr_r.length > 0) {
          var tmp = new Uint8Array(3 + 3);
          write_data_simple_tag(tmp, 0, TLV_LED_Data_Save, 1 - data_save);
          write_data_simple_tag(tmp, 0, TLV_LED_ID_Program, no_pgm);
          arr_r.unshift(tmp);
          var ppt_rect = import_bytes_deal.concat_buf(arr_r);
          plist.push(ppt_rect);
        }
        return merge_pkt(plist, sno, L_type_data, TYPE_CMD_TLV_Set);
      }
      function build_data_param_dev(cmd) {
        var w, h;
        w = cmd.width;
        h = cmd.height;
        if (w <= 0 || h <= 0) {
          return null;
        }
        var len = 5;
        var ret = new Uint8Array(len + 2);
        ret[0] = TLV_LED_Advance;
        ret[1] = len;
        ret[2] = 1;
        import_bytes_deal.bytes_write_int(ret, 3, w, 2, false);
        import_bytes_deal.bytes_write_int(ret, 5, h, 2, false);
        return ret;
      }
      function build_data_property_upgrade(count_pkt, sdsInfo) {
        var len = sdsInfo.length;
        var ret = new Uint8Array(len + 12);
        if (null == ret) {
          return null;
        }
        ret[0] = TLV_LED_Property_Pkt;
        ret[1] = 7;
        import_bytes_deal.bytes_write_int(ret, 2, count_pkt, 2, false);
        ret[4] = 0;
        ret[5] = 0;
        import_bytes_deal.bytes_write_int(ret, 6, GSize_max_pkt_res_tlv, 2, false);
        ret[8] = TLV_TYPE_Res_Upgrade;
        ret[9] = TLV_LED_Pkt;
        ret[10] = len + 1;
        for (var i = 0; i < len; ++i) {
          ret[i + 11] = sdsInfo[i].charCodeAt(0);
          if (ret[i + 11] == 44)
            ret[i + 11] = 0;
        }
        ret[len + 11] = 0;
        return ret;
      }
      function build_data_pkts_upgrade(info, src, sno) {
        var count_pkt = calc_count_mod(src.length, GSize_max_pkt_res_tlv);
        var list = [];
        var sdsProperty = build_data_property_upgrade(count_pkt + 1, info);
        if (null == sdsProperty)
          return null;
        if (!split_data_res(list, src, src.length, count_pkt, sdsProperty, TLV_TYPE_Res_Upgrade)) {
          console.error("split_data_res upgrade failed!");
          return null;
        }
        return merge_pkt(list, sno, L_type_data, TYPE_CMD_TLV_Upgrade);
      }
      function build_data_upgrade(upgrade, sno, res) {
        if (null == upgrade.model || typeof upgrade.model != "string")
          return null;
        var strMd5 = upgrade.md5;
        var cs = 0;
        for (var i = 0; i < res.length; i++)
          cs += res[i];
        cs = cs & 65535;
        if (null != upgrade.checksum && typeof upgrade.checksum == "number" && upgrade.checksum != cs) {
          console.error("buildData_upgrade failed as cs err!", cs, upgrade.checksum);
          return null;
        }
        var strinfo = ("000" + cs.toString(16)).slice(-4) + "," + upgrade.model + ",00000000" + strMd5;
        return build_data_pkts_upgrade(strinfo, res, sno);
      }
      function str_to_time(time) {
        if (time == null || typeof time != "string")
          return -1;
        var h, m, s;
        h = parseInt(time.substr(0, 2));
        m = parseInt(time.substr(3, 2));
        s = parseInt(time.substr(6, 2));
        return h * 3600 + m * 60 + s;
      }
      function add_play_list(dst, offset, time, id_pgm) {
        var npos = 0;
        do {
          var value = time;
          if (value > 255)
            value = 255;
          time -= value;
          dst[offset + npos++] = value;
          dst[offset + npos++] = id_pgm;
        } while (time > 0);
        if (255 == dst[offset + npos - 2]) {
          dst[offset + npos++] = 0;
          dst[offset + npos++] = id_pgm;
        }
        return npos;
      }
      function build_data_play_list_ex(arr) {
        if (!isArray(arr) || arr.length == 0)
          return null;
        var count_max = 18e3;
        var len_all = count_max * 2 + 2;
        var ts = 0, ts_new = 0;
        var time = 0;
        var id_pgm = 0;
        var ret = new Uint8Array(len_all);
        var len_ret = 2;
        for (var i = 0; i < arr.length; ++i) {
          var pItem = arr[i];
          ts_new = str_to_time(pItem.ts_begin);
          if (-1 == ts_new || ts > ts_new) {
            console.log(i, pItem);
            continue;
          }
          if (ts < ts_new) {
            len_ret += add_play_list(ret, len_ret, ts_new - ts, 255);
            if (len_ret >= len_all) {
              console.error("out max count!", arr.length, count_max);
              break;
            }
          }
          id_pgm = pItem.id_pro - 1;
          if (id_pgm < 0)
            continue;
          time = pItem.time;
          if (time <= 0 || ts_new + time > 86400)
            continue;
          len_ret += add_play_list(ret, len_ret, time, id_pgm);
          if (len_ret > len_all) {
            console.error("out max count(6000)!", arr.length);
            break;
          }
          ts = ts_new + time;
        }
        var count = len_ret / 2 - 1;
        import_bytes_deal.bytes_write_int(ret, 0, count, 2);
        return ret.slice(0, len_ret);
      }
      function build_data_play_list_ex2(arr) {
        if (!isArray(arr) || arr.length == 0)
          return null;
        var count = arr.length;
        if (count > 255)
          count = 255;
        var len_all = 1 + count * 11;
        var ret = new Uint8Array(len_all);
        ret[0] = count;
        for (var i = 0; i < count; i++) {
          var item = arr[i];
          var offset = 1 + i * 11;
          ret[offset] = item.id_pro - 1;
          ret[offset + 1] = get_json_number(item, "id_rect", 255);
          ret[offset + 2] = get_json_number(item, "id_item", 255);
          if (get_json_number(item, "buzzer", 0) == 1)
            ret[offset + 3] = 128;
          else
            ret[offset + 3] = 0;
          if (get_json_number(item, "play_once", 0) == 1)
            ret[offset + 4] = 0;
          else {
            var week = 127;
            if (isArray(item.week)) {
              var weeks = item.week;
              week = 0;
              for (var j = 0; j < weeks.length; j++) {
                week |= 1 << weeks[j] - 1;
              }
            }
            ret[offset + 4] = week;
          }
          var play_time = get_json_number(item, "time", 0);
          if (play_time == 0) {
            console.error("build_data_play_list2 fail as no invalid time!", item);
            return null;
          }
          var ts = str_to_time(item.ts_begin);
          if (ts == -1) {
            console.error("build_data_play_list2 fail as no ts_begin!", item);
            return null;
          }
          ret[offset + 5] = Math.floor(ts / 3600);
          ret[offset + 6] = Math.floor(ts % 3600 / 60);
          ret[offset + 7] = ts % 60;
          ts += play_time;
          if (ts > 86400)
            ts = ts % 86400;
          ret[offset + 8] = Math.floor(ts / 3600);
          ret[offset + 9] = Math.floor(ts % 3600 / 60);
          ret[offset + 10] = ts % 60;
        }
        return ret;
      }
      function build_data_play_list(arr, type, sno) {
        var data = null;
        var pkt_type = TLV_TYPE_Res_Play_List;
        if (type == 1) {
          data = build_data_play_list_ex2(arr);
          pkt_type = TLV_TYPE_Res_Play_List2;
        } else
          data = build_data_play_list_ex(arr);
        if (data == null || data.length == 0)
          return null;
        var count_pkt = calc_count_mod(data.length, GSize_max_pkt_res_tlv);
        var list = [];
        if (!split_data_res(list, data, data.length, count_pkt, null, pkt_type)) {
          console.error("build_data_play_list failed!");
          return null;
        }
        return merge_pkt(list, sno, L_type_data, TYPE_CMD_TLV_Set);
      }
      function build_data_cancel(cancel) {
        if (cancel == "play_list") {
          var ret = new Uint8Array(2);
          ret[0] = TLV_LED_Cancel_Play_list;
          ret[1] = 0;
          return ret;
        }
        if (cancel == "alarm") {
          var ret = new Uint8Array(4);
          ret[0] = TLV_LED_Update_param;
          ret[1] = 2;
          ret[2] = 0;
          ret[3] = 1;
          return ret;
        }
        return null;
      }
      function build_data_power(power) {
        if (null == power["type"] || typeof power["type"] != "number")
          return null;
        var ret = null;
        if (null == power.period) {
          ret = new Uint8Array(4);
          ret[0] = TLV_LED_Power;
          ret[1] = 2;
          ret[2] = 0;
          ret[3] = power["type"];
          if (ret[3] > 1)
            ret[3] = 1;
          return ret;
        } else {
          do {
            var count = 1;
            if (isArray(power.period))
              count = power.period.length;
            else if (typeof power.period != "string")
              break;
            if (count < 1)
              break;
            ret = new Uint8Array(4 + count * 4);
            ret[0] = TLV_LED_Power;
            ret[1] = 6;
            ret[2] = count;
            ret[3] = 127;
            if (typeof power.period == "string")
              bytes_write_period_hn(ret, 4, power.period);
            else
              for (var i = 0; i < count; ++i)
                bytes_write_period_hn(ret, 4 + 4 * i, power.period[i]);
            return ret;
          } while (0);
          console.error("build_data_power failed as period invalid!");
          return null;
        }
      }
      function build_data_light(light) {
        if (null == light["type"] || typeof light["type"] != "number")
          return null;
        if (light["type"] == 0 || light["type"] == 2) {
          var ret = new Uint8Array(4);
          ret[0] = TLV_LED_Light;
          ret[1] = 2;
          ret[2] = light["type"];
          ret[3] = light.value_fix;
          if (ret[3] == 0)
            ret[3] = 15;
          return ret;
        } else if (light["type"] == 1) {
          var period = light.value_period;
          if (!isArray(period))
            return null;
          if (period.length <= 0)
            return null;
          var ret = new Uint8Array(3 + period.length * 3);
          ret[0] = TLV_LED_Light;
          ret[1] = 1 + period.length * 3;
          ret[2] = period.length;
          for (var i = 0; i < period.length; i++) {
            var pItem = period[i];
            if (null == pItem) {
              return null;
            }
            var hour = 0, min = 0;
            hour = pItem.time.substr(0, 2);
            min = pItem.time.substr(3, 2);
            var val = pItem.value;
            if (val <= 0)
              val = 15;
            ret[3 + i * 3] = val;
            ret[4 + i * 3] = hour;
            ret[5 + i * 3] = min;
          }
          return ret;
        }
        return null;
      }
      function build_data_show_dev(show) {
        var ret = new Uint8Array(3);
        ret[0] = TLV_LED_Show_dev;
        ret[1] = 1;
        ret[2] = show;
        return ret;
      }
      function build_data_pgm_flicker(pgm_flicker) {
        var ntype = get_json_number(pgm_flicker, "type", 0);
        if (ntype != 0) {
          console.error("unsuport type, build_data_pgm_flicker");
          return null;
        }
        var count = get_json_number(pgm_flicker, "count_pgm", 0);
        var ms = get_json_number(pgm_flicker, "time", 0);
        if (0 == ms) {
          count = 0;
        }
        var ret = new Uint8Array(8);
        ret[0] = TLV_LED_Pgm_flicker;
        ret[1] = 6;
        ret[2] = ntype;
        ret[3] = count;
        import_bytes_deal.bytes_write_int(ret, 4, ms, 4, false);
        return ret;
      }
      function build_data_rotate(rotate) {
        var val = rotate / 90;
        val = val % 4;
        var ret = new Uint8Array(3);
        ret[0] = TLV_LED_Rotate;
        ret[1] = 1;
        ret[2] = val;
        return ret;
      }
      var opt_game = { "left": 37, "up": 38, "right": 39, "down": 40, "start": 115, "pause": 112, "done": 100, "exit": 101 };
      function build_data_game(game) {
        var val = 0;
        if (game.opt != void 0 && typeof game.opt == "string" && opt_game[game.opt] != void 0)
          val = opt_game[game.opt];
        else
          val = game.id + 128;
        var ret = new Uint8Array(3);
        ret[0] = TLV_LED_Game;
        ret[1] = 1;
        ret[2] = val;
        return ret;
      }
      function build_data_ani_num(param) {
        var ntype = param["type"];
        var fmt = param.fmt;
        if (ntype == void 0 || typeof ntype != "number")
          return null;
        if (ntype < 4 && (fmt == void 0 || typeof fmt != "number"))
          return null;
        var len = 2;
        var led_mp = 0;
        var count_pp = 20;
        var arr_pp = param.data;
        var arr_color = param.arr_color;
        if (ntype == 0 && param.fmt_data != null) {
          len += 5;
        }
        if (ntype == 1) {
          len += 3;
        } else if (ntype == 3) {
          len += 4;
        } else if (ntype == 4) {
          fmt = get_json_number(param, "style", 0);
          led_mp = get_json_number(param, "led_mp", 0);
          if (led_mp == 1) {
            fmt = fmt | 128;
          } else {
            if (isArray(arr_pp))
              count_pp = arr_pp.length < 100 ? arr_pp.length : 100;
            len += count_pp;
          }
        } else if (ntype == 5) {
          fmt = get_json_number(param, "style_light", 0);
          if (fmt < 0 || fmt > 1)
            fmt = 0;
          if (fmt == 0) {
            if (isArray(arr_color) && arr_color.length > 0) {
              if (arr_color.length > 8)
                arr_color.length = 8;
              len = 4 + arr_color.length * 3;
            } else
              len = 4;
          } else
            len = 6;
        }
        var ret = new Uint8Array(2 + len);
        ret[0] = TLV_LED_Ani_num;
        ret[1] = len;
        ret[2] = ntype;
        ret[3] = fmt;
        if (ntype == 0 && param.fmt_data != null) {
          ret[4] = param.fmt_data.clock;
          ret[5] = param.fmt_data.date;
          import_bytes_deal.bytes_write_int(ret, 6, param.fmt_data.color, 3, false);
        }
        if (ntype == 1) {
          if (param.h != void 0 && typeof param.h == "number")
            ret[4] = param.h;
          if (param.m != void 0 && typeof param.m == "number")
            ret[5] = param.m;
          if (param.s != void 0 && typeof param.s == "number")
            ret[6] = param.s;
        } else if (ntype == 3) {
          if (param.score_r != void 0 && typeof param.score_r == "number")
            import_bytes_deal.bytes_write_int(ret, 4, param.score_r, 2, false);
          if (param.score_b != void 0 && typeof param.score_b == "number")
            import_bytes_deal.bytes_write_int(ret, 6, param.score_b, 2, false);
        } else if (ntype == 4) {
          if (led_mp == 0 && isArray(arr_pp)) {
            for (var i = 0; i < count_pp; i++)
              ret[4 + i] = arr_pp[i];
          }
        } else if (ntype == 5) {
          ret[4] = get_json_number(param, "style_val", 0);
          if (fmt == 0) {
            ret[5] = get_json_number(param, "speed", 255);
            if (isArray(arr_color) && arr_color.length > 0) {
              for (var i = 0; i < arr_color.length; i++)
                import_bytes_deal.bytes_write_int(ret, 6 + i * 3, arr_color[i], 3, false);
            }
          } else {
            var c = get_json_number(param, "color", 16777215);
            import_bytes_deal.bytes_write_int(ret, 5, c, 3);
          }
        }
        return ret;
      }
      function build_data_bluetooth(param) {
        var ntype = param["type"];
        var val = param.val;
        if (ntype == void 0 || typeof ntype != "number" || val == void 0 || typeof val != "number")
          return null;
        var ret = new Uint8Array(4);
        ret[0] = TLV_LED_bluetooth;
        ret[1] = 2;
        ret[2] = ntype;
        ret[3] = val;
        return ret;
      }
      function build_data_delay_hide(param) {
        if (typeof param != "number")
          return null;
        var ret = new Uint8Array(4);
        ret[0] = TLV_LED_bluetooth;
        ret[1] = 2;
        ret[2] = 0;
        ret[3] = param;
        return ret;
      }
      function build_data_power_model(param) {
        if (typeof param != "number")
          return null;
        var ret = new Uint8Array(4);
        ret[0] = TLV_LED_bluetooth;
        ret[1] = 2;
        ret[2] = 1;
        ret[3] = param;
        return ret;
      }
      function write_telecontrol_model(buf, offset, model) {
        switch (model) {
          case 0: {
            buf[offset] = 170;
            buf[offset + 1] = 188;
            break;
          }
          case 1: {
            buf[offset] = 170;
            buf[offset + 1] = 187;
            break;
          }
          case 2: {
            buf[offset] = 170;
            buf[offset + 1] = 191;
            break;
          }
          case 16: {
            buf[offset] = 170;
            buf[offset + 1] = 189;
            break;
          }
          case 32: {
            buf[offset] = 42;
            buf[offset + 1] = 190;
            break;
          }
        }
      }
      function build_data_telecontrol_btn(param) {
        var keys = param["keys"];
        if (!isArray(keys))
          return null;
        var ret = new Uint8Array(6 + keys.length * 4);
        ret[0] = TLV_LED_bluetooth;
        ret[1] = ret.length - 2;
        ret[2] = 2;
        write_telecontrol_model(ret, 3, get_json_number(param, "model", 0));
        ret[5] = keys.length;
        for (var i = 0; i < keys.length; i++) {
          var item = keys[i];
          var offset = 6 + i * 4;
          ret[offset] = item["index"];
          if (item["delay"] == 1)
            ret[offset] |= 192;
          ret[offset + 1] = item["val"];
          if (ret[offset + 1] == 2) {
            ret[offset + 2] = item["id_pro"] - 1;
            if (get_json_number(item, "reset", 1) == 1)
              ret[offset + 3] = 32;
            var play_model = get_json_number(item, "play_model", -1);
            if (play_model == -1) {
              var id_item = get_json_number(item, "id_item", 1) - 1;
              if (id_item < 0 || id_item > 7)
                ret[offset + 3] = ret[offset + 3] | 223;
              else
                ret[offset + 3] = id_item + ret[offset + 3];
            } else {
              var val = get_json_number(item, "play_value", 31);
              if (val > 30 || val <= 0)
                val = 31;
              ret[offset + 3] = val + ret[offset + 3] + (play_model == 0 ? 64 : 128);
            }
          } else {
            ret[offset + 2] = 255;
            ret[offset + 3] = 255;
          }
        }
        return ret;
      }
      function build_data_telecontrol(param) {
        var ntype = get_json_number(param, "type", 0);
        if (ntype == 2) {
          var ret2 = new Uint8Array(6);
          ret2[0] = TLV_LED_bluetooth;
          ret2[1] = 4;
          ret2[2] = 4;
          write_telecontrol_model(ret2, 3, get_json_number(param, "model", 0));
          ret2[5] = get_json_number(param, "bind_state", 2);
          return ret2;
        }
        return build_data_telecontrol_btn(param);
      }
      function build_data_global_ani(param) {
        var ntype = get_json_number(param, "type", 0);
        if (ntype == 255) {
          var ret = new Uint8Array(3);
          ret[0] = TLV_LED_global_ani;
          ret[1] = 1;
          ret[2] = 0;
          return ret;
        }
        var val = get_json_number(param, "val", -1);
        var time_stay = get_json_number(param, "time_stay", -1);
        var speed = get_json_number(param, "speed", -1);
        var ret = new Uint8Array(6);
        ret[0] = TLV_LED_global_ani;
        ret[1] = 4;
        var gtype = 0;
        if (ntype == 1) {
          gtype = 1;
          ret[3] = 0;
        } else if (val >= 0) {
          gtype = 1;
          ret[3] = val;
        }
        if (speed >= 0) {
          gtype += 2;
          ret[4] = speed;
        }
        if (time_stay >= 0) {
          gtype += 4;
          ret[5] = time_stay;
        }
        ret[2] = gtype;
        return ret;
      }
      function build_data_channel_color(param) {
        var ntype = get_json_number(param, "type", 16);
        if (ntype != 16) {
          var ret = new Uint8Array(3);
          ret[0] = TLV_LED_channel_color;
          ret[1] = 1;
          ret[2] = ntype;
          return ret;
        } else {
          var arr = param["arr_color"];
          if (!isArray(arr)) {
            console.error("channel_color invalid param", param);
            return null;
          }
          var ret = new Uint8Array(3 + arr.length);
          ret[0] = TLV_LED_channel_color;
          ret[1] = 1 + arr.length;
          ret[2] = ntype;
          for (var i = 0; i < arr.length; i++)
            ret[3 + i] = arr[i];
          return ret;
        }
      }
      function build_data_mirror(val) {
        var ret = new Uint8Array(3);
        ret[0] = TLV_LED_mirror;
        ret[1] = 1;
        ret[2] = val;
        return ret;
      }
      function build_data_pwd(param) {
        var ntype = get_json_number(param, "type", 16);
        if (ntype < 0 || ntype > 3) {
          console.error("invalid param: build_data_pwd", param);
          return null;
        }
        var ret;
        if (ntype < 2) {
          var pwd = str_to_uint8array(param["val"]);
          ret = new Uint8Array(pwd.length + 3);
          ret[1] = 1 + pwd.length;
          import_bytes_deal.memcpy_buf(ret, 3, pwd, 0, pwd.length);
        } else {
          ret = new Uint8Array(3);
          ret[1] = 1;
        }
        ret[0] = TLV_LED_pwd;
        ret[2] = ntype;
        return ret;
      }
      function build_data_sensor(param) {
        var ret = new Uint8Array(4);
        ret[0] = TLV_LED_sensor;
        ret[1] = 2;
        ret[2] = get_json_number(param, "type", 0);
        ret[3] = get_json_number(param, "val", 0);
        return ret;
      }
      function build_data_devinfo_ex(param) {
        var data = "";
        var ntype = 0;
        var max = 63;
        if (typeof param == "string")
          data = param;
        else {
          ntype = get_json_number(param, "type", 0);
          data = param.data;
          if (ntype == 1)
            max = 10;
          else
            max = 16;
        }
        if (data.length > max || data == "") {
          console.error("build_data_devinfo_ex data invalid length out or is empty!", param, max);
          return null;
        }
        var ret = new Uint8Array(2 + 1 + data.length + 1);
        ret[0] = TLV_LED_devinfo_ex;
        ret[1] = param.length + 2;
        ret[2] = ntype;
        for (var i = 0; i < data.length; ++i)
          ret[3 + i] = data.charCodeAt(i);
        ret[ret.length - 1] = 0;
        return ret;
      }
      function write_array_int_as_bit(dst, offset, arr) {
        if (!isArray(arr))
          return;
        for (var i = 0; i < arr.length; ++i) {
          var val = arr[i];
          if (val < 0 || val >= 32)
            continue;
          var pos_byte = Math.trunc(val / 8);
          var pos_bit = val % 8;
          if (pos_byte >= 4)
            continue;
          dst[offset + pos_byte] = dst[offset + pos_byte] | 1 << pos_bit;
        }
      }
      function build_data_param_io_times(pItem) {
        var ntype = get_json_number(pItem, "type", -1);
        var id = get_json_number(pItem, "id", -1);
        if (id < 0 || id > 31) {
          console.error("build_data_param_io fail as invalid id", pItem);
          return null;
        }
        if (ntype == 4) {
          var arr = pItem["times"];
          if (!isArray(arr) || arr.length < 0) {
            console.error("build_data_param_io fail as invalid times", pItem);
            return null;
          }
          var ret = new Uint8Array(5 + arr.length * 2);
          ret[0] = TLV_LED_param_io;
          ret[1] = arr.length * 2 + 3;
          ret[2] = 4;
          ret[3] = id;
          ret[4] = arr.length;
          for (var i = 0; i < arr.length; i++)
            import_bytes_deal.bytes_write_int(ret, 5 + i * 2, arr[i], 2, false);
          return ret;
        } else if (ntype == 5) {
          var polar = get_json_number(pItem, "polar", 0);
          var len = polar == 1 ? 4 : 3;
          var ret = new Uint8Array(len + 2);
          ret[0] = TLV_LED_param_io;
          ret[1] = len;
          ret[2] = 5;
          ret[3] = id;
          ret[4] = polar;
          if (polar == 1)
            ret[5] = get_json_number(pItem, "idx_time", 0);
          return ret;
        }
        console.error("build_data_param_io_times fail", pItem);
        return null;
      }
      function build_data_param_io(pItem) {
        var ntype = get_json_number(pItem, "type", -1);
        if (ntype < 0 || ntype > 5) {
          console.error("invalid cmd: build_data_param_io", pItem);
          return null;
        }
        switch (ntype) {
          case 0: {
            var ret = new Uint8Array(7);
            ret[0] = TLV_LED_param_io;
            ret[1] = 5;
            ret[2] = get_json_number(pItem, "polar", 0);
            write_array_int_as_bit(ret, 3, pItem["ids_io"]);
            return ret;
          }
          case 2: {
            var period = pItem["period"];
            if (typeof period != "string") {
              console.error("build_data_param_io fail as invalid period", pItem);
              return null;
            }
            var ret = new Uint8Array(12);
            ret[0] = TLV_LED_param_io;
            ret[1] = 10;
            ret[2] = 2 + get_json_number(pItem, "polar", 1);
            ret[3] = 1;
            bytes_write_period_hn(ret, 4, period);
            write_array_int_as_bit(ret, 8, pItem["ids_io"]);
            return ret;
          }
          case 3: {
            var arr = pItem["value_period"];
            if (!isArray(arr)) {
              console.error("build_data_param_io fail as invalid value_period", pItem);
              return null;
            }
            var ret = new Uint8Array(4 + arr.length * 8);
            ret[0] = TLV_LED_param_io;
            ret[1] = arr.length * 9 + 1;
            ret[2] = 2 + get_json_number(pItem, "polar", 1);
            ret[3] = arr.length;
            for (var i = 0; i < arr.length; i++) {
              var offset = 4 + i * 8;
              bytes_write_period_hn(ret, offset, arr[i].period);
              write_array_int_as_bit(ret, offset + 4, arr[i].ids_pro);
            }
            return ret;
          }
          case 4:
          case 5:
            return build_data_param_io_times(pItem);
        }
        console.error("build_data_param_io fail", pItem);
        return null;
      }
      function build_data_setid(pItem) {
        if (typeof pItem != "string" || pItem.length != 10)
          return null;
        var ret = new Uint8Array(12);
        ret[0] = TLV_LED_Dev_Info;
        ret[1] = 10;
        for (var i = 0; i < 10; i++)
          ret[i + 2] = pItem.charCodeAt(i);
        return ret;
      }
      function build_data_timing(param) {
        var t = /* @__PURE__ */ new Date();
        if (typeof param == "string")
          t = new Date(param);
        var ret = new Uint8Array(11);
        ret[0] = TLV_LED_Timing;
        ret[1] = 9;
        import_bytes_deal.bytes_write_int(ret, 2, t.getFullYear() - 2e3, 2, false);
        ret[4] = t.getMonth() + 1;
        ret[5] = t.getDate();
        ret[6] = t.getHours();
        ret[7] = t.getMinutes();
        ret[8] = t.getSeconds();
        import_bytes_deal.bytes_write_int(ret, 9, t.getMilliseconds(), 2, false);
        return ret;
      }
      function data_rect_to_byte(arr, x0, y0, x1, y1, w, h, color) {
        var len = 1 + 3 + 8 + h * calc_count_mod(w, 8);
        var len_len = tlv_get_len_len(len);
        var ret = new Uint8Array(1 + len_len + len);
        ret[0] = TLV_LED_RTDraw;
        tlv_write_len_len(ret, 1, len);
        ret[1 + len_len] = 0;
        import_bytes_deal.bytes_write_int(ret, 2 + len_len, color, 3, false);
        import_bytes_deal.bytes_write_int(ret, 5 + len_len, x0, 2, false);
        import_bytes_deal.bytes_write_int(ret, 7 + len_len, y0, 2, false);
        import_bytes_deal.bytes_write_int(ret, 9 + len_len, x1, 2, false);
        import_bytes_deal.bytes_write_int(ret, 11 + len_len, y1, 2, false);
        var index = 13 + len_len;
        for (var y = 0; y < h; y++) {
          var pos_line = y * w;
          var b = 0;
          var index_b = 7;
          for (var x = 0; x < w; x++) {
            b += arr[pos_line + x] << index_b;
            if (index_b == 0) {
              ret[index++] = b;
              b = 0;
              index_b = 7;
            } else
              index_b--;
          }
          if (index_b < 7)
            ret[index++] = b;
        }
        return ret;
      }
      function build_data_RTDraw(rtdraw) {
        if (null == rtdraw["type"] || typeof rtdraw["type"] != "number")
          return null;
        if (null == rtdraw.color || typeof rtdraw.color != "number")
          return null;
        if (rtdraw.type != 16) {
          if (null == rtdraw.x0 || typeof rtdraw.x0 != "number")
            return null;
          if (null == rtdraw.y0 || typeof rtdraw.y0 != "number")
            return null;
          if (null == rtdraw.x1 || typeof rtdraw.x1 != "number")
            return null;
          if (null == rtdraw.y1 || typeof rtdraw.y1 != "number")
            return null;
          if (rtdraw.x0 > rtdraw.x1 || rtdraw.y0 > rtdraw.y1)
            return null;
        }
        var ret = null;
        if (rtdraw["type"] == 0) {
          var arr = rtdraw.data;
          var w = rtdraw.x1 - rtdraw.x0 + 1;
          var h = rtdraw.y1 - rtdraw.y0 + 1;
          if (!isArray(arr) || arr.length != w * h)
            return null;
          ret = data_rect_to_byte(arr, rtdraw.x0, rtdraw.y0, rtdraw.x1, rtdraw.y1, w, h, rtdraw.color);
        } else if (rtdraw["type"] == 1) {
          if (null == rtdraw.type_rect || typeof rtdraw.type_rect != "number")
            return null;
          if (rtdraw.type_rect != 0)
            return null;
          var len = 1 + 3 + 1 + 8;
          ret = new Uint8Array(2 + len);
          ret[0] = TLV_LED_RTDraw;
          ret[1] = len;
          ret[2] = 1;
          import_bytes_deal.bytes_write_int(ret, 3, rtdraw.color, 3, false);
          ret[6] = rtdraw.type_rect;
          import_bytes_deal.bytes_write_int(ret, 7, rtdraw.x0, 2, false);
          import_bytes_deal.bytes_write_int(ret, 9, rtdraw.y0, 2, false);
          import_bytes_deal.bytes_write_int(ret, 11, rtdraw.x1, 2, false);
          import_bytes_deal.bytes_write_int(ret, 13, rtdraw.y1, 2, false);
        } else if (rtdraw["type"] == 16) {
          var arr_pos = rtdraw.data;
          if (!isArray(arr_pos) || arr_pos.length < 1)
            return null;
          var item = arr_pos[0];
          if (!isArray(item) || item.length != 2)
            return null;
          var x0 = item[0], y0 = item[1], x1 = item[0], y1 = item[1];
          for (var i = 1; i < arr_pos.length; i++) {
            var item = arr_pos[i];
            if (!isArray(item) || item.length != 2) {
              return null;
            }
            if (x0 > item[0])
              x0 = item[0];
            else if (x1 < item[0])
              x1 = item[0];
            if (y0 > item[1])
              y0 = item[1];
            else if (y1 < item[1])
              y1 = item[1];
          }
          var w = x1 - x0 + 1;
          var h = y1 - y0 + 1;
          var arr_s = new Array(w * h);
          for (var i = 0; i < arr_s.length; i++)
            arr_s[i] = 0;
          for (var i = 0; i < arr_pos.length; i++) {
            var item = arr_pos[i];
            var index = item[0] - x0 + (item[1] - y0) * w;
            arr_s[index] = 1;
          }
          ret = data_rect_to_byte(arr_s, x0, y0, x1, y1, w, h, rtdraw.color);
        } else {
          return null;
        }
        return ret;
      }
      function build_data_del(del) {
        var ret = null;
        if (1 == del.format) {
          ret = new Uint8Array(3);
          ret[0] = TLV_LED_Delete;
          ret[1] = 1;
          ret[2] = 3;
          return ret;
        }
        if (1 == del.del_all) {
          ret = new Uint8Array(4);
          ret[0] = TLV_LED_Delete;
          ret[1] = 2;
          ret[2] = 0;
          ret[3] = 255;
          return ret;
        }
        var pos = 0;
        var size = 0;
        var arr = del.del_ids;
        var len_len = 1;
        do {
          if (isArray(arr)) {
            size = arr.length;
            var len = 1 + size;
            len_len = tlv_get_len_len(len);
            ret = new Uint8Array(1 + len_len + len);
            tlv_write_len_len(ret, 1, len);
            ret[1 + len_len] = 0;
            pos = 2 + len_len;
            break;
          }
          var no_pgm = del.id_pro - 1;
          if (no_pgm < 0)
            break;
          arr = del.del_ids_rect;
          if (isArray(arr)) {
            size = arr.length;
            ret = new Uint8Array(4 + size);
            ret[2] = 1;
            ret[3] = no_pgm;
            pos = 4;
            break;
          }
          var no_rect = del.id_rect - 1;
          if (no_rect < 0)
            break;
          arr = del.del_ids_item;
          if (isArray(arr)) {
            size = arr.length;
            ret = new Uint8Array(5 + size);
            ret[2] = 2;
            ret[3] = no_pgm;
            ret[4] = no_rect;
            pos = 5;
            break;
          }
        } while (0);
        if (null != ret) {
          ret[0] = TLV_LED_Delete;
          tlv_write_len_len(ret, 1, ret.length - 1 - len_len);
          for (var i = 0; i < size; i++)
            ret[pos + i] = arr[i] - 1;
        } else
          console.error("build_data_del failed!\n");
        return ret;
      }
      function build_data_dispatch_pgm(dispatch) {
        var type = dispatch["type"];
        var model = 255, val = 1;
        var ignore = dispatch.ignore_pgm_cmd;
        var bDefault = false;
        var tmp = dispatch.play_fixed_time;
        if (typeof tmp == "number") {
          model = 1;
          val = tmp;
        } else {
          tmp = dispatch.play_loop;
          if (typeof tmp == "number") {
            model = 0;
            val = tmp;
          } else
            bDefault = true;
        }
        var ret = new Uint8Array(32);
        ret[0] = TLV_LED_Dispatch_pgm;
        var len = 0;
        switch (type) {
          case 0: {
            var pre_next = get_json_number(dispatch, "value", 0);
            if (0 == get_json_number(dispatch, "target", 0)) {
              ret[2] = pre_next;
              len = 1;
            } else {
              ret[2] = pre_next + 3;
              ret[3] = get_json_number(dispatch, "id_pro", 1) - 1;
              ret[4] = get_json_number(dispatch, "id_rect", 1) - 1;
              len = 3;
            }
            break;
          }
          case 1: {
            var pid_item = dispatch.id_item;
            var id_pro = get_json_number(dispatch, "id_pro", 1) - 1;
            if (null == pid_item) {
              ret[2] = 2;
              ret[3] = id_pro;
              len = 2;
            } else {
              ret[2] = 5;
              ret[3] = id_pro;
              ret[4] = get_json_number(dispatch, "id_rect", 1) - 1;
              ret[5] = pid_item - 1;
              len = 4;
            }
            break;
          }
          case 2: {
            var pId_res = dispatch["id_res"];
            if (typeof pId_res != "string" || pId_res.length != 40)
              return null;
            var id_res = import_bytes_deal.hex_to_bytes(pId_res, 2);
            ret[2] = 6;
            import_bytes_deal.memcpy_buf(ret, 3, id_res, 0, 20);
            len = 21;
            break;
          }
          default:
            return null;
        }
        ret[len + 2] = ignore;
        ret[len + 3] = model;
        if (bDefault)
          len = len + 2;
        else {
          import_bytes_deal.bytes_write_int(ret, len + 4, val, 2, false);
          len = len + 4;
        }
        ret[1] = len;
        return ret.slice(0, len + 2);
      }
      function build_data_pgm_play(cmd) {
        var model = get_json_number(cmd, "model", 0);
        var index = get_json_number(cmd, "index", 255);
        var len = 0;
        var arr = cmd["ids_pro"];
        if (isArray(arr)) {
          len = arr.length;
        }
        var len_len = tlv_get_len_len(len + 2);
        var ret = new Uint8Array(1 + len_len + 2 + len);
        ret[0] = TLV_LED_pgm_play;
        var offset = tlv_write_len_len(ret, 1, len + 2) + 1;
        ret[offset++] = model;
        ret[offset++] = index;
        for (var i = 0; i < len; i++) {
          ret[offset + i] = arr[i] - 1;
        }
        return ret;
      }
      function build_data_get_pgm_key(ids_pgm) {
        var len = 0;
        if (isArray(ids_pgm) && ids_pgm.length > 0) {
          len = ids_pgm.length;
          if (len > 8)
            len == 8;
        }
        var ret_ex = new Uint8Array(2 + len);
        ret_ex[0] = TLV_LED_pgm_key;
        ret_ex[1] = len;
        for (var i = 0; i < len; i++)
          ret_ex[i + 2] = ids_pgm[i] - 1;
        return ret_ex;
      }
      function build_data_get(get, obj) {
        var cmd = 255;
        var ret = null;
        if (typeof get == "string") {
          if ("param_dev" == get)
            cmd = TLV_LED_Advance;
          else if ("power" == get)
            cmd = TLV_LED_Power;
          else if ("light" == get)
            cmd = TLV_LED_Light;
          else if ("dev_info" == get) {
            if (obj.dev_key != null && typeof obj.dev_key == "string" && obj.dev_key.length > 0) {
              var ret_ex = new Uint8Array(2 + obj.dev_key.length);
              ret_ex[0] = TLV_LED_Dev_Info;
              ret_ex[1] = obj.dev_key.length;
              for (var i = 0; i < obj.dev_key.length; i++)
                ret_ex[i + 2] = obj.dev_key.charCodeAt(i);
              return ret_ex;
            } else
              cmd = TLV_LED_Dev_Info;
          } else if ("rotate" == get)
            cmd = TLV_LED_Rotate;
          else if ("bluetooth" == get || "delay_hide" == get) {
            var ret_ex = new Uint8Array(3);
            ret_ex[0] = TLV_LED_bluetooth;
            ret_ex[1] = 1;
            ret_ex[2] = 0;
            return ret_ex;
          } else if ("power_model" == get) {
            var ret_ex = new Uint8Array(3);
            ret_ex[0] = TLV_LED_bluetooth;
            ret_ex[1] = 1;
            ret_ex[2] = 1;
            return ret_ex;
          } else if ("telecontrol" == get) {
            var ret_ex = new Uint8Array(5);
            ret_ex[0] = TLV_LED_bluetooth;
            ret_ex[1] = 3;
            ret_ex[2] = 2 + get_json_number(obj, "type", 0);
            var model = get_json_number(obj, "model", 0);
            write_telecontrol_model(ret_ex, 3, model);
            return ret_ex;
          } else if ("pgm_key" == get)
            return build_data_get_pgm_key(obj["ids_pro"]);
          else if ("pgm_play" == get)
            cmd = TLV_LED_pgm_play;
          else if ("global_ani" == get)
            cmd = TLV_LED_global_ani;
          else if ("ani_num" == get) {
            var ret_ex = new Uint8Array(3);
            ret_ex[0] = TLV_LED_Ani_num;
            ret_ex[1] = 1;
            ret_ex[2] = get_json_number(obj, "type", 0);
            return ret_ex;
          } else if ("channel_color" == get)
            cmd = TLV_LED_channel_color;
          else if ("mirror" == get)
            cmd = TLV_LED_mirror;
          else if ("sensor" == get) {
            var ret_ex = new Uint8Array(3);
            ret_ex[0] = TLV_LED_sensor;
            ret_ex[1] = 1;
            ret_ex[2] = get_json_number(obj, "type", 0);
            return ret_ex;
          } else if ("pgm_flicker" == get)
            cmd = TLV_LED_Pgm_flicker;
          else if ("param_io" == get) {
            var ntype = get_json_number(obj, "type", 0);
            var len = ntype >= 4 ? 4 : 3;
            var ret_ex = new Uint8Array(len);
            ret_ex[0] = TLV_LED_param_io;
            ret_ex[1] = 1;
            ret_ex[2] = ntype;
            if (len == 4)
              ret_ex[3] = get_json_number(obj, "id", 0);
            return ret_ex;
          } else if ("pwd" == get) {
            var ret_ex = new Uint8Array(3);
            ret_ex[0] = TLV_LED_pwd;
            ret_ex[1] = 1;
            ret_ex[2] = get_json_number(obj, "type", 2);
            return ret_ex;
          } else {
            return null;
          }
          ret = new Uint8Array(2);
          ret[0] = cmd;
          return ret;
        }
        return null;
      }
      function get_obj_cmd(cmd) {
        var arr = [
          "rt_show",
          "get",
          "delete",
          "param_dev",
          "power",
          "light",
          "param_gprs",
          "param_net",
          "param_wifi",
          "baudrate",
          "config_pgm",
          "dispatch",
          "pgm_play",
          "param_svr",
          "upgrade",
          "tab_scan",
          "text_part_update",
          "sync",
          "param_timing",
          "expend",
          "play_list",
          "cancel",
          "param_inspect",
          "param_io",
          "set_id",
          "gamma",
          "delay_start",
          "pgm_flicker",
          "show_dev",
          "ts_pgm_upload",
          "rotate",
          "game",
          "RTDraw",
          "ani_num",
          "bluetooth",
          "delay_hide",
          "power_model",
          "telecontrol",
          "timing",
          "global_ani",
          "channel_color",
          "mirror",
          "pwd",
          "sensor",
          "dev_info_ex",
          "test"
        ];
        var count = arr.length;
        for (var i = 0; i < count; i++) {
          var pRet = cmd[arr[i]];
          if (null != pRet)
            return { item: pRet, "type": i };
        }
        return null;
      }
      function write_data_header(pData, offset, len, sno, type_data, type_cmd) {
        import_bytes_deal.bytes_write_int(pData, offset, LED_Head_TLV, 2, false);
        import_bytes_deal.bytes_write_int(pData, offset + 2, 65535, 2, false);
        import_bytes_deal.bytes_write_int(pData, offset + 4, len + 4, 2, false);
        import_bytes_deal.bytes_write_int(pData, offset + 6, sno & 65535, 2, false);
        pData[offset + 8] = type_data;
        pData[offset + 9] = type_cmd;
        return 10;
      }
      function build_pkt(sno, data, type_data, type_cmd, type) {
        if (null == data || data.length == 0)
          return new Uint8Array(0);
        L_count_pkt = L_count_pkt + 1;
        if (L_unack)
          type_data &= 191;
        var bChecksum = type_data >> 7 == 1;
        var pos = 0;
        var ret = null;
        var len_pkt = data.length + 10;
        var len_cs = bChecksum ? 2 : 0;
        len_pkt += len_cs;
        switch (type) {
          case 1: {
            ret = new Uint8Array(2 + len_pkt);
            import_bytes_deal.bytes_write_int(ret, 0, len_pkt, 2);
            pos = 2;
            break;
          }
          case 2: {
            ret = new Uint8Array(6 + len_pkt);
            import_bytes_deal.bytes_write_int(ret, 0, len_pkt + 2, 2);
            import_bytes_deal.bytes_write_int(ret, 4, len_pkt, 2);
            pos = 6;
            break;
          }
          case 0:
          default:
            ret = new Uint8Array(len_pkt);
            break;
        }
        var len_header = write_data_header(ret, pos, data.length + len_cs, sno, type_data, type_cmd);
        import_bytes_deal.memcpy_buf(ret, pos + len_header, data, 0, data.length);
        if (bChecksum) {
          var cs = 0;
          len_pkt += pos;
          for (var i = pos; i < len_pkt - 2; ++i)
            cs += ret[i];
          import_bytes_deal.bytes_write_int(ret, ret.length - 2, cs, 2);
        }
        return ret;
      }
      function build_data_cmd(cmd, sno, res) {
        L_type_cmd = TYPE_CMD_TLV_Set;
        var obj = get_obj_cmd(cmd);
        if (obj == null)
          return null;
        var pItem = obj.item;
        var ret = null;
        switch (obj["type"]) {
          case 0:
            return build_data_rt_show(pItem, sno, res);
          case 1: {
            L_type_cmd = TYPE_CMD_TLV_Get;
            ret = build_data_get(pItem, cmd);
            break;
          }
          case 2:
            ret = build_data_del(pItem);
            break;
          case 3:
            ret = build_data_param_dev(pItem);
            break;
          case 4:
            ret = build_data_power(pItem);
            break;
          case 5:
            ret = build_data_light(pItem);
            break;
          case 11:
            ret = build_data_dispatch_pgm(pItem);
            break;
          case 12:
            ret = build_data_pgm_play(pItem);
            break;
          case 14: {
            if (res != void 0 && res.length > 0)
              return build_data_upgrade(pItem, sno, res[0]);
            return null;
          }
          case 20:
            return build_data_play_list(pItem, cmd.type, sno);
          case 21:
            ret = build_data_cancel(pItem);
            break;
          case 23:
            ret = build_data_param_io(pItem);
            break;
          case 24:
            ret = build_data_setid(pItem);
            break;
          case 27:
            ret = build_data_pgm_flicker(pItem);
            break;
          case 28:
            ret = build_data_show_dev(pItem);
            break;
          case 30:
            ret = build_data_rotate(pItem);
            break;
          case 31:
            ret = build_data_game(pItem);
            break;
          case 32:
            ret = build_data_RTDraw(pItem);
            break;
          case 33:
            ret = build_data_ani_num(pItem);
            break;
          case 34:
            ret = build_data_bluetooth(pItem);
            break;
          case 35:
            ret = build_data_delay_hide(pItem);
            break;
          case 36:
            ret = build_data_power_model(pItem);
            break;
          case 37:
            ret = build_data_telecontrol(pItem);
            break;
          case 38:
            ret = build_data_timing(pItem);
            break;
          case 39:
            ret = build_data_global_ani(pItem);
            break;
          case 40:
            ret = build_data_channel_color(pItem);
            break;
          case 41:
            ret = build_data_mirror(pItem);
            break;
          case 42:
            ret = build_data_pwd(pItem);
            break;
          case 43:
            ret = build_data_sensor(pItem);
            break;
          case 44:
            ret = build_data_devinfo_ex(pItem);
            break;
          default: {
            return null;
          }
        }
        if (!ret)
          return null;
        return build_pkt(sno, ret, L_type_data, L_type_cmd, 1);
      }
      function parse_data(obj, res) {
        L_count_pkt = 0;
        L_unack = obj.unack == 1;
        if (obj.cmd != null) {
          return build_data_cmd(obj.cmd, obj.sno, res);
        } else if (obj.pkts_program != null) {
          return build_data_pgm(obj.pkts_program, obj["id_res"], get_json_number(obj, "ts_update", 0), obj.sno, res, obj["play_pgm"]);
        } else
          return null;
      }
      exports.parse_data = parse_data;
      function get_count_pkt() {
        return L_count_pkt;
      }
      exports.get_count_pkt = get_count_pkt;
      function set_pkt_size(v1, v2) {
        GSize_max_pkt_res_tlv = v1;
        GSize_max_pkt_tlv = v2;
      }
      exports.set_pkt_size = set_pkt_size;
    }
  });

  // main.js
  var base64_buf = __toESM(require_base64_buf());
  var bytes_deal = __toESM(require_bytes_deal());
  var code_convert = __toESM(require_code_convert());
  var parse_ack = __toESM(require_parse_ack());
  var parse_data_module = __toESM(require_parse_data());
  window.import_base64_buf = base64_buf;
  window.import_bytes_deal = bytes_deal;
  window.import_code_convert = code_convert;
  window.import_parse_ack = parse_ack;
  window.base64_buf_1 = base64_buf;
  window.bytes_deal_1 = bytes_deal;
  window.code_convert_1 = code_convert;
  window.parse_ack_1 = parse_ack;
  for (const [key, fn] of Object.entries(parse_data_module)) {
    window[key] = fn;
  }
  window.parse_ack = parse_ack.parse_ack_ex;
  window.ledSdk = {
    ...parse_data_module,
    parse_ack_ex: parse_ack.parse_ack_ex
  };
})();
